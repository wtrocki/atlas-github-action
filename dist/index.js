require('./sourcemap-register.js');/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 87351:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.issue = exports.issueCommand = void 0;
const os = __importStar(__nccwpck_require__(12087));
const utils_1 = __nccwpck_require__(5278);
/**
 * Commands
 *
 * Command Format:
 *   ::name key=value,key=value::message
 *
 * Examples:
 *   ::warning::This is the message
 *   ::set-env name=MY_VAR::some value
 */
function issueCommand(command, properties, message) {
    const cmd = new Command(command, properties, message);
    process.stdout.write(cmd.toString() + os.EOL);
}
exports.issueCommand = issueCommand;
function issue(name, message = '') {
    issueCommand(name, {}, message);
}
exports.issue = issue;
const CMD_STRING = '::';
class Command {
    constructor(command, properties, message) {
        if (!command) {
            command = 'missing.command';
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
    }
    toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
            cmdStr += ' ';
            let first = true;
            for (const key in this.properties) {
                if (this.properties.hasOwnProperty(key)) {
                    const val = this.properties[key];
                    if (val) {
                        if (first) {
                            first = false;
                        }
                        else {
                            cmdStr += ',';
                        }
                        cmdStr += `${key}=${escapeProperty(val)}`;
                    }
                }
            }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
    }
}
function escapeData(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A');
}
function escapeProperty(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A')
        .replace(/:/g, '%3A')
        .replace(/,/g, '%2C');
}
//# sourceMappingURL=command.js.map

/***/ }),

/***/ 42186:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
const command_1 = __nccwpck_require__(87351);
const file_command_1 = __nccwpck_require__(717);
const utils_1 = __nccwpck_require__(5278);
const os = __importStar(__nccwpck_require__(12087));
const path = __importStar(__nccwpck_require__(85622));
const oidc_utils_1 = __nccwpck_require__(98041);
/**
 * The code to exit an action
 */
var ExitCode;
(function (ExitCode) {
    /**
     * A code indicating that the action was successful
     */
    ExitCode[ExitCode["Success"] = 0] = "Success";
    /**
     * A code indicating that the action was a failure
     */
    ExitCode[ExitCode["Failure"] = 1] = "Failure";
})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));
//-----------------------------------------------------------------------
// Variables
//-----------------------------------------------------------------------
/**
 * Sets env variable for this action and future actions in the job
 * @param name the name of the variable to set
 * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function exportVariable(name, val) {
    const convertedVal = utils_1.toCommandValue(val);
    process.env[name] = convertedVal;
    const filePath = process.env['GITHUB_ENV'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('ENV', file_command_1.prepareKeyValueMessage(name, val));
    }
    command_1.issueCommand('set-env', { name }, convertedVal);
}
exports.exportVariable = exportVariable;
/**
 * Registers a secret which will get masked from logs
 * @param secret value of the secret
 */
function setSecret(secret) {
    command_1.issueCommand('add-mask', {}, secret);
}
exports.setSecret = setSecret;
/**
 * Prepends inputPath to the PATH (for this action and future actions)
 * @param inputPath
 */
function addPath(inputPath) {
    const filePath = process.env['GITHUB_PATH'] || '';
    if (filePath) {
        file_command_1.issueFileCommand('PATH', inputPath);
    }
    else {
        command_1.issueCommand('add-path', {}, inputPath);
    }
    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;
}
exports.addPath = addPath;
/**
 * Gets the value of an input.
 * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
 * Returns an empty string if the value is not defined.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string
 */
function getInput(name, options) {
    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';
    if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
    }
    if (options && options.trimWhitespace === false) {
        return val;
    }
    return val.trim();
}
exports.getInput = getInput;
/**
 * Gets the values of an multiline input.  Each value is also trimmed.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string[]
 *
 */
function getMultilineInput(name, options) {
    const inputs = getInput(name, options)
        .split('\n')
        .filter(x => x !== '');
    if (options && options.trimWhitespace === false) {
        return inputs;
    }
    return inputs.map(input => input.trim());
}
exports.getMultilineInput = getMultilineInput;
/**
 * Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
 * Support boolean input list: `true | True | TRUE | false | False | FALSE` .
 * The return value is also in boolean type.
 * ref: https://yaml.org/spec/1.2/spec.html#id2804923
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   boolean
 */
function getBooleanInput(name, options) {
    const trueValue = ['true', 'True', 'TRUE'];
    const falseValue = ['false', 'False', 'FALSE'];
    const val = getInput(name, options);
    if (trueValue.includes(val))
        return true;
    if (falseValue.includes(val))
        return false;
    throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}\n` +
        `Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
}
exports.getBooleanInput = getBooleanInput;
/**
 * Sets the value of an output.
 *
 * @param     name     name of the output to set
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function setOutput(name, value) {
    const filePath = process.env['GITHUB_OUTPUT'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('OUTPUT', file_command_1.prepareKeyValueMessage(name, value));
    }
    process.stdout.write(os.EOL);
    command_1.issueCommand('set-output', { name }, utils_1.toCommandValue(value));
}
exports.setOutput = setOutput;
/**
 * Enables or disables the echoing of commands into stdout for the rest of the step.
 * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
 *
 */
function setCommandEcho(enabled) {
    command_1.issue('echo', enabled ? 'on' : 'off');
}
exports.setCommandEcho = setCommandEcho;
//-----------------------------------------------------------------------
// Results
//-----------------------------------------------------------------------
/**
 * Sets the action status to failed.
 * When the action exits it will be with an exit code of 1
 * @param message add error issue message
 */
function setFailed(message) {
    process.exitCode = ExitCode.Failure;
    error(message);
}
exports.setFailed = setFailed;
//-----------------------------------------------------------------------
// Logging Commands
//-----------------------------------------------------------------------
/**
 * Gets whether Actions Step Debug is on or not
 */
function isDebug() {
    return process.env['RUNNER_DEBUG'] === '1';
}
exports.isDebug = isDebug;
/**
 * Writes debug message to user log
 * @param message debug message
 */
function debug(message) {
    command_1.issueCommand('debug', {}, message);
}
exports.debug = debug;
/**
 * Adds an error issue
 * @param message error issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function error(message, properties = {}) {
    command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.error = error;
/**
 * Adds a warning issue
 * @param message warning issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function warning(message, properties = {}) {
    command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.warning = warning;
/**
 * Adds a notice issue
 * @param message notice issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function notice(message, properties = {}) {
    command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.notice = notice;
/**
 * Writes info to log with console.log.
 * @param message info message
 */
function info(message) {
    process.stdout.write(message + os.EOL);
}
exports.info = info;
/**
 * Begin an output group.
 *
 * Output until the next `groupEnd` will be foldable in this group
 *
 * @param name The name of the output group
 */
function startGroup(name) {
    command_1.issue('group', name);
}
exports.startGroup = startGroup;
/**
 * End an output group.
 */
function endGroup() {
    command_1.issue('endgroup');
}
exports.endGroup = endGroup;
/**
 * Wrap an asynchronous function call in a group.
 *
 * Returns the same type as the function itself.
 *
 * @param name The name of the group
 * @param fn The function to wrap in the group
 */
function group(name, fn) {
    return __awaiter(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
            result = yield fn();
        }
        finally {
            endGroup();
        }
        return result;
    });
}
exports.group = group;
//-----------------------------------------------------------------------
// Wrapper action state
//-----------------------------------------------------------------------
/**
 * Saves state for current action, the state can only be retrieved by this action's post job execution.
 *
 * @param     name     name of the state to store
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function saveState(name, value) {
    const filePath = process.env['GITHUB_STATE'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('STATE', file_command_1.prepareKeyValueMessage(name, value));
    }
    command_1.issueCommand('save-state', { name }, utils_1.toCommandValue(value));
}
exports.saveState = saveState;
/**
 * Gets the value of an state set by this action's main execution.
 *
 * @param     name     name of the state to get
 * @returns   string
 */
function getState(name) {
    return process.env[`STATE_${name}`] || '';
}
exports.getState = getState;
function getIDToken(aud) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
    });
}
exports.getIDToken = getIDToken;
/**
 * Summary exports
 */
var summary_1 = __nccwpck_require__(81327);
Object.defineProperty(exports, "summary", ({ enumerable: true, get: function () { return summary_1.summary; } }));
/**
 * @deprecated use core.summary
 */
var summary_2 = __nccwpck_require__(81327);
Object.defineProperty(exports, "markdownSummary", ({ enumerable: true, get: function () { return summary_2.markdownSummary; } }));
/**
 * Path exports
 */
var path_utils_1 = __nccwpck_require__(2981);
Object.defineProperty(exports, "toPosixPath", ({ enumerable: true, get: function () { return path_utils_1.toPosixPath; } }));
Object.defineProperty(exports, "toWin32Path", ({ enumerable: true, get: function () { return path_utils_1.toWin32Path; } }));
Object.defineProperty(exports, "toPlatformPath", ({ enumerable: true, get: function () { return path_utils_1.toPlatformPath; } }));
//# sourceMappingURL=core.js.map

/***/ }),

/***/ 717:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// For internal use, subject to change.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
const fs = __importStar(__nccwpck_require__(35747));
const os = __importStar(__nccwpck_require__(12087));
const uuid_1 = __nccwpck_require__(75840);
const utils_1 = __nccwpck_require__(5278);
function issueFileCommand(command, message) {
    const filePath = process.env[`GITHUB_${command}`];
    if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
    }
    if (!fs.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
    }
    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {
        encoding: 'utf8'
    });
}
exports.issueFileCommand = issueFileCommand;
function prepareKeyValueMessage(key, value) {
    const delimiter = `ghadelimiter_${uuid_1.v4()}`;
    const convertedValue = utils_1.toCommandValue(value);
    // These should realistically never happen, but just in case someone finds a
    // way to exploit uuid generation let's not allow keys or values that contain
    // the delimiter.
    if (key.includes(delimiter)) {
        throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
    }
    if (convertedValue.includes(delimiter)) {
        throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
    }
    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;
}
exports.prepareKeyValueMessage = prepareKeyValueMessage;
//# sourceMappingURL=file-command.js.map

/***/ }),

/***/ 98041:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OidcClient = void 0;
const http_client_1 = __nccwpck_require__(96255);
const auth_1 = __nccwpck_require__(35526);
const core_1 = __nccwpck_require__(42186);
class OidcClient {
    static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
            allowRetries: allowRetry,
            maxRetries: maxRetry
        };
        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
    }
    static getRequestToken() {
        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];
        if (!token) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');
        }
        return token;
    }
    static getIDTokenUrl() {
        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];
        if (!runtimeUrl) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');
        }
        return runtimeUrl;
    }
    static getCall(id_token_url) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const httpclient = OidcClient.createHttpClient();
            const res = yield httpclient
                .getJson(id_token_url)
                .catch(error => {
                throw new Error(`Failed to get ID Token. \n 
        Error Code : ${error.statusCode}\n 
        Error Message: ${error.result.message}`);
            });
            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
            if (!id_token) {
                throw new Error('Response json body do not have ID Token field');
            }
            return id_token;
        });
    }
    static getIDToken(audience) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // New ID Token is requested from action service
                let id_token_url = OidcClient.getIDTokenUrl();
                if (audience) {
                    const encodedAudience = encodeURIComponent(audience);
                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;
                }
                core_1.debug(`ID token url is ${id_token_url}`);
                const id_token = yield OidcClient.getCall(id_token_url);
                core_1.setSecret(id_token);
                return id_token;
            }
            catch (error) {
                throw new Error(`Error message: ${error.message}`);
            }
        });
    }
}
exports.OidcClient = OidcClient;
//# sourceMappingURL=oidc-utils.js.map

/***/ }),

/***/ 2981:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
const path = __importStar(__nccwpck_require__(85622));
/**
 * toPosixPath converts the given path to the posix form. On Windows, \\ will be
 * replaced with /.
 *
 * @param pth. Path to transform.
 * @return string Posix path.
 */
function toPosixPath(pth) {
    return pth.replace(/[\\]/g, '/');
}
exports.toPosixPath = toPosixPath;
/**
 * toWin32Path converts the given path to the win32 form. On Linux, / will be
 * replaced with \\.
 *
 * @param pth. Path to transform.
 * @return string Win32 path.
 */
function toWin32Path(pth) {
    return pth.replace(/[/]/g, '\\');
}
exports.toWin32Path = toWin32Path;
/**
 * toPlatformPath converts the given path to a platform-specific path. It does
 * this by replacing instances of / and \ with the platform-specific path
 * separator.
 *
 * @param pth The path to platformize.
 * @return string The platform-specific path.
 */
function toPlatformPath(pth) {
    return pth.replace(/[/\\]/g, path.sep);
}
exports.toPlatformPath = toPlatformPath;
//# sourceMappingURL=path-utils.js.map

/***/ }),

/***/ 81327:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
const os_1 = __nccwpck_require__(12087);
const fs_1 = __nccwpck_require__(35747);
const { access, appendFile, writeFile } = fs_1.promises;
exports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';
exports.SUMMARY_DOCS_URL = 'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';
class Summary {
    constructor() {
        this._buffer = '';
    }
    /**
     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
     * Also checks r/w permissions.
     *
     * @returns step summary file path
     */
    filePath() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._filePath) {
                return this._filePath;
            }
            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
            if (!pathFromEnv) {
                throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
            }
            try {
                yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
            }
            catch (_a) {
                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
            }
            this._filePath = pathFromEnv;
            return this._filePath;
        });
    }
    /**
     * Wraps content in an HTML tag, adding any HTML attributes
     *
     * @param {string} tag HTML tag to wrap
     * @param {string | null} content content within the tag
     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
     *
     * @returns {string} content wrapped in HTML element
     */
    wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs)
            .map(([key, value]) => ` ${key}="${value}"`)
            .join('');
        if (!content) {
            return `<${tag}${htmlAttrs}>`;
        }
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
    }
    /**
     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
     *
     * @param {SummaryWriteOptions} [options] (optional) options for write operation
     *
     * @returns {Promise<Summary>} summary instance
     */
    write(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
            const filePath = yield this.filePath();
            const writeFunc = overwrite ? writeFile : appendFile;
            yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });
            return this.emptyBuffer();
        });
    }
    /**
     * Clears the summary buffer and wipes the summary file
     *
     * @returns {Summary} summary instance
     */
    clear() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.emptyBuffer().write({ overwrite: true });
        });
    }
    /**
     * Returns the current summary buffer as a string
     *
     * @returns {string} string of summary buffer
     */
    stringify() {
        return this._buffer;
    }
    /**
     * If the summary buffer is empty
     *
     * @returns {boolen} true if the buffer is empty
     */
    isEmptyBuffer() {
        return this._buffer.length === 0;
    }
    /**
     * Resets the summary buffer without writing to summary file
     *
     * @returns {Summary} summary instance
     */
    emptyBuffer() {
        this._buffer = '';
        return this;
    }
    /**
     * Adds raw text to the summary buffer
     *
     * @param {string} text content to add
     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
     *
     * @returns {Summary} summary instance
     */
    addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
    }
    /**
     * Adds the operating system-specific end-of-line marker to the buffer
     *
     * @returns {Summary} summary instance
     */
    addEOL() {
        return this.addRaw(os_1.EOL);
    }
    /**
     * Adds an HTML codeblock to the summary buffer
     *
     * @param {string} code content to render within fenced code block
     * @param {string} lang (optional) language to syntax highlight code
     *
     * @returns {Summary} summary instance
     */
    addCodeBlock(code, lang) {
        const attrs = Object.assign({}, (lang && { lang }));
        const element = this.wrap('pre', this.wrap('code', code), attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML list to the summary buffer
     *
     * @param {string[]} items list of items to render
     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
     *
     * @returns {Summary} summary instance
     */
    addList(items, ordered = false) {
        const tag = ordered ? 'ol' : 'ul';
        const listItems = items.map(item => this.wrap('li', item)).join('');
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML table to the summary buffer
     *
     * @param {SummaryTableCell[]} rows table rows
     *
     * @returns {Summary} summary instance
     */
    addTable(rows) {
        const tableBody = rows
            .map(row => {
            const cells = row
                .map(cell => {
                if (typeof cell === 'string') {
                    return this.wrap('td', cell);
                }
                const { header, data, colspan, rowspan } = cell;
                const tag = header ? 'th' : 'td';
                const attrs = Object.assign(Object.assign({}, (colspan && { colspan })), (rowspan && { rowspan }));
                return this.wrap(tag, data, attrs);
            })
                .join('');
            return this.wrap('tr', cells);
        })
            .join('');
        const element = this.wrap('table', tableBody);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds a collapsable HTML details element to the summary buffer
     *
     * @param {string} label text for the closed state
     * @param {string} content collapsable content
     *
     * @returns {Summary} summary instance
     */
    addDetails(label, content) {
        const element = this.wrap('details', this.wrap('summary', label) + content);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML image tag to the summary buffer
     *
     * @param {string} src path to the image you to embed
     * @param {string} alt text description of the image
     * @param {SummaryImageOptions} options (optional) addition image attributes
     *
     * @returns {Summary} summary instance
     */
    addImage(src, alt, options) {
        const { width, height } = options || {};
        const attrs = Object.assign(Object.assign({}, (width && { width })), (height && { height }));
        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML section heading element
     *
     * @param {string} text heading text
     * @param {number | string} [level=1] (optional) the heading level, default: 1
     *
     * @returns {Summary} summary instance
     */
    addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)
            ? tag
            : 'h1';
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML thematic break (<hr>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addSeparator() {
        const element = this.wrap('hr', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML line break (<br>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addBreak() {
        const element = this.wrap('br', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML blockquote to the summary buffer
     *
     * @param {string} text quote text
     * @param {string} cite (optional) citation url
     *
     * @returns {Summary} summary instance
     */
    addQuote(text, cite) {
        const attrs = Object.assign({}, (cite && { cite }));
        const element = this.wrap('blockquote', text, attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML anchor tag to the summary buffer
     *
     * @param {string} text link text/content
     * @param {string} href hyperlink
     *
     * @returns {Summary} summary instance
     */
    addLink(text, href) {
        const element = this.wrap('a', text, { href });
        return this.addRaw(element).addEOL();
    }
}
const _summary = new Summary();
/**
 * @deprecated use `core.summary`
 */
exports.markdownSummary = _summary;
exports.summary = _summary;
//# sourceMappingURL=summary.js.map

/***/ }),

/***/ 5278:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toCommandProperties = exports.toCommandValue = void 0;
/**
 * Sanitizes an input into a string so it can be passed into issueCommand safely
 * @param input input to sanitize into a string
 */
function toCommandValue(input) {
    if (input === null || input === undefined) {
        return '';
    }
    else if (typeof input === 'string' || input instanceof String) {
        return input;
    }
    return JSON.stringify(input);
}
exports.toCommandValue = toCommandValue;
/**
 *
 * @param annotationProperties
 * @returns The command properties to send with the actual annotation command
 * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646
 */
function toCommandProperties(annotationProperties) {
    if (!Object.keys(annotationProperties).length) {
        return {};
    }
    return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
    };
}
exports.toCommandProperties = toCommandProperties;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 35526:
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
class BasicCredentialHandler {
    constructor(username, password) {
        this.username = username;
        this.password = password;
    }
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BasicCredentialHandler = BasicCredentialHandler;
class BearerCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Bearer ${this.token}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BearerCredentialHandler = BearerCredentialHandler;
class PersonalAccessTokenCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
//# sourceMappingURL=auth.js.map

/***/ }),

/***/ 96255:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

/* eslint-disable @typescript-eslint/no-explicit-any */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
const http = __importStar(__nccwpck_require__(98605));
const https = __importStar(__nccwpck_require__(57211));
const pm = __importStar(__nccwpck_require__(19835));
const tunnel = __importStar(__nccwpck_require__(74294));
var HttpCodes;
(function (HttpCodes) {
    HttpCodes[HttpCodes["OK"] = 200] = "OK";
    HttpCodes[HttpCodes["MultipleChoices"] = 300] = "MultipleChoices";
    HttpCodes[HttpCodes["MovedPermanently"] = 301] = "MovedPermanently";
    HttpCodes[HttpCodes["ResourceMoved"] = 302] = "ResourceMoved";
    HttpCodes[HttpCodes["SeeOther"] = 303] = "SeeOther";
    HttpCodes[HttpCodes["NotModified"] = 304] = "NotModified";
    HttpCodes[HttpCodes["UseProxy"] = 305] = "UseProxy";
    HttpCodes[HttpCodes["SwitchProxy"] = 306] = "SwitchProxy";
    HttpCodes[HttpCodes["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    HttpCodes[HttpCodes["PermanentRedirect"] = 308] = "PermanentRedirect";
    HttpCodes[HttpCodes["BadRequest"] = 400] = "BadRequest";
    HttpCodes[HttpCodes["Unauthorized"] = 401] = "Unauthorized";
    HttpCodes[HttpCodes["PaymentRequired"] = 402] = "PaymentRequired";
    HttpCodes[HttpCodes["Forbidden"] = 403] = "Forbidden";
    HttpCodes[HttpCodes["NotFound"] = 404] = "NotFound";
    HttpCodes[HttpCodes["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    HttpCodes[HttpCodes["NotAcceptable"] = 406] = "NotAcceptable";
    HttpCodes[HttpCodes["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
    HttpCodes[HttpCodes["RequestTimeout"] = 408] = "RequestTimeout";
    HttpCodes[HttpCodes["Conflict"] = 409] = "Conflict";
    HttpCodes[HttpCodes["Gone"] = 410] = "Gone";
    HttpCodes[HttpCodes["TooManyRequests"] = 429] = "TooManyRequests";
    HttpCodes[HttpCodes["InternalServerError"] = 500] = "InternalServerError";
    HttpCodes[HttpCodes["NotImplemented"] = 501] = "NotImplemented";
    HttpCodes[HttpCodes["BadGateway"] = 502] = "BadGateway";
    HttpCodes[HttpCodes["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    HttpCodes[HttpCodes["GatewayTimeout"] = 504] = "GatewayTimeout";
})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));
var Headers;
(function (Headers) {
    Headers["Accept"] = "accept";
    Headers["ContentType"] = "content-type";
})(Headers = exports.Headers || (exports.Headers = {}));
var MediaTypes;
(function (MediaTypes) {
    MediaTypes["ApplicationJson"] = "application/json";
})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));
/**
 * Returns the proxy URL, depending upon the supplied url and proxy environment variables.
 * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
 */
function getProxyUrl(serverUrl) {
    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
    return proxyUrl ? proxyUrl.href : '';
}
exports.getProxyUrl = getProxyUrl;
const HttpRedirectCodes = [
    HttpCodes.MovedPermanently,
    HttpCodes.ResourceMoved,
    HttpCodes.SeeOther,
    HttpCodes.TemporaryRedirect,
    HttpCodes.PermanentRedirect
];
const HttpResponseRetryCodes = [
    HttpCodes.BadGateway,
    HttpCodes.ServiceUnavailable,
    HttpCodes.GatewayTimeout
];
const RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];
const ExponentialBackoffCeiling = 10;
const ExponentialBackoffTimeSlice = 5;
class HttpClientError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.name = 'HttpClientError';
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, HttpClientError.prototype);
    }
}
exports.HttpClientError = HttpClientError;
class HttpClientResponse {
    constructor(message) {
        this.message = message;
    }
    readBody() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                let output = Buffer.alloc(0);
                this.message.on('data', (chunk) => {
                    output = Buffer.concat([output, chunk]);
                });
                this.message.on('end', () => {
                    resolve(output.toString());
                });
            }));
        });
    }
}
exports.HttpClientResponse = HttpClientResponse;
function isHttps(requestUrl) {
    const parsedUrl = new URL(requestUrl);
    return parsedUrl.protocol === 'https:';
}
exports.isHttps = isHttps;
class HttpClient {
    constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
            if (requestOptions.ignoreSslError != null) {
                this._ignoreSslError = requestOptions.ignoreSslError;
            }
            this._socketTimeout = requestOptions.socketTimeout;
            if (requestOptions.allowRedirects != null) {
                this._allowRedirects = requestOptions.allowRedirects;
            }
            if (requestOptions.allowRedirectDowngrade != null) {
                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
            }
            if (requestOptions.maxRedirects != null) {
                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
            }
            if (requestOptions.keepAlive != null) {
                this._keepAlive = requestOptions.keepAlive;
            }
            if (requestOptions.allowRetries != null) {
                this._allowRetries = requestOptions.allowRetries;
            }
            if (requestOptions.maxRetries != null) {
                this._maxRetries = requestOptions.maxRetries;
            }
        }
    }
    options(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});
        });
    }
    get(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('GET', requestUrl, null, additionalHeaders || {});
        });
    }
    del(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('DELETE', requestUrl, null, additionalHeaders || {});
        });
    }
    post(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('POST', requestUrl, data, additionalHeaders || {});
        });
    }
    patch(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PATCH', requestUrl, data, additionalHeaders || {});
        });
    }
    put(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PUT', requestUrl, data, additionalHeaders || {});
        });
    }
    head(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('HEAD', requestUrl, null, additionalHeaders || {});
        });
    }
    sendStream(verb, requestUrl, stream, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(verb, requestUrl, stream, additionalHeaders);
        });
    }
    /**
     * Gets a typed object from an endpoint
     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
     */
    getJson(requestUrl, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            const res = yield this.get(requestUrl, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    postJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.post(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    putJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.put(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    patchJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.patch(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    /**
     * Makes a raw http request.
     * All other methods such as get, post, patch, and request ultimately call this.
     * Prefer get, del, post and patch
     */
    request(verb, requestUrl, data, headers) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._disposed) {
                throw new Error('Client has already been disposed.');
            }
            const parsedUrl = new URL(requestUrl);
            let info = this._prepareRequest(verb, parsedUrl, headers);
            // Only perform retries on reads since writes may not be idempotent.
            const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb)
                ? this._maxRetries + 1
                : 1;
            let numTries = 0;
            let response;
            do {
                response = yield this.requestRaw(info, data);
                // Check if it's an authentication challenge
                if (response &&
                    response.message &&
                    response.message.statusCode === HttpCodes.Unauthorized) {
                    let authenticationHandler;
                    for (const handler of this.handlers) {
                        if (handler.canHandleAuthentication(response)) {
                            authenticationHandler = handler;
                            break;
                        }
                    }
                    if (authenticationHandler) {
                        return authenticationHandler.handleAuthentication(this, info, data);
                    }
                    else {
                        // We have received an unauthorized response but have no handlers to handle it.
                        // Let the response return to the caller.
                        return response;
                    }
                }
                let redirectsRemaining = this._maxRedirects;
                while (response.message.statusCode &&
                    HttpRedirectCodes.includes(response.message.statusCode) &&
                    this._allowRedirects &&
                    redirectsRemaining > 0) {
                    const redirectUrl = response.message.headers['location'];
                    if (!redirectUrl) {
                        // if there's no location to redirect to, we won't
                        break;
                    }
                    const parsedRedirectUrl = new URL(redirectUrl);
                    if (parsedUrl.protocol === 'https:' &&
                        parsedUrl.protocol !== parsedRedirectUrl.protocol &&
                        !this._allowRedirectDowngrade) {
                        throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');
                    }
                    // we need to finish reading the response before reassigning response
                    // which will leak the open socket.
                    yield response.readBody();
                    // strip authorization header if redirected to a different hostname
                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                        for (const header in headers) {
                            // header names are case insensitive
                            if (header.toLowerCase() === 'authorization') {
                                delete headers[header];
                            }
                        }
                    }
                    // let's make the request with the new redirectUrl
                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);
                    response = yield this.requestRaw(info, data);
                    redirectsRemaining--;
                }
                if (!response.message.statusCode ||
                    !HttpResponseRetryCodes.includes(response.message.statusCode)) {
                    // If not a retry code, return immediately instead of retrying
                    return response;
                }
                numTries += 1;
                if (numTries < maxTries) {
                    yield response.readBody();
                    yield this._performExponentialBackoff(numTries);
                }
            } while (numTries < maxTries);
            return response;
        });
    }
    /**
     * Needs to be called if keepAlive is set to true in request options.
     */
    dispose() {
        if (this._agent) {
            this._agent.destroy();
        }
        this._disposed = true;
    }
    /**
     * Raw request.
     * @param info
     * @param data
     */
    requestRaw(info, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                function callbackForResult(err, res) {
                    if (err) {
                        reject(err);
                    }
                    else if (!res) {
                        // If `err` is not passed, then `res` must be passed.
                        reject(new Error('Unknown error'));
                    }
                    else {
                        resolve(res);
                    }
                }
                this.requestRawWithCallback(info, data, callbackForResult);
            });
        });
    }
    /**
     * Raw request with callback.
     * @param info
     * @param data
     * @param onResult
     */
    requestRawWithCallback(info, data, onResult) {
        if (typeof data === 'string') {
            if (!info.options.headers) {
                info.options.headers = {};
            }
            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');
        }
        let callbackCalled = false;
        function handleResult(err, res) {
            if (!callbackCalled) {
                callbackCalled = true;
                onResult(err, res);
            }
        }
        const req = info.httpModule.request(info.options, (msg) => {
            const res = new HttpClientResponse(msg);
            handleResult(undefined, res);
        });
        let socket;
        req.on('socket', sock => {
            socket = sock;
        });
        // If we ever get disconnected, we want the socket to timeout eventually
        req.setTimeout(this._socketTimeout || 3 * 60000, () => {
            if (socket) {
                socket.end();
            }
            handleResult(new Error(`Request timeout: ${info.options.path}`));
        });
        req.on('error', function (err) {
            // err has statusCode property
            // res should have headers
            handleResult(err);
        });
        if (data && typeof data === 'string') {
            req.write(data, 'utf8');
        }
        if (data && typeof data !== 'string') {
            data.on('close', function () {
                req.end();
            });
            data.pipe(req);
        }
        else {
            req.end();
        }
    }
    /**
     * Gets an http agent. This function is useful when you need an http agent that handles
     * routing through a proxy server - depending upon the url and proxy environment variables.
     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
     */
    getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
    }
    _prepareRequest(method, requestUrl, headers) {
        const info = {};
        info.parsedUrl = requestUrl;
        const usingSsl = info.parsedUrl.protocol === 'https:';
        info.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info.options = {};
        info.options.host = info.parsedUrl.hostname;
        info.options.port = info.parsedUrl.port
            ? parseInt(info.parsedUrl.port)
            : defaultPort;
        info.options.path =
            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');
        info.options.method = method;
        info.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
            info.options.headers['user-agent'] = this.userAgent;
        }
        info.options.agent = this._getAgent(info.parsedUrl);
        // gives handlers an opportunity to participate
        if (this.handlers) {
            for (const handler of this.handlers) {
                handler.prepareRequest(info.options);
            }
        }
        return info;
    }
    _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) {
            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
        }
        return lowercaseKeys(headers || {});
    }
    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
    }
    _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
            agent = this._proxyAgent;
        }
        if (this._keepAlive && !useProxy) {
            agent = this._agent;
        }
        // if agent is already assigned use that agent.
        if (agent) {
            return agent;
        }
        const usingSsl = parsedUrl.protocol === 'https:';
        let maxSockets = 100;
        if (this.requestOptions) {
            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.
        if (proxyUrl && proxyUrl.hostname) {
            const agentOptions = {
                maxSockets,
                keepAlive: this._keepAlive,
                proxy: Object.assign(Object.assign({}, ((proxyUrl.username || proxyUrl.password) && {
                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
                })), { host: proxyUrl.hostname, port: proxyUrl.port })
            };
            let tunnelAgent;
            const overHttps = proxyUrl.protocol === 'https:';
            if (usingSsl) {
                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
            }
            else {
                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
            }
            agent = tunnelAgent(agentOptions);
            this._proxyAgent = agent;
        }
        // if reusing agent across request and tunneling agent isn't assigned create a new agent
        if (this._keepAlive && !agent) {
            const options = { keepAlive: this._keepAlive, maxSockets };
            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
            this._agent = agent;
        }
        // if not using private agent and tunnel agent isn't setup then use global agent
        if (!agent) {
            agent = usingSsl ? https.globalAgent : http.globalAgent;
        }
        if (usingSsl && this._ignoreSslError) {
            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
            // we have to cast it to any and change it directly
            agent.options = Object.assign(agent.options || {}, {
                rejectUnauthorized: false
            });
        }
        return agent;
    }
    _performExponentialBackoff(retryNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
            return new Promise(resolve => setTimeout(() => resolve(), ms));
        });
    }
    _processResponse(res, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                const statusCode = res.message.statusCode || 0;
                const response = {
                    statusCode,
                    result: null,
                    headers: {}
                };
                // not found leads to null obj returned
                if (statusCode === HttpCodes.NotFound) {
                    resolve(response);
                }
                // get the result from the body
                function dateTimeDeserializer(key, value) {
                    if (typeof value === 'string') {
                        const a = new Date(value);
                        if (!isNaN(a.valueOf())) {
                            return a;
                        }
                    }
                    return value;
                }
                let obj;
                let contents;
                try {
                    contents = yield res.readBody();
                    if (contents && contents.length > 0) {
                        if (options && options.deserializeDates) {
                            obj = JSON.parse(contents, dateTimeDeserializer);
                        }
                        else {
                            obj = JSON.parse(contents);
                        }
                        response.result = obj;
                    }
                    response.headers = res.message.headers;
                }
                catch (err) {
                    // Invalid resource (contents not json);  leaving result obj null
                }
                // note that 3xx redirects are handled by the http layer.
                if (statusCode > 299) {
                    let msg;
                    // if exception/error in body, attempt to get better error
                    if (obj && obj.message) {
                        msg = obj.message;
                    }
                    else if (contents && contents.length > 0) {
                        // it may be the case that the exception is in the body message as string
                        msg = contents;
                    }
                    else {
                        msg = `Failed request: (${statusCode})`;
                    }
                    const err = new HttpClientError(msg, statusCode);
                    err.result = response.result;
                    reject(err);
                }
                else {
                    resolve(response);
                }
            }));
        });
    }
}
exports.HttpClient = HttpClient;
const lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 19835:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkBypass = exports.getProxyUrl = void 0;
function getProxyUrl(reqUrl) {
    const usingSsl = reqUrl.protocol === 'https:';
    if (checkBypass(reqUrl)) {
        return undefined;
    }
    const proxyVar = (() => {
        if (usingSsl) {
            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];
        }
        else {
            return process.env['http_proxy'] || process.env['HTTP_PROXY'];
        }
    })();
    if (proxyVar) {
        return new URL(proxyVar);
    }
    else {
        return undefined;
    }
}
exports.getProxyUrl = getProxyUrl;
function checkBypass(reqUrl) {
    if (!reqUrl.hostname) {
        return false;
    }
    const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';
    if (!noProxy) {
        return false;
    }
    // Determine the request port
    let reqPort;
    if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
    }
    else if (reqUrl.protocol === 'http:') {
        reqPort = 80;
    }
    else if (reqUrl.protocol === 'https:') {
        reqPort = 443;
    }
    // Format the request hostname and hostname with port
    const upperReqHosts = [reqUrl.hostname.toUpperCase()];
    if (typeof reqPort === 'number') {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
    }
    // Compare request host against noproxy
    for (const upperNoProxyItem of noProxy
        .split(',')
        .map(x => x.trim().toUpperCase())
        .filter(x => x)) {
        if (upperReqHosts.some(x => x === upperNoProxyItem)) {
            return true;
        }
    }
    return false;
}
exports.checkBypass = checkBypass;
//# sourceMappingURL=proxy.js.map

/***/ }),

/***/ 74294:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = __nccwpck_require__(54219);


/***/ }),

/***/ 54219:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


var net = __nccwpck_require__(11631);
var tls = __nccwpck_require__(4016);
var http = __nccwpck_require__(98605);
var https = __nccwpck_require__(57211);
var events = __nccwpck_require__(28614);
var assert = __nccwpck_require__(42357);
var util = __nccwpck_require__(31669);


exports.httpOverHttp = httpOverHttp;
exports.httpsOverHttp = httpsOverHttp;
exports.httpOverHttps = httpOverHttps;
exports.httpsOverHttps = httpsOverHttps;


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  return agent;
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  return agent;
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}


function TunnelingAgent(options) {
  var self = this;
  self.options = options || {};
  self.proxyOptions = self.options.proxy || {};
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;
  self.requests = [];
  self.sockets = [];

  self.on('free', function onFree(socket, host, port, localAddress) {
    var options = toOptions(host, port, localAddress);
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i];
      if (pending.host === options.host && pending.port === options.port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1);
        pending.request.onSocket(socket);
        return;
      }
    }
    socket.destroy();
    self.removeSocket(socket);
  });
}
util.inherits(TunnelingAgent, events.EventEmitter);

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
  var self = this;
  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push(options);
    return;
  }

  // If we are under maxSockets create a new one.
  self.createSocket(options, function(socket) {
    socket.on('free', onFree);
    socket.on('close', onCloseOrRemove);
    socket.on('agentRemove', onCloseOrRemove);
    req.onSocket(socket);

    function onFree() {
      self.emit('free', socket, options);
    }

    function onCloseOrRemove(err) {
      self.removeSocket(socket);
      socket.removeListener('free', onFree);
      socket.removeListener('close', onCloseOrRemove);
      socket.removeListener('agentRemove', onCloseOrRemove);
    }
  });
};

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this;
  var placeholder = {};
  self.sockets.push(placeholder);

  var connectOptions = mergeOptions({}, self.proxyOptions, {
    method: 'CONNECT',
    path: options.host + ':' + options.port,
    agent: false,
    headers: {
      host: options.host + ':' + options.port
    }
  });
  if (options.localAddress) {
    connectOptions.localAddress = options.localAddress;
  }
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {};
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64');
  }

  debug('making CONNECT request');
  var connectReq = self.request(connectOptions);
  connectReq.useChunkedEncodingByDefault = false; // for v0.6
  connectReq.once('response', onResponse); // for v0.6
  connectReq.once('upgrade', onUpgrade);   // for v0.6
  connectReq.once('connect', onConnect);   // for v0.7 or later
  connectReq.once('error', onError);
  connectReq.end();

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true;
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head);
    });
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners();
    socket.removeAllListeners();

    if (res.statusCode !== 200) {
      debug('tunneling socket could not be established, statusCode=%d',
        res.statusCode);
      socket.destroy();
      var error = new Error('tunneling socket could not be established, ' +
        'statusCode=' + res.statusCode);
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    if (head.length > 0) {
      debug('got illegal response body from proxy');
      socket.destroy();
      var error = new Error('got illegal response body from proxy');
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    debug('tunneling connection has established');
    self.sockets[self.sockets.indexOf(placeholder)] = socket;
    return cb(socket);
  }

  function onError(cause) {
    connectReq.removeAllListeners();

    debug('tunneling socket could not be established, cause=%s\n',
          cause.message, cause.stack);
    var error = new Error('tunneling socket could not be established, ' +
                          'cause=' + cause.message);
    error.code = 'ECONNRESET';
    options.request.emit('error', error);
    self.removeSocket(placeholder);
  }
};

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) {
    return;
  }
  this.sockets.splice(pos, 1);

  var pending = this.requests.shift();
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket);
    });
  }
};

function createSecureSocket(options, cb) {
  var self = this;
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    var hostHeader = options.request.getHeader('host');
    var tlsOptions = mergeOptions({}, self.options, {
      socket: socket,
      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host
    });

    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, tlsOptions);
    self.sockets[self.sockets.indexOf(socket)] = secureSocket;
    cb(secureSocket);
  });
}


function toOptions(host, port, localAddress) {
  if (typeof host === 'string') { // since v0.10
    return {
      host: host,
      port: port,
      localAddress: localAddress
    };
  }
  return host; // for v0.11 or later
}

function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i];
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides);
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j];
        if (overrides[k] !== undefined) {
          target[k] = overrides[k];
        }
      }
    }
  }
  return target;
}


var debug;
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments);
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0];
    } else {
      args.unshift('TUNNEL:');
    }
    console.error.apply(console, args);
  }
} else {
  debug = function() {};
}
exports.debug = debug; // for test


/***/ }),

/***/ 75840:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "v1", ({
  enumerable: true,
  get: function () {
    return _v.default;
  }
}));
Object.defineProperty(exports, "v3", ({
  enumerable: true,
  get: function () {
    return _v2.default;
  }
}));
Object.defineProperty(exports, "v4", ({
  enumerable: true,
  get: function () {
    return _v3.default;
  }
}));
Object.defineProperty(exports, "v5", ({
  enumerable: true,
  get: function () {
    return _v4.default;
  }
}));
Object.defineProperty(exports, "NIL", ({
  enumerable: true,
  get: function () {
    return _nil.default;
  }
}));
Object.defineProperty(exports, "version", ({
  enumerable: true,
  get: function () {
    return _version.default;
  }
}));
Object.defineProperty(exports, "validate", ({
  enumerable: true,
  get: function () {
    return _validate.default;
  }
}));
Object.defineProperty(exports, "stringify", ({
  enumerable: true,
  get: function () {
    return _stringify.default;
  }
}));
Object.defineProperty(exports, "parse", ({
  enumerable: true,
  get: function () {
    return _parse.default;
  }
}));

var _v = _interopRequireDefault(__nccwpck_require__(78628));

var _v2 = _interopRequireDefault(__nccwpck_require__(86409));

var _v3 = _interopRequireDefault(__nccwpck_require__(85122));

var _v4 = _interopRequireDefault(__nccwpck_require__(79120));

var _nil = _interopRequireDefault(__nccwpck_require__(25332));

var _version = _interopRequireDefault(__nccwpck_require__(81595));

var _validate = _interopRequireDefault(__nccwpck_require__(66900));

var _stringify = _interopRequireDefault(__nccwpck_require__(18950));

var _parse = _interopRequireDefault(__nccwpck_require__(62746));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),

/***/ 4569:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _crypto = _interopRequireDefault(__nccwpck_require__(76417));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return _crypto.default.createHash('md5').update(bytes).digest();
}

var _default = md5;
exports.default = _default;

/***/ }),

/***/ 25332:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports.default = _default;

/***/ }),

/***/ 62746:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(66900));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports.default = _default;

/***/ }),

/***/ 40814:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports.default = _default;

/***/ }),

/***/ 50807:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = rng;

var _crypto = _interopRequireDefault(__nccwpck_require__(76417));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate

let poolPtr = rnds8Pool.length;

function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    _crypto.default.randomFillSync(rnds8Pool);

    poolPtr = 0;
  }

  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}

/***/ }),

/***/ 85274:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _crypto = _interopRequireDefault(__nccwpck_require__(76417));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return _crypto.default.createHash('sha1').update(bytes).digest();
}

var _default = sha1;
exports.default = _default;

/***/ }),

/***/ 18950:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(66900));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports.default = _default;

/***/ }),

/***/ 78628:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _rng = _interopRequireDefault(__nccwpck_require__(50807));

var _stringify = _interopRequireDefault(__nccwpck_require__(18950));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.default)(b);
}

var _default = v1;
exports.default = _default;

/***/ }),

/***/ 86409:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _v = _interopRequireDefault(__nccwpck_require__(65998));

var _md = _interopRequireDefault(__nccwpck_require__(4569));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports.default = _default;

/***/ }),

/***/ 65998:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = _default;
exports.URL = exports.DNS = void 0;

var _stringify = _interopRequireDefault(__nccwpck_require__(18950));

var _parse = _interopRequireDefault(__nccwpck_require__(62746));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function _default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.default)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

/***/ }),

/***/ 85122:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _rng = _interopRequireDefault(__nccwpck_require__(50807));

var _stringify = _interopRequireDefault(__nccwpck_require__(18950));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.default)(rnds);
}

var _default = v4;
exports.default = _default;

/***/ }),

/***/ 79120:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _v = _interopRequireDefault(__nccwpck_require__(65998));

var _sha = _interopRequireDefault(__nccwpck_require__(85274));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports.default = _default;

/***/ }),

/***/ 66900:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _regex = _interopRequireDefault(__nccwpck_require__(40814));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports.default = _default;

/***/ }),

/***/ 81595:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(66900));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

var _default = version;
exports.default = _default;

/***/ }),

/***/ 50664:
/***/ (function(__unused_webpack_module, exports) {

(function (global, factory) {
   true ? factory(exports) :
  0;
}(this, (function (exports) { 'use strict';

  var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof self !== 'undefined' && self) ||
    (typeof global !== 'undefined' && global);

  var support = {
    searchParams: 'URLSearchParams' in global,
    iterable: 'Symbol' in global && 'iterator' in Symbol,
    blob:
      'FileReader' in global &&
      'Blob' in global &&
      (function() {
        try {
          new Blob();
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in global,
    arrayBuffer: 'ArrayBuffer' in global
  };

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
      throw new TypeError('Invalid character in header field name: "' + name + '"')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift();
        return {done: value === undefined, value: value}
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  };

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push(name);
    });
    return iteratorFor(items)
  };

  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) {
      items.push(value);
    });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function(body) {
      /*
        fetch-mock wraps the Response object in an ES6 Proxy to
        provide useful test harness features such as flush. However, on
        ES5 browsers without fetch or Proxy support pollyfills must be used;
        the proxy-pollyfill is unable to proxy an attribute unless it exists
        on the object before the Proxy is created. This change ensures
        Response.bodyUsed exists on the instance, while maintaining the
        semantic of setting Request.bodyUsed in the constructor before
        _initBody is called.
      */
      this.bodyUsed = this.bodyUsed;
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      };

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          var isConsumed = consumed(this);
          if (isConsumed) {
            return isConsumed
          }
          if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
            return Promise.resolve(
              this._bodyArrayBuffer.buffer.slice(
                this._bodyArrayBuffer.byteOffset,
                this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
              )
            )
          } else {
            return Promise.resolve(this._bodyArrayBuffer)
          }
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      };
    }

    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    };

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      };
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    };

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method
  }

  function Request(input, options) {
    if (!(this instanceof Request)) {
      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
    }

    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      this.signal = input.signal;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }

    this.credentials = options.credentials || this.credentials || 'same-origin';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body);

    if (this.method === 'GET' || this.method === 'HEAD') {
      if (options.cache === 'no-store' || options.cache === 'no-cache') {
        // Search for a '_' parameter in the query string
        var reParamSearch = /([?&])_=[^&]*/;
        if (reParamSearch.test(this.url)) {
          // If it already exists then set the value with the current time
          this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
        } else {
          // Otherwise add a new '_' parameter to the end with the current time
          var reQueryString = /\?/;
          this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
        }
      }
    }
  }

  Request.prototype.clone = function() {
    return new Request(this, {body: this._bodyInit})
  };

  function decode(body) {
    var form = new FormData();
    body
      .trim()
      .split('&')
      .forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
    // https://github.com/github/fetch/issues/748
    // https://github.com/zloirock/core-js/issues/751
    preProcessedHeaders
      .split('\r')
      .map(function(header) {
        return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header
      })
      .forEach(function(line) {
        var parts = line.split(':');
        var key = parts.shift().trim();
        if (key) {
          var value = parts.join(':').trim();
          headers.append(key, value);
        }
      });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!(this instanceof Response)) {
      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
    }
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''});
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  };

  exports.DOMException = global.DOMException;
  try {
    new exports.DOMException();
  } catch (err) {
    exports.DOMException = function(message, name) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    exports.DOMException.prototype = Object.create(Error.prototype);
    exports.DOMException.prototype.constructor = exports.DOMException;
  }

  function fetch(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) {
        return reject(new exports.DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        setTimeout(function() {
          resolve(new Response(body, options));
        }, 0);
      };

      xhr.onerror = function() {
        setTimeout(function() {
          reject(new TypeError('Network request failed'));
        }, 0);
      };

      xhr.ontimeout = function() {
        setTimeout(function() {
          reject(new TypeError('Network request failed'));
        }, 0);
      };

      xhr.onabort = function() {
        setTimeout(function() {
          reject(new exports.DOMException('Aborted', 'AbortError'));
        }, 0);
      };

      function fixUrl(url) {
        try {
          return url === '' && global.location.href ? global.location.href : url
        } catch (e) {
          return url
        }
      }

      xhr.open(request.method, fixUrl(request.url), true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false;
      }

      if ('responseType' in xhr) {
        if (support.blob) {
          xhr.responseType = 'blob';
        } else if (
          support.arrayBuffer &&
          request.headers.get('Content-Type') &&
          request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1
        ) {
          xhr.responseType = 'arraybuffer';
        }
      }

      if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {
        Object.getOwnPropertyNames(init.headers).forEach(function(name) {
          xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
        });
      } else {
        request.headers.forEach(function(value, name) {
          xhr.setRequestHeader(name, value);
        });
      }

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr);

        xhr.onreadystatechange = function() {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr);
          }
        };
      }

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  }

  fetch.polyfill = true;

  if (!global.fetch) {
    global.fetch = fetch;
    global.Headers = Headers;
    global.Request = Request;
    global.Response = Response;
  }

  exports.Headers = Headers;
  exports.Request = Request;
  exports.Response = Response;
  exports.fetch = fetch;

  Object.defineProperty(exports, '__esModule', { value: true });

})));


/***/ }),

/***/ 98534:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AWSClustersDNSApiResponseProcessor = exports.AWSClustersDNSApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var AWSClustersDNSApiRequestFactory = (function (_super) {
    __extends(AWSClustersDNSApiRequestFactory, _super);
    function AWSClustersDNSApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AWSClustersDNSApiRequestFactory.prototype.getAWSCustomDNS = function (groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AWSClustersDNSApi", "getAWSCustomDNS", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/awsCustomDNS'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    AWSClustersDNSApiRequestFactory.prototype.toggleAWSCustomDNS = function (groupId, aWSCustomDNSEnabledView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AWSClustersDNSApi", "toggleAWSCustomDNS", "groupId");
                        }
                        if (aWSCustomDNSEnabledView === null || aWSCustomDNSEnabledView === undefined) {
                            throw new baseapi_1.RequiredError("AWSClustersDNSApi", "toggleAWSCustomDNS", "aWSCustomDNSEnabledView");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/awsCustomDNS'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(aWSCustomDNSEnabledView, "AWSCustomDNSEnabledView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return AWSClustersDNSApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.AWSClustersDNSApiRequestFactory = AWSClustersDNSApiRequestFactory;
var AWSClustersDNSApiResponseProcessor = (function () {
    function AWSClustersDNSApiResponseProcessor() {
    }
    AWSClustersDNSApiResponseProcessor.prototype.getAWSCustomDNS = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "AWSCustomDNSEnabledView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "AWSCustomDNSEnabledView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    AWSClustersDNSApiResponseProcessor.prototype.toggleAWSCustomDNS = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "AWSCustomDNSEnabledView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "AWSCustomDNSEnabledView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    return AWSClustersDNSApiResponseProcessor;
}());
exports.AWSClustersDNSApiResponseProcessor = AWSClustersDNSApiResponseProcessor;
//# sourceMappingURL=AWSClustersDNSApi.js.map

/***/ }),

/***/ 49100:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AccessTrackingApiResponseProcessor = exports.AccessTrackingApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var AccessTrackingApiRequestFactory = (function (_super) {
    __extends(AccessTrackingApiRequestFactory, _super);
    function AccessTrackingApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AccessTrackingApiRequestFactory.prototype.listAccessLogsByClusterName = function (groupId, clusterName, envelope, pretty, authResult, end, ipAddress, nLogs, start, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AccessTrackingApi", "listAccessLogsByClusterName", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("AccessTrackingApi", "listAccessLogsByClusterName", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/dbAccessHistory/clusters/{clusterName}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (authResult !== undefined) {
                            requestContext.setQueryParam("authResult", ObjectSerializer_1.ObjectSerializer.serialize(authResult, "boolean", ""));
                        }
                        if (end !== undefined) {
                            requestContext.setQueryParam("end", ObjectSerializer_1.ObjectSerializer.serialize(end, "string", ""));
                        }
                        if (ipAddress !== undefined) {
                            requestContext.setQueryParam("ipAddress", ObjectSerializer_1.ObjectSerializer.serialize(ipAddress, "string", ""));
                        }
                        if (nLogs !== undefined) {
                            requestContext.setQueryParam("nLogs", ObjectSerializer_1.ObjectSerializer.serialize(nLogs, "number", "int64"));
                        }
                        if (start !== undefined) {
                            requestContext.setQueryParam("start", ObjectSerializer_1.ObjectSerializer.serialize(start, "Date", "date-time"));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    AccessTrackingApiRequestFactory.prototype.listAccessLogsByHostname = function (groupId, hostname, envelope, pretty, authResult, end, ipAddress, nLogs, start, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AccessTrackingApi", "listAccessLogsByHostname", "groupId");
                        }
                        if (hostname === null || hostname === undefined) {
                            throw new baseapi_1.RequiredError("AccessTrackingApi", "listAccessLogsByHostname", "hostname");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/dbAccessHistory/processes/{hostname}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'hostname' + '}', encodeURIComponent(String(hostname)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (authResult !== undefined) {
                            requestContext.setQueryParam("authResult", ObjectSerializer_1.ObjectSerializer.serialize(authResult, "boolean", ""));
                        }
                        if (end !== undefined) {
                            requestContext.setQueryParam("end", ObjectSerializer_1.ObjectSerializer.serialize(end, "Date", "date-time"));
                        }
                        if (ipAddress !== undefined) {
                            requestContext.setQueryParam("ipAddress", ObjectSerializer_1.ObjectSerializer.serialize(ipAddress, "string", ""));
                        }
                        if (nLogs !== undefined) {
                            requestContext.setQueryParam("nLogs", ObjectSerializer_1.ObjectSerializer.serialize(nLogs, "number", "int32"));
                        }
                        if (start !== undefined) {
                            requestContext.setQueryParam("start", ObjectSerializer_1.ObjectSerializer.serialize(start, "Date", "date-time"));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return AccessTrackingApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.AccessTrackingApiRequestFactory = AccessTrackingApiRequestFactory;
var AccessTrackingApiResponseProcessor = (function () {
    function AccessTrackingApiResponseProcessor() {
    }
    AccessTrackingApiResponseProcessor.prototype.listAccessLogsByClusterName = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiMongoDBAccessLogsListView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ApiMongoDBAccessLogsListView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    AccessTrackingApiResponseProcessor.prototype.listAccessLogsByHostname = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiMongoDBAccessLogsListView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ApiMongoDBAccessLogsListView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    return AccessTrackingApiResponseProcessor;
}());
exports.AccessTrackingApiResponseProcessor = AccessTrackingApiResponseProcessor;
//# sourceMappingURL=AccessTrackingApi.js.map

/***/ }),

/***/ 63864:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AlertConfigurationsApiResponseProcessor = exports.AlertConfigurationsApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var AlertConfigurationsApiRequestFactory = (function (_super) {
    __extends(AlertConfigurationsApiRequestFactory, _super);
    function AlertConfigurationsApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AlertConfigurationsApiRequestFactory.prototype.createAlertConfiguration = function (groupId, alertConfigViewForNdsGroup, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AlertConfigurationsApi", "createAlertConfiguration", "groupId");
                        }
                        if (alertConfigViewForNdsGroup === null || alertConfigViewForNdsGroup === undefined) {
                            throw new baseapi_1.RequiredError("AlertConfigurationsApi", "createAlertConfiguration", "alertConfigViewForNdsGroup");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/alertConfigs'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(alertConfigViewForNdsGroup, "AlertConfigViewForNdsGroup", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    AlertConfigurationsApiRequestFactory.prototype.deleteAlertConfiguration = function (groupId, alertConfigId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AlertConfigurationsApi", "deleteAlertConfiguration", "groupId");
                        }
                        if (alertConfigId === null || alertConfigId === undefined) {
                            throw new baseapi_1.RequiredError("AlertConfigurationsApi", "deleteAlertConfiguration", "alertConfigId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/alertConfigs/{alertConfigId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'alertConfigId' + '}', encodeURIComponent(String(alertConfigId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    AlertConfigurationsApiRequestFactory.prototype.getAlertConfiguration = function (groupId, alertConfigId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AlertConfigurationsApi", "getAlertConfiguration", "groupId");
                        }
                        if (alertConfigId === null || alertConfigId === undefined) {
                            throw new baseapi_1.RequiredError("AlertConfigurationsApi", "getAlertConfiguration", "alertConfigId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/alertConfigs/{alertConfigId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'alertConfigId' + '}', encodeURIComponent(String(alertConfigId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    AlertConfigurationsApiRequestFactory.prototype.listAlertConfigurationMatchersFieldNames = function (envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        localVarPath = '/api/atlas/v2/alertConfigs/matchers/fieldNames';
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    AlertConfigurationsApiRequestFactory.prototype.listAlertConfigurations = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AlertConfigurationsApi", "listAlertConfigurations", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/alertConfigs'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    AlertConfigurationsApiRequestFactory.prototype.listAlertConfigurationsByAlertId = function (groupId, alertId, envelope, pretty, includeCount, itemsPerPage, pageNum, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AlertConfigurationsApi", "listAlertConfigurationsByAlertId", "groupId");
                        }
                        if (alertId === null || alertId === undefined) {
                            throw new baseapi_1.RequiredError("AlertConfigurationsApi", "listAlertConfigurationsByAlertId", "alertId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/alerts/{alertId}/alertConfigs'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'alertId' + '}', encodeURIComponent(String(alertId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    AlertConfigurationsApiRequestFactory.prototype.toggleAlertConfiguration = function (groupId, alertConfigId, toggleView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AlertConfigurationsApi", "toggleAlertConfiguration", "groupId");
                        }
                        if (alertConfigId === null || alertConfigId === undefined) {
                            throw new baseapi_1.RequiredError("AlertConfigurationsApi", "toggleAlertConfiguration", "alertConfigId");
                        }
                        if (toggleView === null || toggleView === undefined) {
                            throw new baseapi_1.RequiredError("AlertConfigurationsApi", "toggleAlertConfiguration", "toggleView");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/alertConfigs/{alertConfigId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'alertConfigId' + '}', encodeURIComponent(String(alertConfigId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(toggleView, "ToggleView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    AlertConfigurationsApiRequestFactory.prototype.updateAlertConfiguration = function (groupId, alertConfigId, alertConfigViewForNdsGroup, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AlertConfigurationsApi", "updateAlertConfiguration", "groupId");
                        }
                        if (alertConfigId === null || alertConfigId === undefined) {
                            throw new baseapi_1.RequiredError("AlertConfigurationsApi", "updateAlertConfiguration", "alertConfigId");
                        }
                        if (alertConfigViewForNdsGroup === null || alertConfigViewForNdsGroup === undefined) {
                            throw new baseapi_1.RequiredError("AlertConfigurationsApi", "updateAlertConfiguration", "alertConfigViewForNdsGroup");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/alertConfigs/{alertConfigId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'alertConfigId' + '}', encodeURIComponent(String(alertConfigId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PUT);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(alertConfigViewForNdsGroup, "AlertConfigViewForNdsGroup", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return AlertConfigurationsApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.AlertConfigurationsApiRequestFactory = AlertConfigurationsApiRequestFactory;
var AlertConfigurationsApiResponseProcessor = (function () {
    function AlertConfigurationsApiResponseProcessor() {
    }
    AlertConfigurationsApiResponseProcessor.prototype.createAlertConfiguration = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "AlertConfigViewForNdsGroup", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "AlertConfigViewForNdsGroup", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    AlertConfigurationsApiResponseProcessor.prototype.deleteAlertConfiguration = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    AlertConfigurationsApiResponseProcessor.prototype.getAlertConfiguration = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "AlertConfigViewForNdsGroup", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "AlertConfigViewForNdsGroup", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    AlertConfigurationsApiResponseProcessor.prototype.listAlertConfigurationMatchersFieldNames = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "Array<MatcherFieldView>", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "Array<MatcherFieldView>", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    AlertConfigurationsApiResponseProcessor.prototype.listAlertConfigurations = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedAlertConfigView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedAlertConfigView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    AlertConfigurationsApiResponseProcessor.prototype.listAlertConfigurationsByAlertId = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "PaginatedAlertConfigView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "PaginatedAlertConfigView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    AlertConfigurationsApiResponseProcessor.prototype.toggleAlertConfiguration = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "AlertConfigViewForNdsGroup", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "AlertConfigViewForNdsGroup", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    AlertConfigurationsApiResponseProcessor.prototype.updateAlertConfiguration = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "AlertConfigViewForNdsGroup", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "AlertConfigViewForNdsGroup", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    return AlertConfigurationsApiResponseProcessor;
}());
exports.AlertConfigurationsApiResponseProcessor = AlertConfigurationsApiResponseProcessor;
//# sourceMappingURL=AlertConfigurationsApi.js.map

/***/ }),

/***/ 25156:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AlertsApiResponseProcessor = exports.AlertsApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var AlertsApiRequestFactory = (function (_super) {
    __extends(AlertsApiRequestFactory, _super);
    function AlertsApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AlertsApiRequestFactory.prototype.acknowledgeAlert = function (groupId, alertId, alertViewForNdsGroup, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AlertsApi", "acknowledgeAlert", "groupId");
                        }
                        if (alertId === null || alertId === undefined) {
                            throw new baseapi_1.RequiredError("AlertsApi", "acknowledgeAlert", "alertId");
                        }
                        if (alertViewForNdsGroup === null || alertViewForNdsGroup === undefined) {
                            throw new baseapi_1.RequiredError("AlertsApi", "acknowledgeAlert", "alertViewForNdsGroup");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/alerts/{alertId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'alertId' + '}', encodeURIComponent(String(alertId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(alertViewForNdsGroup, "AlertViewForNdsGroup", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    AlertsApiRequestFactory.prototype.getAlert = function (groupId, alertId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AlertsApi", "getAlert", "groupId");
                        }
                        if (alertId === null || alertId === undefined) {
                            throw new baseapi_1.RequiredError("AlertsApi", "getAlert", "alertId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/alerts/{alertId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'alertId' + '}', encodeURIComponent(String(alertId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    AlertsApiRequestFactory.prototype.listAlerts = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, status, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AlertsApi", "listAlerts", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/alerts'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (status !== undefined) {
                            requestContext.setQueryParam("status", ObjectSerializer_1.ObjectSerializer.serialize(status, "'OPEN' | 'TRACKING' | 'CLOSED'", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    AlertsApiRequestFactory.prototype.listAlertsByAlertConfigurationId = function (groupId, alertConfigId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AlertsApi", "listAlertsByAlertConfigurationId", "groupId");
                        }
                        if (alertConfigId === null || alertConfigId === undefined) {
                            throw new baseapi_1.RequiredError("AlertsApi", "listAlertsByAlertConfigurationId", "alertConfigId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/alertConfigs/{alertConfigId}/alerts'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'alertConfigId' + '}', encodeURIComponent(String(alertConfigId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return AlertsApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.AlertsApiRequestFactory = AlertsApiRequestFactory;
var AlertsApiResponseProcessor = (function () {
    function AlertsApiResponseProcessor() {
    }
    AlertsApiResponseProcessor.prototype.acknowledgeAlert = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "AlertViewForNdsGroup", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "AlertViewForNdsGroup", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    AlertsApiResponseProcessor.prototype.getAlert = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "AlertViewForNdsGroup", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "AlertViewForNdsGroup", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    AlertsApiResponseProcessor.prototype.listAlerts = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "PaginatedAlertView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "PaginatedAlertView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    AlertsApiResponseProcessor.prototype.listAlertsByAlertConfigurationId = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "PaginatedAlertView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "PaginatedAlertView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    return AlertsApiResponseProcessor;
}());
exports.AlertsApiResponseProcessor = AlertsApiResponseProcessor;
//# sourceMappingURL=AlertsApi.js.map

/***/ }),

/***/ 50424:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AtlasSearchApiResponseProcessor = exports.AtlasSearchApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var AtlasSearchApiRequestFactory = (function (_super) {
    __extends(AtlasSearchApiRequestFactory, _super);
    function AtlasSearchApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AtlasSearchApiRequestFactory.prototype.createAtlasSearchIndex = function (groupId, clusterName, fTSIndex, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AtlasSearchApi", "createAtlasSearchIndex", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("AtlasSearchApi", "createAtlasSearchIndex", "clusterName");
                        }
                        if (fTSIndex === null || fTSIndex === undefined) {
                            throw new baseapi_1.RequiredError("AtlasSearchApi", "createAtlasSearchIndex", "fTSIndex");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/fts/indexes'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(fTSIndex, "FTSIndex", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    AtlasSearchApiRequestFactory.prototype.deleteAtlasSearchIndex = function (groupId, clusterName, indexId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AtlasSearchApi", "deleteAtlasSearchIndex", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("AtlasSearchApi", "deleteAtlasSearchIndex", "clusterName");
                        }
                        if (indexId === null || indexId === undefined) {
                            throw new baseapi_1.RequiredError("AtlasSearchApi", "deleteAtlasSearchIndex", "indexId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/fts/indexes/{indexId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'indexId' + '}', encodeURIComponent(String(indexId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    AtlasSearchApiRequestFactory.prototype.getAtlasSearchIndex = function (groupId, clusterName, indexId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AtlasSearchApi", "getAtlasSearchIndex", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("AtlasSearchApi", "getAtlasSearchIndex", "clusterName");
                        }
                        if (indexId === null || indexId === undefined) {
                            throw new baseapi_1.RequiredError("AtlasSearchApi", "getAtlasSearchIndex", "indexId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/fts/indexes/{indexId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'indexId' + '}', encodeURIComponent(String(indexId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    AtlasSearchApiRequestFactory.prototype.listAtlasSearchIndexes = function (groupId, clusterName, collectionName, databaseName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AtlasSearchApi", "listAtlasSearchIndexes", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("AtlasSearchApi", "listAtlasSearchIndexes", "clusterName");
                        }
                        if (collectionName === null || collectionName === undefined) {
                            throw new baseapi_1.RequiredError("AtlasSearchApi", "listAtlasSearchIndexes", "collectionName");
                        }
                        if (databaseName === null || databaseName === undefined) {
                            throw new baseapi_1.RequiredError("AtlasSearchApi", "listAtlasSearchIndexes", "databaseName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/fts/indexes/{databaseName}/{collectionName}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'collectionName' + '}', encodeURIComponent(String(collectionName)))
                            .replace('{' + 'databaseName' + '}', encodeURIComponent(String(databaseName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    AtlasSearchApiRequestFactory.prototype.updateAtlasSearchIndex = function (groupId, clusterName, indexId, fTSIndex, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AtlasSearchApi", "updateAtlasSearchIndex", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("AtlasSearchApi", "updateAtlasSearchIndex", "clusterName");
                        }
                        if (indexId === null || indexId === undefined) {
                            throw new baseapi_1.RequiredError("AtlasSearchApi", "updateAtlasSearchIndex", "indexId");
                        }
                        if (fTSIndex === null || fTSIndex === undefined) {
                            throw new baseapi_1.RequiredError("AtlasSearchApi", "updateAtlasSearchIndex", "fTSIndex");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/fts/indexes/{indexId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'indexId' + '}', encodeURIComponent(String(indexId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(fTSIndex, "FTSIndex", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return AtlasSearchApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.AtlasSearchApiRequestFactory = AtlasSearchApiRequestFactory;
var AtlasSearchApiResponseProcessor = (function () {
    function AtlasSearchApiResponseProcessor() {
    }
    AtlasSearchApiResponseProcessor.prototype.createAtlasSearchIndex = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "FTSIndex", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "FTSIndex", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    AtlasSearchApiResponseProcessor.prototype.deleteAtlasSearchIndex = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    AtlasSearchApiResponseProcessor.prototype.getAtlasSearchIndex = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "FTSIndex", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "FTSIndex", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    AtlasSearchApiResponseProcessor.prototype.listAtlasSearchIndexes = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "Array<FTSIndex>", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "Array<FTSIndex>", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    AtlasSearchApiResponseProcessor.prototype.updateAtlasSearchIndex = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "FTSIndex", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "FTSIndex", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    return AtlasSearchApiResponseProcessor;
}());
exports.AtlasSearchApiResponseProcessor = AtlasSearchApiResponseProcessor;
//# sourceMappingURL=AtlasSearchApi.js.map

/***/ }),

/***/ 94658:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AuditingApiResponseProcessor = exports.AuditingApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var AuditingApiRequestFactory = (function (_super) {
    __extends(AuditingApiRequestFactory, _super);
    function AuditingApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AuditingApiRequestFactory.prototype.getAuditingConfiguration = function (groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AuditingApi", "getAuditingConfiguration", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/auditLog'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    AuditingApiRequestFactory.prototype.updateAuditingConfiguration = function (groupId, auditLog, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("AuditingApi", "updateAuditingConfiguration", "groupId");
                        }
                        if (auditLog === null || auditLog === undefined) {
                            throw new baseapi_1.RequiredError("AuditingApi", "updateAuditingConfiguration", "auditLog");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/auditLog'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(auditLog, "AuditLog", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return AuditingApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.AuditingApiRequestFactory = AuditingApiRequestFactory;
var AuditingApiResponseProcessor = (function () {
    function AuditingApiResponseProcessor() {
    }
    AuditingApiResponseProcessor.prototype.getAuditingConfiguration = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "AuditLog", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "AuditLog", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    AuditingApiResponseProcessor.prototype.updateAuditingConfiguration = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "AuditLog", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "AuditLog", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    return AuditingApiResponseProcessor;
}());
exports.AuditingApiResponseProcessor = AuditingApiResponseProcessor;
//# sourceMappingURL=AuditingApi.js.map

/***/ }),

/***/ 98349:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CloudBackupsApiResponseProcessor = exports.CloudBackupsApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var CloudBackupsApiRequestFactory = (function (_super) {
    __extends(CloudBackupsApiRequestFactory, _super);
    function CloudBackupsApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CloudBackupsApiRequestFactory.prototype.cancelBackupRestoreJob = function (groupId, clusterName, restoreJobId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "cancelBackupRestoreJob", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "cancelBackupRestoreJob", "clusterName");
                        }
                        if (restoreJobId === null || restoreJobId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "cancelBackupRestoreJob", "restoreJobId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/restoreJobs/{restoreJobId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'restoreJobId' + '}', encodeURIComponent(String(restoreJobId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.createBackupExportJob = function (groupId, clusterName, diskBackupExportJobRequest, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "createBackupExportJob", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "createBackupExportJob", "clusterName");
                        }
                        if (diskBackupExportJobRequest === null || diskBackupExportJobRequest === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "createBackupExportJob", "diskBackupExportJobRequest");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/exports'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(diskBackupExportJobRequest, "DiskBackupExportJobRequest", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.createBackupRestoreJob = function (groupId, clusterName, diskBackupRestoreJob, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "createBackupRestoreJob", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "createBackupRestoreJob", "clusterName");
                        }
                        if (diskBackupRestoreJob === null || diskBackupRestoreJob === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "createBackupRestoreJob", "diskBackupRestoreJob");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/restoreJobs'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(diskBackupRestoreJob, "DiskBackupRestoreJob", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.createExportBucket = function (groupId, diskBackupSnapshotAWSExportBucket, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "createExportBucket", "groupId");
                        }
                        if (diskBackupSnapshotAWSExportBucket === null || diskBackupSnapshotAWSExportBucket === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "createExportBucket", "diskBackupSnapshotAWSExportBucket");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/backup/exportBuckets'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(diskBackupSnapshotAWSExportBucket, "DiskBackupSnapshotAWSExportBucket", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.createServerlessBackupRestoreJob = function (groupId, clusterName, serverlessBackupRestoreJob, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "createServerlessBackupRestoreJob", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "createServerlessBackupRestoreJob", "clusterName");
                        }
                        if (serverlessBackupRestoreJob === null || serverlessBackupRestoreJob === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "createServerlessBackupRestoreJob", "serverlessBackupRestoreJob");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/serverless/{clusterName}/backup/restoreJobs'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(serverlessBackupRestoreJob, "ServerlessBackupRestoreJob", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.deleteAllBackupSchedules = function (groupId, clusterName, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "deleteAllBackupSchedules", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "deleteAllBackupSchedules", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/schedule'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.deleteExportBucket = function (groupId, exportBucketId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "deleteExportBucket", "groupId");
                        }
                        if (exportBucketId === null || exportBucketId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "deleteExportBucket", "exportBucketId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/backup/exportBuckets/{exportBucketId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'exportBucketId' + '}', encodeURIComponent(String(exportBucketId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.deleteReplicaSetBackup = function (groupId, clusterName, snapshotId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "deleteReplicaSetBackup", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "deleteReplicaSetBackup", "clusterName");
                        }
                        if (snapshotId === null || snapshotId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "deleteReplicaSetBackup", "snapshotId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/snapshots/{snapshotId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'snapshotId' + '}', encodeURIComponent(String(snapshotId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.deleteShardedClusterBackup = function (groupId, clusterName, snapshotId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "deleteShardedClusterBackup", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "deleteShardedClusterBackup", "clusterName");
                        }
                        if (snapshotId === null || snapshotId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "deleteShardedClusterBackup", "snapshotId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/snapshots/shardedCluster/{snapshotId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'snapshotId' + '}', encodeURIComponent(String(snapshotId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.getBackupExportJob = function (groupId, clusterName, exportId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getBackupExportJob", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getBackupExportJob", "clusterName");
                        }
                        if (exportId === null || exportId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getBackupExportJob", "exportId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/exports/{exportId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'exportId' + '}', encodeURIComponent(String(exportId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.getBackupRestoreJob = function (groupId, clusterName, restoreJobId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getBackupRestoreJob", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getBackupRestoreJob", "clusterName");
                        }
                        if (restoreJobId === null || restoreJobId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getBackupRestoreJob", "restoreJobId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/restoreJobs/{restoreJobId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'restoreJobId' + '}', encodeURIComponent(String(restoreJobId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.getBackupSchedule = function (groupId, clusterName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getBackupSchedule", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getBackupSchedule", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/schedule'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.getDataProtectionSettings = function (groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getDataProtectionSettings", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/dataProtection'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.getExportBucket = function (groupId, exportBucketId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getExportBucket", "groupId");
                        }
                        if (exportBucketId === null || exportBucketId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getExportBucket", "exportBucketId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/backup/exportBuckets/{exportBucketId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'exportBucketId' + '}', encodeURIComponent(String(exportBucketId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.getReplicaSetBackup = function (groupId, clusterName, snapshotId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getReplicaSetBackup", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getReplicaSetBackup", "clusterName");
                        }
                        if (snapshotId === null || snapshotId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getReplicaSetBackup", "snapshotId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/snapshots/{snapshotId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'snapshotId' + '}', encodeURIComponent(String(snapshotId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.getServerlessBackup = function (groupId, clusterName, snapshotId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getServerlessBackup", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getServerlessBackup", "clusterName");
                        }
                        if (snapshotId === null || snapshotId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getServerlessBackup", "snapshotId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/serverless/{clusterName}/backup/snapshots/{snapshotId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'snapshotId' + '}', encodeURIComponent(String(snapshotId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.getServerlessBackupRestoreJob = function (groupId, clusterName, restoreJobId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getServerlessBackupRestoreJob", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getServerlessBackupRestoreJob", "clusterName");
                        }
                        if (restoreJobId === null || restoreJobId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getServerlessBackupRestoreJob", "restoreJobId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/serverless/{clusterName}/backup/restoreJobs/{restoreJobId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'restoreJobId' + '}', encodeURIComponent(String(restoreJobId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.getShardedClusterBackup = function (groupId, clusterName, snapshotId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getShardedClusterBackup", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getShardedClusterBackup", "clusterName");
                        }
                        if (snapshotId === null || snapshotId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "getShardedClusterBackup", "snapshotId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/snapshots/shardedCluster/{snapshotId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'snapshotId' + '}', encodeURIComponent(String(snapshotId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.listBackupExportJobs = function (groupId, clusterName, envelope, pretty, includeCount, itemsPerPage, pageNum, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "listBackupExportJobs", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "listBackupExportJobs", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/exports'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.listBackupRestoreJobs = function (groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "listBackupRestoreJobs", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "listBackupRestoreJobs", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/restoreJobs'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.listExportBuckets = function (groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "listExportBuckets", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/backup/exportBuckets'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.listReplicaSetBackups = function (groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "listReplicaSetBackups", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "listReplicaSetBackups", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/snapshots'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.listServerlessBackupRestoreJobs = function (groupId, clusterName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "listServerlessBackupRestoreJobs", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "listServerlessBackupRestoreJobs", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/serverless/{clusterName}/backup/restoreJobs'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.listServerlessBackups = function (groupId, clusterName, envelope, pretty, includeCount, itemsPerPage, pageNum, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "listServerlessBackups", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "listServerlessBackups", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/serverless/{clusterName}/backup/snapshots'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.listShardedClusterBackups = function (groupId, clusterName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "listShardedClusterBackups", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "listShardedClusterBackups", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/snapshots/shardedClusters'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.takeSnapshot = function (groupId, clusterName, diskBackupOnDemandSnapshotRequest, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "takeSnapshot", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "takeSnapshot", "clusterName");
                        }
                        if (diskBackupOnDemandSnapshotRequest === null || diskBackupOnDemandSnapshotRequest === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "takeSnapshot", "diskBackupOnDemandSnapshotRequest");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/snapshots'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(diskBackupOnDemandSnapshotRequest, "DiskBackupOnDemandSnapshotRequest", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.updateBackupSchedule = function (groupId, clusterName, diskBackupSnapshotSchedule, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "updateBackupSchedule", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "updateBackupSchedule", "clusterName");
                        }
                        if (diskBackupSnapshotSchedule === null || diskBackupSnapshotSchedule === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "updateBackupSchedule", "diskBackupSnapshotSchedule");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/schedule'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(diskBackupSnapshotSchedule, "DiskBackupSnapshotSchedule", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.updateDataProtectionSettings = function (groupId, dataProtectionSettings, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "updateDataProtectionSettings", "groupId");
                        }
                        if (dataProtectionSettings === null || dataProtectionSettings === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "updateDataProtectionSettings", "dataProtectionSettings");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/dataProtection'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PUT);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(dataProtectionSettings, "DataProtectionSettings", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudBackupsApiRequestFactory.prototype.updateSnapshotRetention = function (groupId, clusterName, snapshotId, snapshotRetention, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "updateSnapshotRetention", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "updateSnapshotRetention", "clusterName");
                        }
                        if (snapshotId === null || snapshotId === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "updateSnapshotRetention", "snapshotId");
                        }
                        if (snapshotRetention === null || snapshotRetention === undefined) {
                            throw new baseapi_1.RequiredError("CloudBackupsApi", "updateSnapshotRetention", "snapshotRetention");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/snapshots/{snapshotId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'snapshotId' + '}', encodeURIComponent(String(snapshotId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(snapshotRetention, "SnapshotRetention", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return CloudBackupsApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.CloudBackupsApiRequestFactory = CloudBackupsApiRequestFactory;
var CloudBackupsApiResponseProcessor = (function () {
    function CloudBackupsApiResponseProcessor() {
    }
    CloudBackupsApiResponseProcessor.prototype.cancelBackupRestoreJob = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("405", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Method Not Allowed", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.createBackupExportJob = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "DiskBackupExportJob", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "DiskBackupExportJob", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.createBackupRestoreJob = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "DiskBackupRestoreJob", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "DiskBackupRestoreJob", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.createExportBucket = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "DiskBackupSnapshotAWSExportBucket", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "DiskBackupSnapshotAWSExportBucket", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.createServerlessBackupRestoreJob = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "ServerlessBackupRestoreJob", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "ServerlessBackupRestoreJob", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.deleteAllBackupSchedules = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "DiskBackupSnapshotSchedule", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "DiskBackupSnapshotSchedule", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.deleteExportBucket = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.deleteReplicaSetBackup = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.deleteShardedClusterBackup = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, _o, _p;
            return __generator(this, function (_q) {
                switch (_q.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_q.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_q.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_q.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 6:
                        _o = exception_1.ApiException.bind;
                        _p = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 7: throw new (_o.apply(exception_1.ApiException, _p.concat([_q.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.getBackupExportJob = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "DiskBackupExportJob", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "DiskBackupExportJob", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.getBackupRestoreJob = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "DiskBackupRestoreJob", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "DiskBackupRestoreJob", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.getBackupSchedule = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "DiskBackupSnapshotSchedule", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "DiskBackupSnapshotSchedule", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.getDataProtectionSettings = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "DataProtectionSettings", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "DataProtectionSettings", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.getExportBucket = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "DiskBackupSnapshotAWSExportBucket", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "DiskBackupSnapshotAWSExportBucket", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.getReplicaSetBackup = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "DiskBackupReplicaSet", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "DiskBackupReplicaSet", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.getServerlessBackup = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ServerlessBackupSnapshot", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ServerlessBackupSnapshot", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.getServerlessBackupRestoreJob = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ServerlessBackupRestoreJob", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ServerlessBackupRestoreJob", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.getShardedClusterBackup = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "DiskBackupShardedClusterSnapshot", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "DiskBackupShardedClusterSnapshot", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.listBackupExportJobs = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedApiAtlasDiskBackupExportJobView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedApiAtlasDiskBackupExportJobView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.listBackupRestoreJobs = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedCloudBackupRestoreJobView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedCloudBackupRestoreJobView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.listExportBuckets = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedBackupSnapshotExportBucketView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedBackupSnapshotExportBucketView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.listReplicaSetBackups = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "PaginatedCloudBackupReplicaSetView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "PaginatedCloudBackupReplicaSetView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.listServerlessBackupRestoreJobs = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "PaginatedApiAtlasServerlessBackupRestoreJobView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "PaginatedApiAtlasServerlessBackupRestoreJobView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.listServerlessBackups = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "PaginatedApiAtlasServerlessBackupSnapshotView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "PaginatedApiAtlasServerlessBackupSnapshotView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.listShardedClusterBackups = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "PaginatedCloudBackupShardedClusterSnapshotView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "PaginatedCloudBackupShardedClusterSnapshotView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.takeSnapshot = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "DiskBackupSnapshot", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "DiskBackupSnapshot", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.updateBackupSchedule = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "DiskBackupSnapshotSchedule", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "DiskBackupSnapshotSchedule", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.updateDataProtectionSettings = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "DataProtectionSettings", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "DataProtectionSettings", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    CloudBackupsApiResponseProcessor.prototype.updateSnapshotRetention = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "DiskBackupReplicaSet", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "DiskBackupReplicaSet", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    return CloudBackupsApiResponseProcessor;
}());
exports.CloudBackupsApiResponseProcessor = CloudBackupsApiResponseProcessor;
//# sourceMappingURL=CloudBackupsApi.js.map

/***/ }),

/***/ 63986:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CloudMigrationServiceApiResponseProcessor = exports.CloudMigrationServiceApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var CloudMigrationServiceApiRequestFactory = (function (_super) {
    __extends(CloudMigrationServiceApiRequestFactory, _super);
    function CloudMigrationServiceApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CloudMigrationServiceApiRequestFactory.prototype.createLinkToken = function (orgId, targetOrgRequestView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("CloudMigrationServiceApi", "createLinkToken", "orgId");
                        }
                        if (targetOrgRequestView === null || targetOrgRequestView === undefined) {
                            throw new baseapi_1.RequiredError("CloudMigrationServiceApi", "createLinkToken", "targetOrgRequestView");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/liveMigrations/linkTokens'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(targetOrgRequestView, "TargetOrgRequestView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudMigrationServiceApiRequestFactory.prototype.createPushMigration = function (groupId, liveMigrationRequestView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudMigrationServiceApi", "createPushMigration", "groupId");
                        }
                        if (liveMigrationRequestView === null || liveMigrationRequestView === undefined) {
                            throw new baseapi_1.RequiredError("CloudMigrationServiceApi", "createPushMigration", "liveMigrationRequestView");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/liveMigrations'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(liveMigrationRequestView, "LiveMigrationRequestView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudMigrationServiceApiRequestFactory.prototype.cutoverMigration = function (groupId, liveMigrationId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudMigrationServiceApi", "cutoverMigration", "groupId");
                        }
                        if (liveMigrationId === null || liveMigrationId === undefined) {
                            throw new baseapi_1.RequiredError("CloudMigrationServiceApi", "cutoverMigration", "liveMigrationId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/liveMigrations/{liveMigrationId}/cutover'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'liveMigrationId' + '}', encodeURIComponent(String(liveMigrationId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PUT);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudMigrationServiceApiRequestFactory.prototype.deleteLinkToken = function (orgId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("CloudMigrationServiceApi", "deleteLinkToken", "orgId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/liveMigrations/linkTokens'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudMigrationServiceApiRequestFactory.prototype.getPushMigration = function (groupId, liveMigrationId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudMigrationServiceApi", "getPushMigration", "groupId");
                        }
                        if (liveMigrationId === null || liveMigrationId === undefined) {
                            throw new baseapi_1.RequiredError("CloudMigrationServiceApi", "getPushMigration", "liveMigrationId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/liveMigrations/{liveMigrationId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'liveMigrationId' + '}', encodeURIComponent(String(liveMigrationId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudMigrationServiceApiRequestFactory.prototype.getValidationStatus = function (groupId, validationId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudMigrationServiceApi", "getValidationStatus", "groupId");
                        }
                        if (validationId === null || validationId === undefined) {
                            throw new baseapi_1.RequiredError("CloudMigrationServiceApi", "getValidationStatus", "validationId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/liveMigrations/validate/{validationId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'validationId' + '}', encodeURIComponent(String(validationId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudMigrationServiceApiRequestFactory.prototype.listSourceProjects = function (orgId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("CloudMigrationServiceApi", "listSourceProjects", "orgId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/liveMigrations/availableProjects'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudMigrationServiceApiRequestFactory.prototype.validateMigration = function (groupId, liveMigrationRequestView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudMigrationServiceApi", "validateMigration", "groupId");
                        }
                        if (liveMigrationRequestView === null || liveMigrationRequestView === undefined) {
                            throw new baseapi_1.RequiredError("CloudMigrationServiceApi", "validateMigration", "liveMigrationRequestView");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/liveMigrations/validate'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(liveMigrationRequestView, "LiveMigrationRequestView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return CloudMigrationServiceApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.CloudMigrationServiceApiRequestFactory = CloudMigrationServiceApiRequestFactory;
var CloudMigrationServiceApiResponseProcessor = (function () {
    function CloudMigrationServiceApiResponseProcessor() {
    }
    CloudMigrationServiceApiResponseProcessor.prototype.createLinkToken = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "TargetOrgView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "TargetOrgView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    CloudMigrationServiceApiResponseProcessor.prototype.createPushMigration = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("201", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "LiveMigrationResponseView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "LiveMigrationResponseView", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    CloudMigrationServiceApiResponseProcessor.prototype.cutoverMigration = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("202", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    CloudMigrationServiceApiResponseProcessor.prototype.deleteLinkToken = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    CloudMigrationServiceApiResponseProcessor.prototype.getPushMigration = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "LiveMigrationResponseView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "LiveMigrationResponseView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    CloudMigrationServiceApiResponseProcessor.prototype.getValidationStatus = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "ValidationView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "ValidationView", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    CloudMigrationServiceApiResponseProcessor.prototype.listSourceProjects = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "Array<AvailableProjectView>", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "Array<AvailableProjectView>", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    CloudMigrationServiceApiResponseProcessor.prototype.validateMigration = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "ValidationView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "ValidationView", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    return CloudMigrationServiceApiResponseProcessor;
}());
exports.CloudMigrationServiceApiResponseProcessor = CloudMigrationServiceApiResponseProcessor;
//# sourceMappingURL=CloudMigrationServiceApi.js.map

/***/ }),

/***/ 69833:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CloudProviderAccessApiResponseProcessor = exports.CloudProviderAccessApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var CloudProviderAccessApiRequestFactory = (function (_super) {
    __extends(CloudProviderAccessApiRequestFactory, _super);
    function CloudProviderAccessApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CloudProviderAccessApiRequestFactory.prototype.authorizeCloudProviderAccessRole = function (groupId, roleId, cloudProviderAccessRole, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudProviderAccessApi", "authorizeCloudProviderAccessRole", "groupId");
                        }
                        if (roleId === null || roleId === undefined) {
                            throw new baseapi_1.RequiredError("CloudProviderAccessApi", "authorizeCloudProviderAccessRole", "roleId");
                        }
                        if (cloudProviderAccessRole === null || cloudProviderAccessRole === undefined) {
                            throw new baseapi_1.RequiredError("CloudProviderAccessApi", "authorizeCloudProviderAccessRole", "cloudProviderAccessRole");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/cloudProviderAccess/{roleId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'roleId' + '}', encodeURIComponent(String(roleId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(cloudProviderAccessRole, "CloudProviderAccessRole", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudProviderAccessApiRequestFactory.prototype.createCloudProviderAccessRole = function (groupId, cloudProviderAccessRole, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudProviderAccessApi", "createCloudProviderAccessRole", "groupId");
                        }
                        if (cloudProviderAccessRole === null || cloudProviderAccessRole === undefined) {
                            throw new baseapi_1.RequiredError("CloudProviderAccessApi", "createCloudProviderAccessRole", "cloudProviderAccessRole");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/cloudProviderAccess'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(cloudProviderAccessRole, "CloudProviderAccessRole", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudProviderAccessApiRequestFactory.prototype.deauthorizeCloudProviderAccessRole = function (groupId, cloudProvider, roleId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudProviderAccessApi", "deauthorizeCloudProviderAccessRole", "groupId");
                        }
                        if (cloudProvider === null || cloudProvider === undefined) {
                            throw new baseapi_1.RequiredError("CloudProviderAccessApi", "deauthorizeCloudProviderAccessRole", "cloudProvider");
                        }
                        if (roleId === null || roleId === undefined) {
                            throw new baseapi_1.RequiredError("CloudProviderAccessApi", "deauthorizeCloudProviderAccessRole", "roleId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/cloudProviderAccess/{cloudProvider}/{roleId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'cloudProvider' + '}', encodeURIComponent(String(cloudProvider)))
                            .replace('{' + 'roleId' + '}', encodeURIComponent(String(roleId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudProviderAccessApiRequestFactory.prototype.getCloudProviderAccessRole = function (groupId, roleId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudProviderAccessApi", "getCloudProviderAccessRole", "groupId");
                        }
                        if (roleId === null || roleId === undefined) {
                            throw new baseapi_1.RequiredError("CloudProviderAccessApi", "getCloudProviderAccessRole", "roleId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/cloudProviderAccess/{roleId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'roleId' + '}', encodeURIComponent(String(roleId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CloudProviderAccessApiRequestFactory.prototype.listCloudProviderAccessRoles = function (groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CloudProviderAccessApi", "listCloudProviderAccessRoles", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/cloudProviderAccess'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return CloudProviderAccessApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.CloudProviderAccessApiRequestFactory = CloudProviderAccessApiRequestFactory;
var CloudProviderAccessApiResponseProcessor = (function () {
    function CloudProviderAccessApiResponseProcessor() {
    }
    CloudProviderAccessApiResponseProcessor.prototype.authorizeCloudProviderAccessRole = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "CloudProviderAccessRole", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "CloudProviderAccessRole", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    CloudProviderAccessApiResponseProcessor.prototype.createCloudProviderAccessRole = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "CloudProviderAccessRole", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "CloudProviderAccessRole", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    CloudProviderAccessApiResponseProcessor.prototype.deauthorizeCloudProviderAccessRole = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    CloudProviderAccessApiResponseProcessor.prototype.getCloudProviderAccessRole = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "CloudProviderAccess", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "CloudProviderAccess", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    CloudProviderAccessApiResponseProcessor.prototype.listCloudProviderAccessRoles = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "CloudProviderAccess", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "CloudProviderAccess", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    return CloudProviderAccessApiResponseProcessor;
}());
exports.CloudProviderAccessApiResponseProcessor = CloudProviderAccessApiResponseProcessor;
//# sourceMappingURL=CloudProviderAccessApi.js.map

/***/ }),

/***/ 60858:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClusterOutageSimulationApiResponseProcessor = exports.ClusterOutageSimulationApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var ClusterOutageSimulationApiRequestFactory = (function (_super) {
    __extends(ClusterOutageSimulationApiRequestFactory, _super);
    function ClusterOutageSimulationApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ClusterOutageSimulationApiRequestFactory.prototype.endOutageSimulation = function (groupId, clusterName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ClusterOutageSimulationApi", "endOutageSimulation", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("ClusterOutageSimulationApi", "endOutageSimulation", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/outageSimulation'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ClusterOutageSimulationApiRequestFactory.prototype.getOutageSimulation = function (groupId, clusterName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ClusterOutageSimulationApi", "getOutageSimulation", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("ClusterOutageSimulationApi", "getOutageSimulation", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/outageSimulation'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ClusterOutageSimulationApiRequestFactory.prototype.startOutageSimulation = function (groupId, clusterName, clusterOutageSimulation, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ClusterOutageSimulationApi", "startOutageSimulation", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("ClusterOutageSimulationApi", "startOutageSimulation", "clusterName");
                        }
                        if (clusterOutageSimulation === null || clusterOutageSimulation === undefined) {
                            throw new baseapi_1.RequiredError("ClusterOutageSimulationApi", "startOutageSimulation", "clusterOutageSimulation");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/outageSimulation'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(clusterOutageSimulation, "ClusterOutageSimulation", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return ClusterOutageSimulationApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.ClusterOutageSimulationApiRequestFactory = ClusterOutageSimulationApiRequestFactory;
var ClusterOutageSimulationApiResponseProcessor = (function () {
    function ClusterOutageSimulationApiResponseProcessor() {
    }
    ClusterOutageSimulationApiResponseProcessor.prototype.endOutageSimulation = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "ClusterOutageSimulation", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "ClusterOutageSimulation", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    ClusterOutageSimulationApiResponseProcessor.prototype.getOutageSimulation = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "ClusterOutageSimulation", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "ClusterOutageSimulation", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    ClusterOutageSimulationApiResponseProcessor.prototype.startOutageSimulation = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ClusterOutageSimulation", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ClusterOutageSimulation", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    return ClusterOutageSimulationApiResponseProcessor;
}());
exports.ClusterOutageSimulationApiResponseProcessor = ClusterOutageSimulationApiResponseProcessor;
//# sourceMappingURL=ClusterOutageSimulationApi.js.map

/***/ }),

/***/ 14886:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClustersApiResponseProcessor = exports.ClustersApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var ClustersApiRequestFactory = (function (_super) {
    __extends(ClustersApiRequestFactory, _super);
    function ClustersApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ClustersApiRequestFactory.prototype.getClusterAdvancedConfiguration = function (groupId, clusterName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ClustersApi", "getClusterAdvancedConfiguration", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("ClustersApi", "getClusterAdvancedConfiguration", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/processArgs'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ClustersApiRequestFactory.prototype.getClusterStatus = function (groupId, clusterName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ClustersApi", "getClusterStatus", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("ClustersApi", "getClusterStatus", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/status'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ClustersApiRequestFactory.prototype.getSampleDatasetLoadStatus = function (groupId, sampleDatasetId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ClustersApi", "getSampleDatasetLoadStatus", "groupId");
                        }
                        if (sampleDatasetId === null || sampleDatasetId === undefined) {
                            throw new baseapi_1.RequiredError("ClustersApi", "getSampleDatasetLoadStatus", "sampleDatasetId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/sampleDatasetLoad/{sampleDatasetId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'sampleDatasetId' + '}', encodeURIComponent(String(sampleDatasetId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ClustersApiRequestFactory.prototype.listCloudProviderRegions = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, providers, tier, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ClustersApi", "listCloudProviderRegions", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/provider/regions'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (providers !== undefined) {
                            requestContext.setQueryParam("providers", ObjectSerializer_1.ObjectSerializer.serialize(providers, "Array<string>", ""));
                        }
                        if (tier !== undefined) {
                            requestContext.setQueryParam("tier", ObjectSerializer_1.ObjectSerializer.serialize(tier, "string", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ClustersApiRequestFactory.prototype.listClustersForAllProjects = function (envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        localVarPath = '/api/atlas/v2/clusters';
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ClustersApiRequestFactory.prototype.loadSampleDataset = function (groupId, name, sampleDatasetStatus, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ClustersApi", "loadSampleDataset", "groupId");
                        }
                        if (name === null || name === undefined) {
                            throw new baseapi_1.RequiredError("ClustersApi", "loadSampleDataset", "name");
                        }
                        if (sampleDatasetStatus === null || sampleDatasetStatus === undefined) {
                            throw new baseapi_1.RequiredError("ClustersApi", "loadSampleDataset", "sampleDatasetStatus");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/sampleDatasetLoad/{name}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(sampleDatasetStatus, "SampleDatasetStatus", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ClustersApiRequestFactory.prototype.updateClusterAdvancedConfiguration = function (groupId, clusterName, clusterDescriptionProcessArgs, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ClustersApi", "updateClusterAdvancedConfiguration", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("ClustersApi", "updateClusterAdvancedConfiguration", "clusterName");
                        }
                        if (clusterDescriptionProcessArgs === null || clusterDescriptionProcessArgs === undefined) {
                            throw new baseapi_1.RequiredError("ClustersApi", "updateClusterAdvancedConfiguration", "clusterDescriptionProcessArgs");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/processArgs'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(clusterDescriptionProcessArgs, "ClusterDescriptionProcessArgs", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ClustersApiRequestFactory.prototype.upgradeSharedCluster = function (groupId, legacyClusterDescription, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ClustersApi", "upgradeSharedCluster", "groupId");
                        }
                        if (legacyClusterDescription === null || legacyClusterDescription === undefined) {
                            throw new baseapi_1.RequiredError("ClustersApi", "upgradeSharedCluster", "legacyClusterDescription");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/tenantUpgrade'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(legacyClusterDescription, "LegacyClusterDescription", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ClustersApiRequestFactory.prototype.upgradeSharedClusterToServerless = function (groupId, serverlessInstanceDescription, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ClustersApi", "upgradeSharedClusterToServerless", "groupId");
                        }
                        if (serverlessInstanceDescription === null || serverlessInstanceDescription === undefined) {
                            throw new baseapi_1.RequiredError("ClustersApi", "upgradeSharedClusterToServerless", "serverlessInstanceDescription");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/tenantUpgradeToServerless'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(serverlessInstanceDescription, "ServerlessInstanceDescription", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return ClustersApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.ClustersApiRequestFactory = ClustersApiRequestFactory;
var ClustersApiResponseProcessor = (function () {
    function ClustersApiResponseProcessor() {
    }
    ClustersApiResponseProcessor.prototype.getClusterAdvancedConfiguration = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ClusterDescriptionProcessArgs", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ClusterDescriptionProcessArgs", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    ClustersApiResponseProcessor.prototype.getClusterStatus = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ClusterStatus", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "ClusterStatus", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    ClustersApiResponseProcessor.prototype.getSampleDatasetLoadStatus = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "SampleDatasetStatus", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "SampleDatasetStatus", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    ClustersApiResponseProcessor.prototype.listCloudProviderRegions = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedApiAtlasProviderRegionsView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedApiAtlasProviderRegionsView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    ClustersApiResponseProcessor.prototype.listClustersForAllProjects = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedOrgGroupView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedOrgGroupView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    ClustersApiResponseProcessor.prototype.loadSampleDataset = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("201", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "Array<SampleDatasetStatus>", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "Array<SampleDatasetStatus>", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    ClustersApiResponseProcessor.prototype.updateClusterAdvancedConfiguration = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "ClusterDescriptionProcessArgs", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "ClusterDescriptionProcessArgs", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    ClustersApiResponseProcessor.prototype.upgradeSharedCluster = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, body, _4, _5, _6, _7, _8, _9;
            return __generator(this, function (_10) {
                switch (_10.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_10.sent(), contentType]),
                            "LegacyClusterDescription", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("402", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Payment Required", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 12:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 14:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 16];
                        _5 = (_4 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _7 = (_6 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 15:
                        body = _5.apply(_4, [_7.apply(_6, [_10.sent(), contentType]),
                            "LegacyClusterDescription", ""]);
                        return [2, body];
                    case 16:
                        _8 = exception_1.ApiException.bind;
                        _9 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 17: throw new (_8.apply(exception_1.ApiException, _9.concat([_10.sent(), response.headers])))();
                }
            });
        });
    };
    ClustersApiResponseProcessor.prototype.upgradeSharedClusterToServerless = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, body, _4, _5, _6, _7, _8, _9;
            return __generator(this, function (_10) {
                switch (_10.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_10.sent(), contentType]),
                            "ServerlessInstanceDescription", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("402", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Payment Required", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 12:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 14:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 16];
                        _5 = (_4 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _7 = (_6 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 15:
                        body = _5.apply(_4, [_7.apply(_6, [_10.sent(), contentType]),
                            "ServerlessInstanceDescription", ""]);
                        return [2, body];
                    case 16:
                        _8 = exception_1.ApiException.bind;
                        _9 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 17: throw new (_8.apply(exception_1.ApiException, _9.concat([_10.sent(), response.headers])))();
                }
            });
        });
    };
    return ClustersApiResponseProcessor;
}());
exports.ClustersApiResponseProcessor = ClustersApiResponseProcessor;
//# sourceMappingURL=ClustersApi.js.map

/***/ }),

/***/ 73809:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomDatabaseRolesApiResponseProcessor = exports.CustomDatabaseRolesApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var CustomDatabaseRolesApiRequestFactory = (function (_super) {
    __extends(CustomDatabaseRolesApiRequestFactory, _super);
    function CustomDatabaseRolesApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CustomDatabaseRolesApiRequestFactory.prototype.createCustomDatabaseRole = function (groupId, customDBRole, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CustomDatabaseRolesApi", "createCustomDatabaseRole", "groupId");
                        }
                        if (customDBRole === null || customDBRole === undefined) {
                            throw new baseapi_1.RequiredError("CustomDatabaseRolesApi", "createCustomDatabaseRole", "customDBRole");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/customDBRoles/roles'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(customDBRole, "CustomDBRole", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CustomDatabaseRolesApiRequestFactory.prototype.deleteCustomDatabaseRole = function (groupId, roleName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CustomDatabaseRolesApi", "deleteCustomDatabaseRole", "groupId");
                        }
                        if (roleName === null || roleName === undefined) {
                            throw new baseapi_1.RequiredError("CustomDatabaseRolesApi", "deleteCustomDatabaseRole", "roleName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/customDBRoles/roles/{roleName}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'roleName' + '}', encodeURIComponent(String(roleName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CustomDatabaseRolesApiRequestFactory.prototype.getCustomDatabaseRole = function (groupId, roleName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CustomDatabaseRolesApi", "getCustomDatabaseRole", "groupId");
                        }
                        if (roleName === null || roleName === undefined) {
                            throw new baseapi_1.RequiredError("CustomDatabaseRolesApi", "getCustomDatabaseRole", "roleName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/customDBRoles/roles/{roleName}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'roleName' + '}', encodeURIComponent(String(roleName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CustomDatabaseRolesApiRequestFactory.prototype.listCustomDatabaseRoles = function (groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CustomDatabaseRolesApi", "listCustomDatabaseRoles", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/customDBRoles/roles'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    CustomDatabaseRolesApiRequestFactory.prototype.updateCustomDatabaseRole = function (groupId, roleName, updateCustomDBRole, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("CustomDatabaseRolesApi", "updateCustomDatabaseRole", "groupId");
                        }
                        if (roleName === null || roleName === undefined) {
                            throw new baseapi_1.RequiredError("CustomDatabaseRolesApi", "updateCustomDatabaseRole", "roleName");
                        }
                        if (updateCustomDBRole === null || updateCustomDBRole === undefined) {
                            throw new baseapi_1.RequiredError("CustomDatabaseRolesApi", "updateCustomDatabaseRole", "updateCustomDBRole");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/customDBRoles/roles/{roleName}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'roleName' + '}', encodeURIComponent(String(roleName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(updateCustomDBRole, "UpdateCustomDBRole", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return CustomDatabaseRolesApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.CustomDatabaseRolesApiRequestFactory = CustomDatabaseRolesApiRequestFactory;
var CustomDatabaseRolesApiResponseProcessor = (function () {
    function CustomDatabaseRolesApiResponseProcessor() {
    }
    CustomDatabaseRolesApiResponseProcessor.prototype.createCustomDatabaseRole = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, body, _4, _5, _6, _7, _8, _9;
            return __generator(this, function (_10) {
                switch (_10.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("202", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_10.sent(), contentType]),
                            "CustomDBRole", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 12:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 14:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 16];
                        _5 = (_4 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _7 = (_6 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 15:
                        body = _5.apply(_4, [_7.apply(_6, [_10.sent(), contentType]),
                            "CustomDBRole", ""]);
                        return [2, body];
                    case 16:
                        _8 = exception_1.ApiException.bind;
                        _9 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 17: throw new (_8.apply(exception_1.ApiException, _9.concat([_10.sent(), response.headers])))();
                }
            });
        });
    };
    CustomDatabaseRolesApiResponseProcessor.prototype.deleteCustomDatabaseRole = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    CustomDatabaseRolesApiResponseProcessor.prototype.getCustomDatabaseRole = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "CustomDBRole", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "CustomDBRole", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    CustomDatabaseRolesApiResponseProcessor.prototype.listCustomDatabaseRoles = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "Array<CustomDBRole>", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "Array<CustomDBRole>", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    CustomDatabaseRolesApiResponseProcessor.prototype.updateCustomDatabaseRole = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, body, _4, _5, _6, _7, _8, _9;
            return __generator(this, function (_10) {
                switch (_10.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_10.sent(), contentType]),
                            "CustomDBRole", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 12:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 14:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 16];
                        _5 = (_4 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _7 = (_6 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 15:
                        body = _5.apply(_4, [_7.apply(_6, [_10.sent(), contentType]),
                            "CustomDBRole", ""]);
                        return [2, body];
                    case 16:
                        _8 = exception_1.ApiException.bind;
                        _9 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 17: throw new (_8.apply(exception_1.ApiException, _9.concat([_10.sent(), response.headers])))();
                }
            });
        });
    };
    return CustomDatabaseRolesApiResponseProcessor;
}());
exports.CustomDatabaseRolesApiResponseProcessor = CustomDatabaseRolesApiResponseProcessor;
//# sourceMappingURL=CustomDatabaseRolesApi.js.map

/***/ }),

/***/ 21514:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataFederationApiResponseProcessor = exports.DataFederationApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var DataFederationApiRequestFactory = (function (_super) {
    __extends(DataFederationApiRequestFactory, _super);
    function DataFederationApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataFederationApiRequestFactory.prototype.createDataFederationPrivateEndpoint = function (groupId, privateNetworkEndpointIdEntry, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "createDataFederationPrivateEndpoint", "groupId");
                        }
                        if (privateNetworkEndpointIdEntry === null || privateNetworkEndpointIdEntry === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "createDataFederationPrivateEndpoint", "privateNetworkEndpointIdEntry");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/privateNetworkSettings/endpointIds'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(privateNetworkEndpointIdEntry, "PrivateNetworkEndpointIdEntry", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataFederationApiRequestFactory.prototype.createFederatedDatabase = function (groupId, dataLakeTenant, envelope, pretty, skipRoleValidation, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "createFederatedDatabase", "groupId");
                        }
                        if (dataLakeTenant === null || dataLakeTenant === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "createFederatedDatabase", "dataLakeTenant");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/dataFederation'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (skipRoleValidation !== undefined) {
                            requestContext.setQueryParam("skipRoleValidation", ObjectSerializer_1.ObjectSerializer.serialize(skipRoleValidation, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(dataLakeTenant, "DataLakeTenant", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataFederationApiRequestFactory.prototype.createOneDataFederationQueryLimit = function (groupId, tenantName, limitName, dataFederationTenantQueryLimit, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "createOneDataFederationQueryLimit", "groupId");
                        }
                        if (tenantName === null || tenantName === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "createOneDataFederationQueryLimit", "tenantName");
                        }
                        if (limitName === null || limitName === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "createOneDataFederationQueryLimit", "limitName");
                        }
                        if (dataFederationTenantQueryLimit === null || dataFederationTenantQueryLimit === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "createOneDataFederationQueryLimit", "dataFederationTenantQueryLimit");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/dataFederation/{tenantName}/limits/{limitName}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'tenantName' + '}', encodeURIComponent(String(tenantName)))
                            .replace('{' + 'limitName' + '}', encodeURIComponent(String(limitName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(dataFederationTenantQueryLimit, "DataFederationTenantQueryLimit", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataFederationApiRequestFactory.prototype.deleteDataFederationPrivateEndpoint = function (groupId, endpointId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "deleteDataFederationPrivateEndpoint", "groupId");
                        }
                        if (endpointId === null || endpointId === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "deleteDataFederationPrivateEndpoint", "endpointId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/privateNetworkSettings/endpointIds/{endpointId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'endpointId' + '}', encodeURIComponent(String(endpointId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataFederationApiRequestFactory.prototype.deleteFederatedDatabase = function (groupId, tenantName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "deleteFederatedDatabase", "groupId");
                        }
                        if (tenantName === null || tenantName === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "deleteFederatedDatabase", "tenantName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/dataFederation/{tenantName}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'tenantName' + '}', encodeURIComponent(String(tenantName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataFederationApiRequestFactory.prototype.deleteOneDataFederationInstanceQueryLimit = function (groupId, tenantName, limitName, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "deleteOneDataFederationInstanceQueryLimit", "groupId");
                        }
                        if (tenantName === null || tenantName === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "deleteOneDataFederationInstanceQueryLimit", "tenantName");
                        }
                        if (limitName === null || limitName === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "deleteOneDataFederationInstanceQueryLimit", "limitName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/dataFederation/{tenantName}/limits/{limitName}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'tenantName' + '}', encodeURIComponent(String(tenantName)))
                            .replace('{' + 'limitName' + '}', encodeURIComponent(String(limitName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataFederationApiRequestFactory.prototype.downloadFederatedDatabaseQueryLogs = function (groupId, tenantName, endDate, startDate, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "downloadFederatedDatabaseQueryLogs", "groupId");
                        }
                        if (tenantName === null || tenantName === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "downloadFederatedDatabaseQueryLogs", "tenantName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/dataFederation/{tenantName}/queryLogs.gz'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'tenantName' + '}', encodeURIComponent(String(tenantName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (endDate !== undefined) {
                            requestContext.setQueryParam("endDate", ObjectSerializer_1.ObjectSerializer.serialize(endDate, "number", "int64"));
                        }
                        if (startDate !== undefined) {
                            requestContext.setQueryParam("startDate", ObjectSerializer_1.ObjectSerializer.serialize(startDate, "number", "int64"));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataFederationApiRequestFactory.prototype.getDataFederationPrivateEndpoint = function (groupId, endpointId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "getDataFederationPrivateEndpoint", "groupId");
                        }
                        if (endpointId === null || endpointId === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "getDataFederationPrivateEndpoint", "endpointId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/privateNetworkSettings/endpointIds/{endpointId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'endpointId' + '}', encodeURIComponent(String(endpointId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataFederationApiRequestFactory.prototype.getFederatedDatabase = function (groupId, tenantName, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "getFederatedDatabase", "groupId");
                        }
                        if (tenantName === null || tenantName === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "getFederatedDatabase", "tenantName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/dataFederation/{tenantName}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'tenantName' + '}', encodeURIComponent(String(tenantName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataFederationApiRequestFactory.prototype.listDataFederationPrivateEndpoints = function (groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "listDataFederationPrivateEndpoints", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/privateNetworkSettings/endpointIds'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataFederationApiRequestFactory.prototype.listFederatedDatabases = function (groupId, envelope, pretty, type, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "listFederatedDatabases", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/dataFederation'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (type !== undefined) {
                            requestContext.setQueryParam("type", ObjectSerializer_1.ObjectSerializer.serialize(type, "'USER' | 'ONLINE_ARCHIVE'", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataFederationApiRequestFactory.prototype.returnFederatedDatabaseQueryLimit = function (groupId, tenantName, limitName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "returnFederatedDatabaseQueryLimit", "groupId");
                        }
                        if (tenantName === null || tenantName === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "returnFederatedDatabaseQueryLimit", "tenantName");
                        }
                        if (limitName === null || limitName === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "returnFederatedDatabaseQueryLimit", "limitName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/dataFederation/{tenantName}/limits/{limitName}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'tenantName' + '}', encodeURIComponent(String(tenantName)))
                            .replace('{' + 'limitName' + '}', encodeURIComponent(String(limitName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataFederationApiRequestFactory.prototype.returnFederatedDatabaseQueryLimits = function (groupId, tenantName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "returnFederatedDatabaseQueryLimits", "groupId");
                        }
                        if (tenantName === null || tenantName === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "returnFederatedDatabaseQueryLimits", "tenantName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/dataFederation/{tenantName}/limits'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'tenantName' + '}', encodeURIComponent(String(tenantName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataFederationApiRequestFactory.prototype.updateFederatedDatabase = function (groupId, tenantName, skipRoleValidation, dataLakeTenant, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "updateFederatedDatabase", "groupId");
                        }
                        if (tenantName === null || tenantName === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "updateFederatedDatabase", "tenantName");
                        }
                        if (skipRoleValidation === null || skipRoleValidation === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "updateFederatedDatabase", "skipRoleValidation");
                        }
                        if (dataLakeTenant === null || dataLakeTenant === undefined) {
                            throw new baseapi_1.RequiredError("DataFederationApi", "updateFederatedDatabase", "dataLakeTenant");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/dataFederation/{tenantName}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'tenantName' + '}', encodeURIComponent(String(tenantName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (skipRoleValidation !== undefined) {
                            requestContext.setQueryParam("skipRoleValidation", ObjectSerializer_1.ObjectSerializer.serialize(skipRoleValidation, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(dataLakeTenant, "DataLakeTenant", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return DataFederationApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.DataFederationApiRequestFactory = DataFederationApiRequestFactory;
var DataFederationApiResponseProcessor = (function () {
    function DataFederationApiResponseProcessor() {
    }
    DataFederationApiResponseProcessor.prototype.createDataFederationPrivateEndpoint = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("201", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "Array<PrivateNetworkEndpointIdEntry>", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "Array<PrivateNetworkEndpointIdEntry>", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    DataFederationApiResponseProcessor.prototype.createFederatedDatabase = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "DataLakeTenant", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "DataLakeTenant", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    DataFederationApiResponseProcessor.prototype.createOneDataFederationQueryLimit = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "Array<DataFederationTenantQueryLimit>", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "Array<DataFederationTenantQueryLimit>", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    DataFederationApiResponseProcessor.prototype.deleteDataFederationPrivateEndpoint = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    DataFederationApiResponseProcessor.prototype.deleteFederatedDatabase = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, _o, _p;
            return __generator(this, function (_q) {
                switch (_q.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_q.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_q.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_q.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 6:
                        _o = exception_1.ApiException.bind;
                        _p = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 7: throw new (_o.apply(exception_1.ApiException, _p.concat([_q.sent(), response.headers])))();
                }
            });
        });
    };
    DataFederationApiResponseProcessor.prototype.deleteOneDataFederationInstanceQueryLimit = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, _o, _p;
            return __generator(this, function (_q) {
                switch (_q.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_q.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_q.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_q.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 6:
                        _o = exception_1.ApiException.bind;
                        _p = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 7: throw new (_o.apply(exception_1.ApiException, _p.concat([_q.sent(), response.headers])))();
                }
            });
        });
    };
    DataFederationApiResponseProcessor.prototype.downloadFederatedDatabaseQueryLogs = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        return [4, response.getBodyAsFile()];
                    case 1:
                        body = _6.sent();
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "ApiError", "binary"]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", "binary"]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 8];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", "binary"]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 10];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", "binary"]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 12];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", "binary"]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 12:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 14];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", "binary"]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 14:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 16];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 15:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "HttpFile", "binary"]);
                        return [2, body];
                    case 16:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 17: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    DataFederationApiResponseProcessor.prototype.getDataFederationPrivateEndpoint = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "PrivateNetworkEndpointIdEntry", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "PrivateNetworkEndpointIdEntry", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    DataFederationApiResponseProcessor.prototype.getFederatedDatabase = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "DataLakeTenant", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "DataLakeTenant", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    DataFederationApiResponseProcessor.prototype.listDataFederationPrivateEndpoints = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "Array<PrivateNetworkEndpointIdEntry>", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "Array<PrivateNetworkEndpointIdEntry>", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    DataFederationApiResponseProcessor.prototype.listFederatedDatabases = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "Array<DataLakeTenant>", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "Array<DataLakeTenant>", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    DataFederationApiResponseProcessor.prototype.returnFederatedDatabaseQueryLimit = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "Array<DataFederationTenantQueryLimit>", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "Array<DataFederationTenantQueryLimit>", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    DataFederationApiResponseProcessor.prototype.returnFederatedDatabaseQueryLimits = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "Array<DataFederationTenantQueryLimit>", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "Array<DataFederationTenantQueryLimit>", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    DataFederationApiResponseProcessor.prototype.updateFederatedDatabase = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "DataLakeTenant", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "DataLakeTenant", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    return DataFederationApiResponseProcessor;
}());
exports.DataFederationApiResponseProcessor = DataFederationApiResponseProcessor;
//# sourceMappingURL=DataFederationApi.js.map

/***/ }),

/***/ 45396:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataLakePipelinesApiResponseProcessor = exports.DataLakePipelinesApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var DataLakePipelinesApiRequestFactory = (function (_super) {
    __extends(DataLakePipelinesApiRequestFactory, _super);
    function DataLakePipelinesApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataLakePipelinesApiRequestFactory.prototype.createPipeline = function (groupId, ingestionPipeline, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "createPipeline", "groupId");
                        }
                        if (ingestionPipeline === null || ingestionPipeline === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "createPipeline", "ingestionPipeline");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/pipelines'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(ingestionPipeline, "IngestionPipeline", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataLakePipelinesApiRequestFactory.prototype.deletePipeline = function (groupId, pipelineName, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "deletePipeline", "groupId");
                        }
                        if (pipelineName === null || pipelineName === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "deletePipeline", "pipelineName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/pipelines/{pipelineName}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'pipelineName' + '}', encodeURIComponent(String(pipelineName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataLakePipelinesApiRequestFactory.prototype.deletePipelineRunDataset = function (groupId, pipelineName, pipelineRunId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "deletePipelineRunDataset", "groupId");
                        }
                        if (pipelineName === null || pipelineName === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "deletePipelineRunDataset", "pipelineName");
                        }
                        if (pipelineRunId === null || pipelineRunId === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "deletePipelineRunDataset", "pipelineRunId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/pipelines/{pipelineName}/runs/{pipelineRunId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'pipelineName' + '}', encodeURIComponent(String(pipelineName)))
                            .replace('{' + 'pipelineRunId' + '}', encodeURIComponent(String(pipelineRunId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataLakePipelinesApiRequestFactory.prototype.getPipeline = function (groupId, pipelineName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "getPipeline", "groupId");
                        }
                        if (pipelineName === null || pipelineName === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "getPipeline", "pipelineName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/pipelines/{pipelineName}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'pipelineName' + '}', encodeURIComponent(String(pipelineName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataLakePipelinesApiRequestFactory.prototype.getPipelineRun = function (groupId, pipelineName, pipelineRunId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "getPipelineRun", "groupId");
                        }
                        if (pipelineName === null || pipelineName === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "getPipelineRun", "pipelineName");
                        }
                        if (pipelineRunId === null || pipelineRunId === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "getPipelineRun", "pipelineRunId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/pipelines/{pipelineName}/runs/{pipelineRunId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'pipelineName' + '}', encodeURIComponent(String(pipelineName)))
                            .replace('{' + 'pipelineRunId' + '}', encodeURIComponent(String(pipelineRunId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataLakePipelinesApiRequestFactory.prototype.listPipelineRuns = function (groupId, pipelineName, envelope, includeCount, itemsPerPage, pageNum, pretty, createdBefore, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "listPipelineRuns", "groupId");
                        }
                        if (pipelineName === null || pipelineName === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "listPipelineRuns", "pipelineName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/pipelines/{pipelineName}/runs'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'pipelineName' + '}', encodeURIComponent(String(pipelineName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (createdBefore !== undefined) {
                            requestContext.setQueryParam("createdBefore", ObjectSerializer_1.ObjectSerializer.serialize(createdBefore, "Date", "date-time"));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataLakePipelinesApiRequestFactory.prototype.listPipelineSchedules = function (groupId, pipelineName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "listPipelineSchedules", "groupId");
                        }
                        if (pipelineName === null || pipelineName === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "listPipelineSchedules", "pipelineName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/pipelines/{pipelineName}/availableSchedules'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'pipelineName' + '}', encodeURIComponent(String(pipelineName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataLakePipelinesApiRequestFactory.prototype.listPipelineSnapshots = function (groupId, pipelineName, envelope, includeCount, itemsPerPage, pageNum, pretty, completedAfter, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "listPipelineSnapshots", "groupId");
                        }
                        if (pipelineName === null || pipelineName === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "listPipelineSnapshots", "pipelineName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/pipelines/{pipelineName}/availableSnapshots'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'pipelineName' + '}', encodeURIComponent(String(pipelineName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (completedAfter !== undefined) {
                            requestContext.setQueryParam("completedAfter", ObjectSerializer_1.ObjectSerializer.serialize(completedAfter, "Date", "date-time"));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataLakePipelinesApiRequestFactory.prototype.listPipelines = function (groupId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "listPipelines", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/pipelines'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataLakePipelinesApiRequestFactory.prototype.pausePipeline = function (groupId, pipelineName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "pausePipeline", "groupId");
                        }
                        if (pipelineName === null || pipelineName === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "pausePipeline", "pipelineName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/pipelines/{pipelineName}/pause'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'pipelineName' + '}', encodeURIComponent(String(pipelineName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataLakePipelinesApiRequestFactory.prototype.resumePipeline = function (groupId, pipelineName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "resumePipeline", "groupId");
                        }
                        if (pipelineName === null || pipelineName === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "resumePipeline", "pipelineName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/pipelines/{pipelineName}/resume'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'pipelineName' + '}', encodeURIComponent(String(pipelineName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataLakePipelinesApiRequestFactory.prototype.triggerSnapshotIngestion = function (groupId, pipelineName, triggerIngestionRequest, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "triggerSnapshotIngestion", "groupId");
                        }
                        if (pipelineName === null || pipelineName === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "triggerSnapshotIngestion", "pipelineName");
                        }
                        if (triggerIngestionRequest === null || triggerIngestionRequest === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "triggerSnapshotIngestion", "triggerIngestionRequest");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/pipelines/{pipelineName}/trigger'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'pipelineName' + '}', encodeURIComponent(String(pipelineName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(triggerIngestionRequest, "TriggerIngestionRequest", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DataLakePipelinesApiRequestFactory.prototype.updatePipeline = function (groupId, pipelineName, ingestionPipeline, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "updatePipeline", "groupId");
                        }
                        if (pipelineName === null || pipelineName === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "updatePipeline", "pipelineName");
                        }
                        if (ingestionPipeline === null || ingestionPipeline === undefined) {
                            throw new baseapi_1.RequiredError("DataLakePipelinesApi", "updatePipeline", "ingestionPipeline");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/pipelines/{pipelineName}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'pipelineName' + '}', encodeURIComponent(String(pipelineName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(ingestionPipeline, "IngestionPipeline", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return DataLakePipelinesApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.DataLakePipelinesApiRequestFactory = DataLakePipelinesApiRequestFactory;
var DataLakePipelinesApiResponseProcessor = (function () {
    function DataLakePipelinesApiResponseProcessor() {
    }
    DataLakePipelinesApiResponseProcessor.prototype.createPipeline = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "IngestionPipeline", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "IngestionPipeline", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    DataLakePipelinesApiResponseProcessor.prototype.deletePipeline = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    DataLakePipelinesApiResponseProcessor.prototype.deletePipelineRunDataset = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("202", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    DataLakePipelinesApiResponseProcessor.prototype.getPipeline = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "IngestionPipeline", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "IngestionPipeline", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    DataLakePipelinesApiResponseProcessor.prototype.getPipelineRun = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "IngestionPipelineRun", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "IngestionPipelineRun", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    DataLakePipelinesApiResponseProcessor.prototype.listPipelineRuns = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "PaginatedPipelineRunView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "PaginatedPipelineRunView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    DataLakePipelinesApiResponseProcessor.prototype.listPipelineSchedules = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "Array<ApiPolicyItemView>", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "Array<ApiPolicyItemView>", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    DataLakePipelinesApiResponseProcessor.prototype.listPipelineSnapshots = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "PaginatedBackupSnapshotView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "PaginatedBackupSnapshotView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    DataLakePipelinesApiResponseProcessor.prototype.listPipelines = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "Array<IngestionPipeline>", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "Array<IngestionPipeline>", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    DataLakePipelinesApiResponseProcessor.prototype.pausePipeline = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "IngestionPipeline", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "IngestionPipeline", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    DataLakePipelinesApiResponseProcessor.prototype.resumePipeline = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "IngestionPipeline", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "IngestionPipeline", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    DataLakePipelinesApiResponseProcessor.prototype.triggerSnapshotIngestion = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "IngestionPipelineRun", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "IngestionPipelineRun", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    DataLakePipelinesApiResponseProcessor.prototype.updatePipeline = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "IngestionPipeline", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "IngestionPipeline", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    return DataLakePipelinesApiResponseProcessor;
}());
exports.DataLakePipelinesApiResponseProcessor = DataLakePipelinesApiResponseProcessor;
//# sourceMappingURL=DataLakePipelinesApi.js.map

/***/ }),

/***/ 11352:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DatabaseUsersApiResponseProcessor = exports.DatabaseUsersApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var DatabaseUsersApiRequestFactory = (function (_super) {
    __extends(DatabaseUsersApiRequestFactory, _super);
    function DatabaseUsersApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DatabaseUsersApiRequestFactory.prototype.createDatabaseUser = function (groupId, databaseUser, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DatabaseUsersApi", "createDatabaseUser", "groupId");
                        }
                        if (databaseUser === null || databaseUser === undefined) {
                            throw new baseapi_1.RequiredError("DatabaseUsersApi", "createDatabaseUser", "databaseUser");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/databaseUsers'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(databaseUser, "DatabaseUser", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DatabaseUsersApiRequestFactory.prototype.deleteDatabaseUser = function (groupId, databaseName, username, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DatabaseUsersApi", "deleteDatabaseUser", "groupId");
                        }
                        if (databaseName === null || databaseName === undefined) {
                            throw new baseapi_1.RequiredError("DatabaseUsersApi", "deleteDatabaseUser", "databaseName");
                        }
                        if (username === null || username === undefined) {
                            throw new baseapi_1.RequiredError("DatabaseUsersApi", "deleteDatabaseUser", "username");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/databaseUsers/{databaseName}/{username}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'databaseName' + '}', encodeURIComponent(String(databaseName)))
                            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DatabaseUsersApiRequestFactory.prototype.getDatabaseUser = function (groupId, databaseName, username, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DatabaseUsersApi", "getDatabaseUser", "groupId");
                        }
                        if (databaseName === null || databaseName === undefined) {
                            throw new baseapi_1.RequiredError("DatabaseUsersApi", "getDatabaseUser", "databaseName");
                        }
                        if (username === null || username === undefined) {
                            throw new baseapi_1.RequiredError("DatabaseUsersApi", "getDatabaseUser", "username");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/databaseUsers/{databaseName}/{username}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'databaseName' + '}', encodeURIComponent(String(databaseName)))
                            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DatabaseUsersApiRequestFactory.prototype.listDatabaseUsers = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DatabaseUsersApi", "listDatabaseUsers", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/databaseUsers'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    DatabaseUsersApiRequestFactory.prototype.updateDatabaseUser = function (groupId, databaseName, username, databaseUser, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("DatabaseUsersApi", "updateDatabaseUser", "groupId");
                        }
                        if (databaseName === null || databaseName === undefined) {
                            throw new baseapi_1.RequiredError("DatabaseUsersApi", "updateDatabaseUser", "databaseName");
                        }
                        if (username === null || username === undefined) {
                            throw new baseapi_1.RequiredError("DatabaseUsersApi", "updateDatabaseUser", "username");
                        }
                        if (databaseUser === null || databaseUser === undefined) {
                            throw new baseapi_1.RequiredError("DatabaseUsersApi", "updateDatabaseUser", "databaseUser");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/databaseUsers/{databaseName}/{username}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'databaseName' + '}', encodeURIComponent(String(databaseName)))
                            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(databaseUser, "DatabaseUser", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return DatabaseUsersApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.DatabaseUsersApiRequestFactory = DatabaseUsersApiRequestFactory;
var DatabaseUsersApiResponseProcessor = (function () {
    function DatabaseUsersApiResponseProcessor() {
    }
    DatabaseUsersApiResponseProcessor.prototype.createDatabaseUser = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "DatabaseUser", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "DatabaseUser", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    DatabaseUsersApiResponseProcessor.prototype.deleteDatabaseUser = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    DatabaseUsersApiResponseProcessor.prototype.getDatabaseUser = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "DatabaseUser", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "DatabaseUser", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    DatabaseUsersApiResponseProcessor.prototype.listDatabaseUsers = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedApiAtlasDatabaseUserView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedApiAtlasDatabaseUserView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    DatabaseUsersApiResponseProcessor.prototype.updateDatabaseUser = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, body, _4, _5, _6, _7, _8, _9;
            return __generator(this, function (_10) {
                switch (_10.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_10.sent(), contentType]),
                            "DatabaseUser", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 12:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 14:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 16];
                        _5 = (_4 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _7 = (_6 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 15:
                        body = _5.apply(_4, [_7.apply(_6, [_10.sent(), contentType]),
                            "DatabaseUser", ""]);
                        return [2, body];
                    case 16:
                        _8 = exception_1.ApiException.bind;
                        _9 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 17: throw new (_8.apply(exception_1.ApiException, _9.concat([_10.sent(), response.headers])))();
                }
            });
        });
    };
    return DatabaseUsersApiResponseProcessor;
}());
exports.DatabaseUsersApiResponseProcessor = DatabaseUsersApiResponseProcessor;
//# sourceMappingURL=DatabaseUsersApi.js.map

/***/ }),

/***/ 13631:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EncryptionAtRestUsingCustomerKeyManagementApiResponseProcessor = exports.EncryptionAtRestUsingCustomerKeyManagementApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var EncryptionAtRestUsingCustomerKeyManagementApiRequestFactory = (function (_super) {
    __extends(EncryptionAtRestUsingCustomerKeyManagementApiRequestFactory, _super);
    function EncryptionAtRestUsingCustomerKeyManagementApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EncryptionAtRestUsingCustomerKeyManagementApiRequestFactory.prototype.returnOneConfigurationForEncryptionAtRestUsingCustomerManagedKeysForOneProject = function (groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("EncryptionAtRestUsingCustomerKeyManagementApi", "returnOneConfigurationForEncryptionAtRestUsingCustomerManagedKeysForOneProject", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/encryptionAtRest'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    EncryptionAtRestUsingCustomerKeyManagementApiRequestFactory.prototype.updateEncryptionAtRest = function (groupId, encryptionAtRest, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("EncryptionAtRestUsingCustomerKeyManagementApi", "updateEncryptionAtRest", "groupId");
                        }
                        if (encryptionAtRest === null || encryptionAtRest === undefined) {
                            throw new baseapi_1.RequiredError("EncryptionAtRestUsingCustomerKeyManagementApi", "updateEncryptionAtRest", "encryptionAtRest");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/encryptionAtRest'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(encryptionAtRest, "EncryptionAtRest", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return EncryptionAtRestUsingCustomerKeyManagementApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.EncryptionAtRestUsingCustomerKeyManagementApiRequestFactory = EncryptionAtRestUsingCustomerKeyManagementApiRequestFactory;
var EncryptionAtRestUsingCustomerKeyManagementApiResponseProcessor = (function () {
    function EncryptionAtRestUsingCustomerKeyManagementApiResponseProcessor() {
    }
    EncryptionAtRestUsingCustomerKeyManagementApiResponseProcessor.prototype.returnOneConfigurationForEncryptionAtRestUsingCustomerManagedKeysForOneProject = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "EncryptionAtRest", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "EncryptionAtRest", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    EncryptionAtRestUsingCustomerKeyManagementApiResponseProcessor.prototype.updateEncryptionAtRest = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "EncryptionAtRest", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "EncryptionAtRest", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    return EncryptionAtRestUsingCustomerKeyManagementApiResponseProcessor;
}());
exports.EncryptionAtRestUsingCustomerKeyManagementApiResponseProcessor = EncryptionAtRestUsingCustomerKeyManagementApiResponseProcessor;
//# sourceMappingURL=EncryptionAtRestUsingCustomerKeyManagementApi.js.map

/***/ }),

/***/ 36938:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EventsApiResponseProcessor = exports.EventsApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var EventsApiRequestFactory = (function (_super) {
    __extends(EventsApiRequestFactory, _super);
    function EventsApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EventsApiRequestFactory.prototype.getOrganizationEvent = function (orgId, eventId, envelope, pretty, includeRaw, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("EventsApi", "getOrganizationEvent", "orgId");
                        }
                        if (eventId === null || eventId === undefined) {
                            throw new baseapi_1.RequiredError("EventsApi", "getOrganizationEvent", "eventId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/events/{eventId}'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)))
                            .replace('{' + 'eventId' + '}', encodeURIComponent(String(eventId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (includeRaw !== undefined) {
                            requestContext.setQueryParam("includeRaw", ObjectSerializer_1.ObjectSerializer.serialize(includeRaw, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    EventsApiRequestFactory.prototype.getProjectEvent = function (groupId, eventId, envelope, pretty, includeRaw, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("EventsApi", "getProjectEvent", "groupId");
                        }
                        if (eventId === null || eventId === undefined) {
                            throw new baseapi_1.RequiredError("EventsApi", "getProjectEvent", "eventId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/events/{eventId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'eventId' + '}', encodeURIComponent(String(eventId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (includeRaw !== undefined) {
                            requestContext.setQueryParam("includeRaw", ObjectSerializer_1.ObjectSerializer.serialize(includeRaw, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    EventsApiRequestFactory.prototype.listOrganizationEvents = function (orgId, envelope, includeCount, itemsPerPage, pageNum, pretty, eventType, includeRaw, maxDate, minDate, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("EventsApi", "listOrganizationEvents", "orgId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/events'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (eventType !== undefined) {
                            requestContext.setQueryParam("eventType", ObjectSerializer_1.ObjectSerializer.serialize(eventType, "EventTypeForOrg", ""));
                        }
                        if (includeRaw !== undefined) {
                            requestContext.setQueryParam("includeRaw", ObjectSerializer_1.ObjectSerializer.serialize(includeRaw, "boolean", ""));
                        }
                        if (maxDate !== undefined) {
                            requestContext.setQueryParam("maxDate", ObjectSerializer_1.ObjectSerializer.serialize(maxDate, "Date", "date-time"));
                        }
                        if (minDate !== undefined) {
                            requestContext.setQueryParam("minDate", ObjectSerializer_1.ObjectSerializer.serialize(minDate, "Date", "date-time"));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    EventsApiRequestFactory.prototype.listProjectEvents = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, clusterNames, eventType, includeRaw, maxDate, minDate, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("EventsApi", "listProjectEvents", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/events'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (clusterNames !== undefined) {
                            requestContext.setQueryParam("clusterNames", ObjectSerializer_1.ObjectSerializer.serialize(clusterNames, "Array<string>", ""));
                        }
                        if (eventType !== undefined) {
                            requestContext.setQueryParam("eventType", ObjectSerializer_1.ObjectSerializer.serialize(eventType, "EventTypeForNdsGroup", ""));
                        }
                        if (includeRaw !== undefined) {
                            requestContext.setQueryParam("includeRaw", ObjectSerializer_1.ObjectSerializer.serialize(includeRaw, "boolean", ""));
                        }
                        if (maxDate !== undefined) {
                            requestContext.setQueryParam("maxDate", ObjectSerializer_1.ObjectSerializer.serialize(maxDate, "Date", "date-time"));
                        }
                        if (minDate !== undefined) {
                            requestContext.setQueryParam("minDate", ObjectSerializer_1.ObjectSerializer.serialize(minDate, "Date", "date-time"));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return EventsApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.EventsApiRequestFactory = EventsApiRequestFactory;
var EventsApiResponseProcessor = (function () {
    function EventsApiResponseProcessor() {
    }
    EventsApiResponseProcessor.prototype.getOrganizationEvent = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "EventViewForOrg", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "EventViewForOrg", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    EventsApiResponseProcessor.prototype.getProjectEvent = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "EventViewForNdsGroup", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "EventViewForNdsGroup", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    EventsApiResponseProcessor.prototype.listOrganizationEvents = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "OrgPaginatedEventView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "OrgPaginatedEventView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    EventsApiResponseProcessor.prototype.listProjectEvents = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "GroupPaginatedEventView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "GroupPaginatedEventView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    return EventsApiResponseProcessor;
}());
exports.EventsApiResponseProcessor = EventsApiResponseProcessor;
//# sourceMappingURL=EventsApi.js.map

/***/ }),

/***/ 63539:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FederatedAuthenticationApiResponseProcessor = exports.FederatedAuthenticationApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var FederatedAuthenticationApiRequestFactory = (function (_super) {
    __extends(FederatedAuthenticationApiRequestFactory, _super);
    function FederatedAuthenticationApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FederatedAuthenticationApiRequestFactory.prototype.createRoleMapping = function (federationSettingsId, orgId, roleMappingView, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (federationSettingsId === null || federationSettingsId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "createRoleMapping", "federationSettingsId");
                        }
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "createRoleMapping", "orgId");
                        }
                        if (roleMappingView === null || roleMappingView === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "createRoleMapping", "roleMappingView");
                        }
                        localVarPath = '/api/atlas/v2/federationSettings/{federationSettingsId}/connectedOrgConfigs/{orgId}/roleMappings'
                            .replace('{' + 'federationSettingsId' + '}', encodeURIComponent(String(federationSettingsId)))
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(roleMappingView, "RoleMappingView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    FederatedAuthenticationApiRequestFactory.prototype.deleteFederationApp = function (federationSettingsId, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (federationSettingsId === null || federationSettingsId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "deleteFederationApp", "federationSettingsId");
                        }
                        localVarPath = '/api/atlas/v2/federationSettings/{federationSettingsId}'
                            .replace('{' + 'federationSettingsId' + '}', encodeURIComponent(String(federationSettingsId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    FederatedAuthenticationApiRequestFactory.prototype.deleteRoleMapping = function (federationSettingsId, id, orgId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (federationSettingsId === null || federationSettingsId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "deleteRoleMapping", "federationSettingsId");
                        }
                        if (id === null || id === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "deleteRoleMapping", "id");
                        }
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "deleteRoleMapping", "orgId");
                        }
                        localVarPath = '/api/atlas/v2/federationSettings/{federationSettingsId}/connectedOrgConfigs/{orgId}/roleMappings/{id}'
                            .replace('{' + 'federationSettingsId' + '}', encodeURIComponent(String(federationSettingsId)))
                            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    FederatedAuthenticationApiRequestFactory.prototype.getConnectedOrgConfig = function (federationSettingsId, orgId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (federationSettingsId === null || federationSettingsId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "getConnectedOrgConfig", "federationSettingsId");
                        }
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "getConnectedOrgConfig", "orgId");
                        }
                        localVarPath = '/api/atlas/v2/federationSettings/{federationSettingsId}/connectedOrgConfigs/{orgId}'
                            .replace('{' + 'federationSettingsId' + '}', encodeURIComponent(String(federationSettingsId)))
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    FederatedAuthenticationApiRequestFactory.prototype.getFederationSettings = function (orgId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "getFederationSettings", "orgId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/federationSettings'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    FederatedAuthenticationApiRequestFactory.prototype.getIdentityProvider = function (federationSettingsId, identityProviderId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (federationSettingsId === null || federationSettingsId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "getIdentityProvider", "federationSettingsId");
                        }
                        if (identityProviderId === null || identityProviderId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "getIdentityProvider", "identityProviderId");
                        }
                        localVarPath = '/api/atlas/v2/federationSettings/{federationSettingsId}/identityProviders/{identityProviderId}'
                            .replace('{' + 'federationSettingsId' + '}', encodeURIComponent(String(federationSettingsId)))
                            .replace('{' + 'identityProviderId' + '}', encodeURIComponent(String(identityProviderId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    FederatedAuthenticationApiRequestFactory.prototype.getIdentityProviderMetadata = function (federationSettingsId, identityProviderId, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (federationSettingsId === null || federationSettingsId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "getIdentityProviderMetadata", "federationSettingsId");
                        }
                        if (identityProviderId === null || identityProviderId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "getIdentityProviderMetadata", "identityProviderId");
                        }
                        localVarPath = '/api/atlas/v2/federationSettings/{federationSettingsId}/identityProviders/{identityProviderId}/metadata.xml'
                            .replace('{' + 'federationSettingsId' + '}', encodeURIComponent(String(federationSettingsId)))
                            .replace('{' + 'identityProviderId' + '}', encodeURIComponent(String(identityProviderId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    FederatedAuthenticationApiRequestFactory.prototype.getRoleMapping = function (federationSettingsId, id, orgId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (federationSettingsId === null || federationSettingsId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "getRoleMapping", "federationSettingsId");
                        }
                        if (id === null || id === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "getRoleMapping", "id");
                        }
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "getRoleMapping", "orgId");
                        }
                        localVarPath = '/api/atlas/v2/federationSettings/{federationSettingsId}/connectedOrgConfigs/{orgId}/roleMappings/{id}'
                            .replace('{' + 'federationSettingsId' + '}', encodeURIComponent(String(federationSettingsId)))
                            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    FederatedAuthenticationApiRequestFactory.prototype.listConnectedOrgConfigs = function (federationSettingsId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (federationSettingsId === null || federationSettingsId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "listConnectedOrgConfigs", "federationSettingsId");
                        }
                        localVarPath = '/api/atlas/v2/federationSettings/{federationSettingsId}/connectedOrgConfigs'
                            .replace('{' + 'federationSettingsId' + '}', encodeURIComponent(String(federationSettingsId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    FederatedAuthenticationApiRequestFactory.prototype.listIdentityProviders = function (federationSettingsId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (federationSettingsId === null || federationSettingsId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "listIdentityProviders", "federationSettingsId");
                        }
                        localVarPath = '/api/atlas/v2/federationSettings/{federationSettingsId}/identityProviders'
                            .replace('{' + 'federationSettingsId' + '}', encodeURIComponent(String(federationSettingsId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    FederatedAuthenticationApiRequestFactory.prototype.listRoleMappings = function (federationSettingsId, orgId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (federationSettingsId === null || federationSettingsId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "listRoleMappings", "federationSettingsId");
                        }
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "listRoleMappings", "orgId");
                        }
                        localVarPath = '/api/atlas/v2/federationSettings/{federationSettingsId}/connectedOrgConfigs/{orgId}/roleMappings'
                            .replace('{' + 'federationSettingsId' + '}', encodeURIComponent(String(federationSettingsId)))
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    FederatedAuthenticationApiRequestFactory.prototype.removeConnectedOrgConfig = function (federationSettingsId, orgId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (federationSettingsId === null || federationSettingsId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "removeConnectedOrgConfig", "federationSettingsId");
                        }
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "removeConnectedOrgConfig", "orgId");
                        }
                        localVarPath = '/api/atlas/v2/federationSettings/{federationSettingsId}/connectedOrgConfigs/{orgId}'
                            .replace('{' + 'federationSettingsId' + '}', encodeURIComponent(String(federationSettingsId)))
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    FederatedAuthenticationApiRequestFactory.prototype.updateConnectedOrgConfig = function (federationSettingsId, orgId, connectedOrgConfigView, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (federationSettingsId === null || federationSettingsId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "updateConnectedOrgConfig", "federationSettingsId");
                        }
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "updateConnectedOrgConfig", "orgId");
                        }
                        if (connectedOrgConfigView === null || connectedOrgConfigView === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "updateConnectedOrgConfig", "connectedOrgConfigView");
                        }
                        localVarPath = '/api/atlas/v2/federationSettings/{federationSettingsId}/connectedOrgConfigs/{orgId}'
                            .replace('{' + 'federationSettingsId' + '}', encodeURIComponent(String(federationSettingsId)))
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(connectedOrgConfigView, "ConnectedOrgConfigView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    FederatedAuthenticationApiRequestFactory.prototype.updateIdentityProvider = function (federationSettingsId, identityProviderId, identityProviderUpdate, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (federationSettingsId === null || federationSettingsId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "updateIdentityProvider", "federationSettingsId");
                        }
                        if (identityProviderId === null || identityProviderId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "updateIdentityProvider", "identityProviderId");
                        }
                        if (identityProviderUpdate === null || identityProviderUpdate === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "updateIdentityProvider", "identityProviderUpdate");
                        }
                        localVarPath = '/api/atlas/v2/federationSettings/{federationSettingsId}/identityProviders/{identityProviderId}'
                            .replace('{' + 'federationSettingsId' + '}', encodeURIComponent(String(federationSettingsId)))
                            .replace('{' + 'identityProviderId' + '}', encodeURIComponent(String(identityProviderId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(identityProviderUpdate, "IdentityProviderUpdate", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    FederatedAuthenticationApiRequestFactory.prototype.updateRoleMapping = function (federationSettingsId, id, orgId, roleMappingView, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (federationSettingsId === null || federationSettingsId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "updateRoleMapping", "federationSettingsId");
                        }
                        if (id === null || id === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "updateRoleMapping", "id");
                        }
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "updateRoleMapping", "orgId");
                        }
                        if (roleMappingView === null || roleMappingView === undefined) {
                            throw new baseapi_1.RequiredError("FederatedAuthenticationApi", "updateRoleMapping", "roleMappingView");
                        }
                        localVarPath = '/api/atlas/v2/federationSettings/{federationSettingsId}/connectedOrgConfigs/{orgId}/roleMappings/{id}'
                            .replace('{' + 'federationSettingsId' + '}', encodeURIComponent(String(federationSettingsId)))
                            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PUT);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(roleMappingView, "RoleMappingView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return FederatedAuthenticationApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.FederatedAuthenticationApiRequestFactory = FederatedAuthenticationApiRequestFactory;
var FederatedAuthenticationApiResponseProcessor = (function () {
    function FederatedAuthenticationApiResponseProcessor() {
    }
    FederatedAuthenticationApiResponseProcessor.prototype.createRoleMapping = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "RoleMappingView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "RoleMappingView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    FederatedAuthenticationApiResponseProcessor.prototype.deleteFederationApp = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    FederatedAuthenticationApiResponseProcessor.prototype.deleteRoleMapping = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    FederatedAuthenticationApiResponseProcessor.prototype.getConnectedOrgConfig = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "ConnectedOrgConfigView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "ConnectedOrgConfigView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    FederatedAuthenticationApiResponseProcessor.prototype.getFederationSettings = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "OrgFederationSettingsView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "OrgFederationSettingsView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    FederatedAuthenticationApiResponseProcessor.prototype.getIdentityProvider = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "IdentityProviderView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "IdentityProviderView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    FederatedAuthenticationApiResponseProcessor.prototype.getIdentityProviderMetadata = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "string", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "string", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    FederatedAuthenticationApiResponseProcessor.prototype.getRoleMapping = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "RoleMappingView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "RoleMappingView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    FederatedAuthenticationApiResponseProcessor.prototype.listConnectedOrgConfigs = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "Array<ConnectedOrgConfigView>", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "Array<ConnectedOrgConfigView>", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    FederatedAuthenticationApiResponseProcessor.prototype.listIdentityProviders = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "Array<IdentityProviderView>", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "Array<IdentityProviderView>", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    FederatedAuthenticationApiResponseProcessor.prototype.listRoleMappings = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "Array<RoleMappingView>", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "Array<RoleMappingView>", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    FederatedAuthenticationApiResponseProcessor.prototype.removeConnectedOrgConfig = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    FederatedAuthenticationApiResponseProcessor.prototype.updateConnectedOrgConfig = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "ConnectedOrgConfigView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "ConnectedOrgConfigView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    FederatedAuthenticationApiResponseProcessor.prototype.updateIdentityProvider = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "IdentityProviderView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "IdentityProviderView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    FederatedAuthenticationApiResponseProcessor.prototype.updateRoleMapping = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "RoleMappingView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "RoleMappingView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    return FederatedAuthenticationApiResponseProcessor;
}());
exports.FederatedAuthenticationApiResponseProcessor = FederatedAuthenticationApiResponseProcessor;
//# sourceMappingURL=FederatedAuthenticationApi.js.map

/***/ }),

/***/ 17349:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GlobalClustersApiResponseProcessor = exports.GlobalClustersApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var GlobalClustersApiRequestFactory = (function (_super) {
    __extends(GlobalClustersApiRequestFactory, _super);
    function GlobalClustersApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GlobalClustersApiRequestFactory.prototype.createCustomZoneMapping = function (groupId, clusterName, geoSharding, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("GlobalClustersApi", "createCustomZoneMapping", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("GlobalClustersApi", "createCustomZoneMapping", "clusterName");
                        }
                        if (geoSharding === null || geoSharding === undefined) {
                            throw new baseapi_1.RequiredError("GlobalClustersApi", "createCustomZoneMapping", "geoSharding");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/globalWrites/customZoneMapping'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-02-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(geoSharding, "GeoSharding", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    GlobalClustersApiRequestFactory.prototype.createManagedNamespace = function (groupId, clusterName, managedNamespaceView, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("GlobalClustersApi", "createManagedNamespace", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("GlobalClustersApi", "createManagedNamespace", "clusterName");
                        }
                        if (managedNamespaceView === null || managedNamespaceView === undefined) {
                            throw new baseapi_1.RequiredError("GlobalClustersApi", "createManagedNamespace", "managedNamespaceView");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/globalWrites/managedNamespaces'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-02-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(managedNamespaceView, "ManagedNamespaceView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    GlobalClustersApiRequestFactory.prototype.deleteAllCustomZoneMappings = function (groupId, clusterName, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("GlobalClustersApi", "deleteAllCustomZoneMappings", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("GlobalClustersApi", "deleteAllCustomZoneMappings", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/globalWrites/customZoneMapping'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    GlobalClustersApiRequestFactory.prototype.deleteManagedNamespace = function (clusterName, groupId, envelope, pretty, db, collection, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("GlobalClustersApi", "deleteManagedNamespace", "clusterName");
                        }
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("GlobalClustersApi", "deleteManagedNamespace", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/globalWrites/managedNamespaces'
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (db !== undefined) {
                            requestContext.setQueryParam("db", ObjectSerializer_1.ObjectSerializer.serialize(db, "string", ""));
                        }
                        if (collection !== undefined) {
                            requestContext.setQueryParam("collection", ObjectSerializer_1.ObjectSerializer.serialize(collection, "string", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    GlobalClustersApiRequestFactory.prototype.getManagedNamespace = function (groupId, clusterName, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("GlobalClustersApi", "getManagedNamespace", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("GlobalClustersApi", "getManagedNamespace", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/globalWrites'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return GlobalClustersApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.GlobalClustersApiRequestFactory = GlobalClustersApiRequestFactory;
var GlobalClustersApiResponseProcessor = (function () {
    function GlobalClustersApiResponseProcessor() {
    }
    GlobalClustersApiResponseProcessor.prototype.createCustomZoneMapping = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "GeoSharding", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "GeoSharding", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    GlobalClustersApiResponseProcessor.prototype.createManagedNamespace = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "GeoSharding", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("405", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Method Not Allowed", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "GeoSharding", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    GlobalClustersApiResponseProcessor.prototype.deleteAllCustomZoneMappings = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "GeoSharding", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "GeoSharding", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    GlobalClustersApiResponseProcessor.prototype.deleteManagedNamespace = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "GeoSharding", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "GeoSharding", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    GlobalClustersApiResponseProcessor.prototype.getManagedNamespace = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, _o, _p;
            return __generator(this, function (_q) {
                switch (_q.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_q.sent(), contentType]),
                            "GeoSharding", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_q.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_q.sent(), contentType]),
                            "GeoSharding", ""]);
                        return [2, body];
                    case 6:
                        _o = exception_1.ApiException.bind;
                        _p = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 7: throw new (_o.apply(exception_1.ApiException, _p.concat([_q.sent(), response.headers])))();
                }
            });
        });
    };
    return GlobalClustersApiResponseProcessor;
}());
exports.GlobalClustersApiResponseProcessor = GlobalClustersApiResponseProcessor;
//# sourceMappingURL=GlobalClustersApi.js.map

/***/ }),

/***/ 69069:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InvoicesApiResponseProcessor = exports.InvoicesApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var InvoicesApiRequestFactory = (function (_super) {
    __extends(InvoicesApiRequestFactory, _super);
    function InvoicesApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InvoicesApiRequestFactory.prototype.downloadInvoiceCSV = function (orgId, invoiceId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("InvoicesApi", "downloadInvoiceCSV", "orgId");
                        }
                        if (invoiceId === null || invoiceId === undefined) {
                            throw new baseapi_1.RequiredError("InvoicesApi", "downloadInvoiceCSV", "invoiceId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/invoices/{invoiceId}/csv'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)))
                            .replace('{' + 'invoiceId' + '}', encodeURIComponent(String(invoiceId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    InvoicesApiRequestFactory.prototype.getInvoice = function (orgId, invoiceId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("InvoicesApi", "getInvoice", "orgId");
                        }
                        if (invoiceId === null || invoiceId === undefined) {
                            throw new baseapi_1.RequiredError("InvoicesApi", "getInvoice", "invoiceId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/invoices/{invoiceId}'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)))
                            .replace('{' + 'invoiceId' + '}', encodeURIComponent(String(invoiceId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    InvoicesApiRequestFactory.prototype.listInvoices = function (orgId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("InvoicesApi", "listInvoices", "orgId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/invoices'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    InvoicesApiRequestFactory.prototype.listPendingInvoices = function (orgId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("InvoicesApi", "listPendingInvoices", "orgId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/invoices/pending'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return InvoicesApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.InvoicesApiRequestFactory = InvoicesApiRequestFactory;
var InvoicesApiResponseProcessor = (function () {
    function InvoicesApiResponseProcessor() {
    }
    InvoicesApiResponseProcessor.prototype.downloadInvoiceCSV = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, _o, _p;
            return __generator(this, function (_q) {
                switch (_q.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("200", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_q.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_q.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_q.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 6:
                        _o = exception_1.ApiException.bind;
                        _p = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 7: throw new (_o.apply(exception_1.ApiException, _p.concat([_q.sent(), response.headers])))();
                }
            });
        });
    };
    InvoicesApiResponseProcessor.prototype.getInvoice = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiInvoiceView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ApiInvoiceView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    InvoicesApiResponseProcessor.prototype.listInvoices = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "PaginatedApiInvoiceView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "PaginatedApiInvoiceView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    InvoicesApiResponseProcessor.prototype.listPendingInvoices = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "PaginatedApiInvoiceView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "PaginatedApiInvoiceView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    return InvoicesApiResponseProcessor;
}());
exports.InvoicesApiResponseProcessor = InvoicesApiResponseProcessor;
//# sourceMappingURL=InvoicesApi.js.map

/***/ }),

/***/ 26649:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LDAPConfigurationApiResponseProcessor = exports.LDAPConfigurationApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var LDAPConfigurationApiRequestFactory = (function (_super) {
    __extends(LDAPConfigurationApiRequestFactory, _super);
    function LDAPConfigurationApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LDAPConfigurationApiRequestFactory.prototype.deleteLDAPConfiguration = function (groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("LDAPConfigurationApi", "deleteLDAPConfiguration", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/userSecurity/ldap/userToDNMapping'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    LDAPConfigurationApiRequestFactory.prototype.getLDAPConfiguration = function (groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("LDAPConfigurationApi", "getLDAPConfiguration", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/userSecurity'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    LDAPConfigurationApiRequestFactory.prototype.getLDAPConfigurationStatus = function (groupId, requestId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("LDAPConfigurationApi", "getLDAPConfigurationStatus", "groupId");
                        }
                        if (requestId === null || requestId === undefined) {
                            throw new baseapi_1.RequiredError("LDAPConfigurationApi", "getLDAPConfigurationStatus", "requestId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/userSecurity/ldap/verify/{requestId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'requestId' + '}', encodeURIComponent(String(requestId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    LDAPConfigurationApiRequestFactory.prototype.saveLDAPConfiguration = function (groupId, userSecurity, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("LDAPConfigurationApi", "saveLDAPConfiguration", "groupId");
                        }
                        if (userSecurity === null || userSecurity === undefined) {
                            throw new baseapi_1.RequiredError("LDAPConfigurationApi", "saveLDAPConfiguration", "userSecurity");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/userSecurity'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(userSecurity, "UserSecurity", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    LDAPConfigurationApiRequestFactory.prototype.verifyLDAPConfiguration = function (groupId, nDSLDAPVerifyConnectivityJobRequestParams, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("LDAPConfigurationApi", "verifyLDAPConfiguration", "groupId");
                        }
                        if (nDSLDAPVerifyConnectivityJobRequestParams === null || nDSLDAPVerifyConnectivityJobRequestParams === undefined) {
                            throw new baseapi_1.RequiredError("LDAPConfigurationApi", "verifyLDAPConfiguration", "nDSLDAPVerifyConnectivityJobRequestParams");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/userSecurity/ldap/verify'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(nDSLDAPVerifyConnectivityJobRequestParams, "NDSLDAPVerifyConnectivityJobRequestParams", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return LDAPConfigurationApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.LDAPConfigurationApiRequestFactory = LDAPConfigurationApiRequestFactory;
var LDAPConfigurationApiResponseProcessor = (function () {
    function LDAPConfigurationApiResponseProcessor() {
    }
    LDAPConfigurationApiResponseProcessor.prototype.deleteLDAPConfiguration = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, _o, _p;
            return __generator(this, function (_q) {
                switch (_q.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_q.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_q.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_q.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 6:
                        _o = exception_1.ApiException.bind;
                        _p = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 7: throw new (_o.apply(exception_1.ApiException, _p.concat([_q.sent(), response.headers])))();
                }
            });
        });
    };
    LDAPConfigurationApiResponseProcessor.prototype.getLDAPConfiguration = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "UserSecurity", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "UserSecurity", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    LDAPConfigurationApiResponseProcessor.prototype.getLDAPConfigurationStatus = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "NDSLDAPVerifyConnectivityJobRequest", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "NDSLDAPVerifyConnectivityJobRequest", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    LDAPConfigurationApiResponseProcessor.prototype.saveLDAPConfiguration = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "UserSecurity", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "UserSecurity", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    LDAPConfigurationApiResponseProcessor.prototype.verifyLDAPConfiguration = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "NDSLDAPVerifyConnectivityJobRequest", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "NDSLDAPVerifyConnectivityJobRequest", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    return LDAPConfigurationApiResponseProcessor;
}());
exports.LDAPConfigurationApiResponseProcessor = LDAPConfigurationApiResponseProcessor;
//# sourceMappingURL=LDAPConfigurationApi.js.map

/***/ }),

/***/ 96025:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LegacyBackupApiResponseProcessor = exports.LegacyBackupApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var LegacyBackupApiRequestFactory = (function (_super) {
    __extends(LegacyBackupApiRequestFactory, _super);
    function LegacyBackupApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LegacyBackupApiRequestFactory.prototype.deleteLegacySnapshot = function (groupId, clusterName, snapshotId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "deleteLegacySnapshot", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "deleteLegacySnapshot", "clusterName");
                        }
                        if (snapshotId === null || snapshotId === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "deleteLegacySnapshot", "snapshotId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/snapshots/{snapshotId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'snapshotId' + '}', encodeURIComponent(String(snapshotId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    LegacyBackupApiRequestFactory.prototype.getLegacyBackupCheckpoint = function (groupId, checkpointId, clusterName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "getLegacyBackupCheckpoint", "groupId");
                        }
                        if (checkpointId === null || checkpointId === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "getLegacyBackupCheckpoint", "checkpointId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "getLegacyBackupCheckpoint", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backupCheckpoints/{checkpointId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'checkpointId' + '}', encodeURIComponent(String(checkpointId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    LegacyBackupApiRequestFactory.prototype.getLegacyBackupRestoreJob = function (groupId, clusterName, jobId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "getLegacyBackupRestoreJob", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "getLegacyBackupRestoreJob", "clusterName");
                        }
                        if (jobId === null || jobId === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "getLegacyBackupRestoreJob", "jobId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/restoreJobs/{jobId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'jobId' + '}', encodeURIComponent(String(jobId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    LegacyBackupApiRequestFactory.prototype.getLegacySnapshot = function (groupId, clusterName, snapshotId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "getLegacySnapshot", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "getLegacySnapshot", "clusterName");
                        }
                        if (snapshotId === null || snapshotId === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "getLegacySnapshot", "snapshotId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/snapshots/{snapshotId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'snapshotId' + '}', encodeURIComponent(String(snapshotId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    LegacyBackupApiRequestFactory.prototype.getLegacySnapshotSchedule = function (groupId, clusterName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "getLegacySnapshotSchedule", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "getLegacySnapshotSchedule", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/snapshotSchedule'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    LegacyBackupApiRequestFactory.prototype.listLegacyBackupCheckpoints = function (groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "listLegacyBackupCheckpoints", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "listLegacyBackupCheckpoints", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backupCheckpoints'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    LegacyBackupApiRequestFactory.prototype.listLegacyBackupRestoreJobs = function (groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, batchId, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "listLegacyBackupRestoreJobs", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "listLegacyBackupRestoreJobs", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/restoreJobs'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (batchId !== undefined) {
                            requestContext.setQueryParam("batchId", ObjectSerializer_1.ObjectSerializer.serialize(batchId, "string", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    LegacyBackupApiRequestFactory.prototype.listLegacySnapshots = function (groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, completed, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "listLegacySnapshots", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "listLegacySnapshots", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/snapshots'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (completed !== undefined) {
                            requestContext.setQueryParam("completed", ObjectSerializer_1.ObjectSerializer.serialize(completed, "'all' | 'true' | 'false'", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    LegacyBackupApiRequestFactory.prototype.updateLegacySnapshotRetention = function (groupId, clusterName, snapshotId, apiSnapshotView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "updateLegacySnapshotRetention", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "updateLegacySnapshotRetention", "clusterName");
                        }
                        if (snapshotId === null || snapshotId === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "updateLegacySnapshotRetention", "snapshotId");
                        }
                        if (apiSnapshotView === null || apiSnapshotView === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "updateLegacySnapshotRetention", "apiSnapshotView");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/snapshots/{snapshotId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'snapshotId' + '}', encodeURIComponent(String(snapshotId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiSnapshotView, "ApiSnapshotView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    LegacyBackupApiRequestFactory.prototype.updateLegacySnapshotSchedule = function (groupId, clusterName, snapshotSchedule, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "updateLegacySnapshotSchedule", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "updateLegacySnapshotSchedule", "clusterName");
                        }
                        if (snapshotSchedule === null || snapshotSchedule === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupApi", "updateLegacySnapshotSchedule", "snapshotSchedule");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/snapshotSchedule'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(snapshotSchedule, "SnapshotSchedule", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return LegacyBackupApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.LegacyBackupApiRequestFactory = LegacyBackupApiRequestFactory;
var LegacyBackupApiResponseProcessor = (function () {
    function LegacyBackupApiResponseProcessor() {
    }
    LegacyBackupApiResponseProcessor.prototype.deleteLegacySnapshot = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    LegacyBackupApiResponseProcessor.prototype.getLegacyBackupCheckpoint = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "Checkpoint", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "Checkpoint", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    LegacyBackupApiResponseProcessor.prototype.getLegacyBackupRestoreJob = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiRestoreJobView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ApiRestoreJobView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    LegacyBackupApiResponseProcessor.prototype.getLegacySnapshot = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiSnapshotView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "ApiSnapshotView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    LegacyBackupApiResponseProcessor.prototype.getLegacySnapshotSchedule = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "SnapshotSchedule", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "SnapshotSchedule", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    LegacyBackupApiResponseProcessor.prototype.listLegacyBackupCheckpoints = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedApiAtlasCheckpointView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedApiAtlasCheckpointView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    LegacyBackupApiResponseProcessor.prototype.listLegacyBackupRestoreJobs = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "PaginatedRestoreJobView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "PaginatedRestoreJobView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    LegacyBackupApiResponseProcessor.prototype.listLegacySnapshots = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedSnapshotView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedSnapshotView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    LegacyBackupApiResponseProcessor.prototype.updateLegacySnapshotRetention = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiSnapshotView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "ApiSnapshotView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    LegacyBackupApiResponseProcessor.prototype.updateLegacySnapshotSchedule = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "SnapshotSchedule", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "SnapshotSchedule", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    return LegacyBackupApiResponseProcessor;
}());
exports.LegacyBackupApiResponseProcessor = LegacyBackupApiResponseProcessor;
//# sourceMappingURL=LegacyBackupApi.js.map

/***/ }),

/***/ 99687:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LegacyBackupRestoreJobsApiResponseProcessor = exports.LegacyBackupRestoreJobsApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var LegacyBackupRestoreJobsApiRequestFactory = (function (_super) {
    __extends(LegacyBackupRestoreJobsApiRequestFactory, _super);
    function LegacyBackupRestoreJobsApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LegacyBackupRestoreJobsApiRequestFactory.prototype.createLegacyBackupRestoreJob = function (groupId, clusterName, apiRestoreJobView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupRestoreJobsApi", "createLegacyBackupRestoreJob", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupRestoreJobsApi", "createLegacyBackupRestoreJob", "clusterName");
                        }
                        if (apiRestoreJobView === null || apiRestoreJobView === undefined) {
                            throw new baseapi_1.RequiredError("LegacyBackupRestoreJobsApi", "createLegacyBackupRestoreJob", "apiRestoreJobView");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/restoreJobs'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiRestoreJobView, "ApiRestoreJobView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return LegacyBackupRestoreJobsApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.LegacyBackupRestoreJobsApiRequestFactory = LegacyBackupRestoreJobsApiRequestFactory;
var LegacyBackupRestoreJobsApiResponseProcessor = (function () {
    function LegacyBackupRestoreJobsApiResponseProcessor() {
    }
    LegacyBackupRestoreJobsApiResponseProcessor.prototype.createLegacyBackupRestoreJob = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "PaginatedRestoreJobView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "PaginatedRestoreJobView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    return LegacyBackupRestoreJobsApiResponseProcessor;
}());
exports.LegacyBackupRestoreJobsApiResponseProcessor = LegacyBackupRestoreJobsApiResponseProcessor;
//# sourceMappingURL=LegacyBackupRestoreJobsApi.js.map

/***/ }),

/***/ 60865:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MaintenanceWindowsApiResponseProcessor = exports.MaintenanceWindowsApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var MaintenanceWindowsApiRequestFactory = (function (_super) {
    __extends(MaintenanceWindowsApiRequestFactory, _super);
    function MaintenanceWindowsApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MaintenanceWindowsApiRequestFactory.prototype.deferMaintenanceWindow = function (groupId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MaintenanceWindowsApi", "deferMaintenanceWindow", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/maintenanceWindow/defer'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MaintenanceWindowsApiRequestFactory.prototype.getMaintenanceWindow = function (groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MaintenanceWindowsApi", "getMaintenanceWindow", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/maintenanceWindow'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MaintenanceWindowsApiRequestFactory.prototype.resetMaintenanceWindow = function (groupId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MaintenanceWindowsApi", "resetMaintenanceWindow", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/maintenanceWindow'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MaintenanceWindowsApiRequestFactory.prototype.toggleMaintenanceAutoDefer = function (groupId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MaintenanceWindowsApi", "toggleMaintenanceAutoDefer", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/maintenanceWindow/autoDefer'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MaintenanceWindowsApiRequestFactory.prototype.updateMaintenanceWindow = function (groupId, groupMaintenanceWindow, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MaintenanceWindowsApi", "updateMaintenanceWindow", "groupId");
                        }
                        if (groupMaintenanceWindow === null || groupMaintenanceWindow === undefined) {
                            throw new baseapi_1.RequiredError("MaintenanceWindowsApi", "updateMaintenanceWindow", "groupMaintenanceWindow");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/maintenanceWindow'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(groupMaintenanceWindow, "GroupMaintenanceWindow", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return MaintenanceWindowsApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.MaintenanceWindowsApiRequestFactory = MaintenanceWindowsApiRequestFactory;
var MaintenanceWindowsApiResponseProcessor = (function () {
    function MaintenanceWindowsApiResponseProcessor() {
    }
    MaintenanceWindowsApiResponseProcessor.prototype.deferMaintenanceWindow = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    MaintenanceWindowsApiResponseProcessor.prototype.getMaintenanceWindow = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "GroupMaintenanceWindow", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "GroupMaintenanceWindow", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    MaintenanceWindowsApiResponseProcessor.prototype.resetMaintenanceWindow = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    MaintenanceWindowsApiResponseProcessor.prototype.toggleMaintenanceAutoDefer = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    MaintenanceWindowsApiResponseProcessor.prototype.updateMaintenanceWindow = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    return MaintenanceWindowsApiResponseProcessor;
}());
exports.MaintenanceWindowsApiResponseProcessor = MaintenanceWindowsApiResponseProcessor;
//# sourceMappingURL=MaintenanceWindowsApi.js.map

/***/ }),

/***/ 31735:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MongoDBCloudUsersApiResponseProcessor = exports.MongoDBCloudUsersApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var MongoDBCloudUsersApiRequestFactory = (function (_super) {
    __extends(MongoDBCloudUsersApiRequestFactory, _super);
    function MongoDBCloudUsersApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MongoDBCloudUsersApiRequestFactory.prototype.createUser = function (apiAppUserView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (apiAppUserView === null || apiAppUserView === undefined) {
                            throw new baseapi_1.RequiredError("MongoDBCloudUsersApi", "createUser", "apiAppUserView");
                        }
                        localVarPath = '/api/atlas/v2/users';
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiAppUserView, "ApiAppUserView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MongoDBCloudUsersApiRequestFactory.prototype.getUser = function (userId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (userId === null || userId === undefined) {
                            throw new baseapi_1.RequiredError("MongoDBCloudUsersApi", "getUser", "userId");
                        }
                        localVarPath = '/api/atlas/v2/users/{userId}'
                            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MongoDBCloudUsersApiRequestFactory.prototype.getUserByUsername = function (userName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (userName === null || userName === undefined) {
                            throw new baseapi_1.RequiredError("MongoDBCloudUsersApi", "getUserByUsername", "userName");
                        }
                        localVarPath = '/api/atlas/v2/users/byName/{userName}'
                            .replace('{' + 'userName' + '}', encodeURIComponent(String(userName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return MongoDBCloudUsersApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.MongoDBCloudUsersApiRequestFactory = MongoDBCloudUsersApiRequestFactory;
var MongoDBCloudUsersApiResponseProcessor = (function () {
    function MongoDBCloudUsersApiResponseProcessor() {
    }
    MongoDBCloudUsersApiResponseProcessor.prototype.createUser = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiAppUserView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ApiAppUserView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    MongoDBCloudUsersApiResponseProcessor.prototype.getUser = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiAppUserView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ApiAppUserView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    MongoDBCloudUsersApiResponseProcessor.prototype.getUserByUsername = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiAppUserView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ApiAppUserView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    return MongoDBCloudUsersApiResponseProcessor;
}());
exports.MongoDBCloudUsersApiResponseProcessor = MongoDBCloudUsersApiResponseProcessor;
//# sourceMappingURL=MongoDBCloudUsersApi.js.map

/***/ }),

/***/ 90873:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MonitoringAndLogsApiResponseProcessor = exports.MonitoringAndLogsApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var MonitoringAndLogsApiRequestFactory = (function (_super) {
    __extends(MonitoringAndLogsApiRequestFactory, _super);
    function MonitoringAndLogsApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MonitoringAndLogsApiRequestFactory.prototype.getAtlasProcess = function (groupId, processId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getAtlasProcess", "groupId");
                        }
                        if (processId === null || processId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getAtlasProcess", "processId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/processes/{processId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'processId' + '}', encodeURIComponent(String(processId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MonitoringAndLogsApiRequestFactory.prototype.getDatabase = function (groupId, databaseName, processId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getDatabase", "groupId");
                        }
                        if (databaseName === null || databaseName === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getDatabase", "databaseName");
                        }
                        if (processId === null || processId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getDatabase", "processId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/processes/{processId}/databases/{databaseName}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'databaseName' + '}', encodeURIComponent(String(databaseName)))
                            .replace('{' + 'processId' + '}', encodeURIComponent(String(processId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MonitoringAndLogsApiRequestFactory.prototype.getDatabaseMeasurements = function (groupId, databaseName, processId, envelope, pretty, m, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getDatabaseMeasurements", "groupId");
                        }
                        if (databaseName === null || databaseName === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getDatabaseMeasurements", "databaseName");
                        }
                        if (processId === null || processId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getDatabaseMeasurements", "processId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/processes/{processId}/databases/{databaseName}/measurements'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'databaseName' + '}', encodeURIComponent(String(databaseName)))
                            .replace('{' + 'processId' + '}', encodeURIComponent(String(processId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (m !== undefined) {
                            requestContext.setQueryParam("m", ObjectSerializer_1.ObjectSerializer.serialize(m, "Set<'DATABASE_AVERAGE_OBJECT_SIZE' | 'DATABASE_COLLECTION_COUNT' | 'DATABASE_DATA_SIZE' | 'DATABASE_STORAGE_SIZE' | 'DATABASE_INDEX_SIZE' | 'DATABASE_INDEX_COUNT' | 'DATABASE_EXTENT_COUNT' | 'DATABASE_OBJECT_COUNT' | 'DATABASE_VIEW_COUNT'>", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MonitoringAndLogsApiRequestFactory.prototype.getDiskMeasurements = function (groupId, partitionName, processId, envelope, pretty, m, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getDiskMeasurements", "groupId");
                        }
                        if (partitionName === null || partitionName === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getDiskMeasurements", "partitionName");
                        }
                        if (processId === null || processId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getDiskMeasurements", "processId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/processes/{processId}/disks/{partitionName}/measurements'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'partitionName' + '}', encodeURIComponent(String(partitionName)))
                            .replace('{' + 'processId' + '}', encodeURIComponent(String(processId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (m !== undefined) {
                            requestContext.setQueryParam("m", ObjectSerializer_1.ObjectSerializer.serialize(m, "Set<'DISK_PARTITION_IOPS_READ' | 'MAX_DISK_PARTITION_IOPS_READ' | 'DISK_PARTITION_IOPS_WRITE' | 'MAX_DISK_PARTITION_IOPS_WRITE' | 'DISK_PARTITION_IOPS_TOTAL' | 'MAX_DISK_PARTITION_IOPS_TOTAL' | 'DISK_PARTITION_UTILIZATION' | 'MAX_DISK_PARTITION_UTILIZATION' | 'DISK_PARTITION_LATENCY_READ' | 'MAX_DISK_PARTITION_LATENCY_READ' | 'DISK_PARTITION_LATENCY_WRITE' | 'MAX_DISK_PARTITION_LATENCY_WRITE' | 'DISK_PARTITION_SPACE_FREE' | 'MAX_DISK_PARTITION_SPACE_FREE' | 'DISK_PARTITION_SPACE_USED' | 'MAX_DISK_PARTITION_SPACE_USED' | 'DISK_PARTITION_SPACE_PERCENT_FREE' | 'MAX_DISK_PARTITION_SPACE_PERCENT_FREE' | 'DISK_PARTITION_SPACE_PERCENT_USED' | 'MAX_DISK_PARTITION_SPACE_PERCENT_USED'>", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MonitoringAndLogsApiRequestFactory.prototype.getHostLogs = function (groupId, hostName, logName, endDate, startDate, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getHostLogs", "groupId");
                        }
                        if (hostName === null || hostName === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getHostLogs", "hostName");
                        }
                        if (logName === null || logName === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getHostLogs", "logName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{hostName}/logs/{logName}.gz'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'hostName' + '}', encodeURIComponent(String(hostName)))
                            .replace('{' + 'logName' + '}', encodeURIComponent(String(logName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (endDate !== undefined) {
                            requestContext.setQueryParam("endDate", ObjectSerializer_1.ObjectSerializer.serialize(endDate, "number", "int64"));
                        }
                        if (startDate !== undefined) {
                            requestContext.setQueryParam("startDate", ObjectSerializer_1.ObjectSerializer.serialize(startDate, "number", "int64"));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MonitoringAndLogsApiRequestFactory.prototype.getHostMeasurements = function (groupId, processId, envelope, pretty, m, period, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getHostMeasurements", "groupId");
                        }
                        if (processId === null || processId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getHostMeasurements", "processId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/processes/{processId}/measurements'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'processId' + '}', encodeURIComponent(String(processId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (m !== undefined) {
                            requestContext.setQueryParam("m", ObjectSerializer_1.ObjectSerializer.serialize(m, "Set<'ASSERT_MSG' | 'ASSERT_REGULAR' | 'ASSERT_USER' | 'ASSERT_WARNING' | 'BACKGROUND_FLUSH_AVG' | 'CACHE_BYTES_READ_INTO' | 'CACHE_BYTES_WRITTEN_FROM' | 'CACHE_DIRTY_BYTES' | 'CACHE_USED_BYTES' | 'COMPUTED_MEMORY' | 'CONNECTIONS' | 'CURSORS_TOTAL_OPEN' | 'CURSORS_TOTAL_TIMED_OUT' | 'DB_DATA_SIZE_TOTAL' | 'DB_STORAGE_TOTAL' | 'DOCUMENT_METRICS_DELETED' | 'DOCUMENT_METRICS_INSERTED' | 'DOCUMENT_METRICS_RETURNED' | 'DOCUMENT_METRICS_UPDATED' | 'EXTRA_INFO_PAGE_FAULTS' | 'FTS_DISK_UTILIZATION' | 'FTS_MEMORY_MAPPED' | 'FTS_MEMORY_RESIDENT' | 'FTS_MEMORY_VIRTUAL' | 'FTS_PROCESS_CPU_KERNEL' | 'FTS_PROCESS_CPU_USER' | 'FTS_PROCESS_NORMALIZED_CPU_KERNEL' | 'FTS_PROCESS_NORMALIZED_CPU_USER' | 'GLOBAL_ACCESSES_NOT_IN_MEMORY' | 'GLOBAL_LOCK_CURRENT_QUEUE_READERS' | 'GLOBAL_LOCK_CURRENT_QUEUE_TOTAL' | 'GLOBAL_LOCK_CURRENT_QUEUE_WRITERS' | 'GLOBAL_PAGE_FAULT_EXCEPTIONS_THROWN' | 'INDEX_COUNTERS_BTREE_ACCESSES' | 'INDEX_COUNTERS_BTREE_HITS' | 'INDEX_COUNTERS_BTREE_MISS_RATIO' | 'INDEX_COUNTERS_BTREE_MISSES' | 'JOURNALING_COMMITS_IN_WRITE_LOCK' | 'JOURNALING_MB' | 'JOURNALING_WRITE_DATA_FILES_MB' | 'MAX_PROCESS_CPU_CHILDREN_KERNEL' | 'MAX_PROCESS_CPU_CHILDREN_USER' | 'MAX_PROCESS_CPU_KERNEL' | 'MAX_PROCESS_CPU_USER' | 'MAX_PROCESS_NORMALIZED_CPU_CHILDREN_KERNEL' | 'MAX_PROCESS_NORMALIZED_CPU_CHILDREN_USER' | 'MAX_PROCESS_NORMALIZED_CPU_KERNEL' | 'MAX_PROCESS_NORMALIZED_CPU_USER' | 'MAX_SWAP_USAGE_FREE' | 'MAX_SWAP_USAGE_USED ' | 'MAX_SYSTEM_CPU_GUEST' | 'MAX_SYSTEM_CPU_IOWAIT' | 'MAX_SYSTEM_CPU_IRQ' | 'MAX_SYSTEM_CPU_KERNEL' | 'MAX_SYSTEM_CPU_SOFTIRQ' | 'MAX_SYSTEM_CPU_STEAL' | 'MAX_SYSTEM_CPU_USER' | 'MAX_SYSTEM_MEMORY_AVAILABLE' | 'MAX_SYSTEM_MEMORY_FREE' | 'MAX_SYSTEM_MEMORY_USED' | 'MAX_SYSTEM_NETWORK_IN' | 'MAX_SYSTEM_NETWORK_OUT' | 'MAX_SYSTEM_NORMALIZED_CPU_GUEST' | 'MAX_SYSTEM_NORMALIZED_CPU_IOWAIT' | 'MAX_SYSTEM_NORMALIZED_CPU_IRQ' | 'MAX_SYSTEM_NORMALIZED_CPU_KERNEL' | 'MAX_SYSTEM_NORMALIZED_CPU_NICE' | 'MAX_SYSTEM_NORMALIZED_CPU_SOFTIRQ' | 'MAX_SYSTEM_NORMALIZED_CPU_STEAL' | 'MAX_SYSTEM_NORMALIZED_CPU_USER' | 'MEMORY_MAPPED' | 'MEMORY_RESIDENT' | 'MEMORY_VIRTUAL' | 'NETWORK_BYTES_IN' | 'NETWORK_BYTES_OUT' | 'NETWORK_NUM_REQUESTS' | 'OP_EXECUTION_TIME_COMMANDS' | 'OP_EXECUTION_TIME_READS' | 'OP_EXECUTION_TIME_WRITES' | 'OPCOUNTER_CMD' | 'OPCOUNTER_DELETE' | 'OPCOUNTER_GETMORE' | 'OPCOUNTER_INSERT' | 'OPCOUNTER_QUERY' | 'OPCOUNTER_REPL_CMD' | 'OPCOUNTER_REPL_DELETE' | 'OPCOUNTER_REPL_INSERT' | 'OPCOUNTER_REPL_UPDATE' | 'OPCOUNTER_UPDATE' | 'OPERATIONS_SCAN_AND_ORDER' | 'OPLOG_MASTER_LAG_TIME_DIFF' | 'OPLOG_MASTER_TIME' | 'OPLOG_RATE_GB_PER_HOUR' | 'OPLOG_SLAVE_LAG_MASTER_TIME' | 'OPLOG_REPLICATION_LAG' | 'PROCESS_CPU_CHILDREN_KERNEL' | 'PROCESS_CPU_CHILDREN_USER' | 'PROCESS_CPU_KERNEL' | 'PROCESS_CPU_USER' | 'PROCESS_NORMALIZED_CPU_CHILDREN_KERNEL' | 'PROCESS_NORMALIZED_CPU_CHILDREN_USER' | 'PROCESS_NORMALIZED_CPU_KERNEL' | 'PROCESS_NORMALIZED_CPU_USER' | 'QUERY_EXECUTOR_SCANNED' | 'QUERY_EXECUTOR_SCANNED_OBJECTS' | 'QUERY_TARGETING_SCANNED_OBJECTS_PER_RETURNED' | 'QUERY_TARGETING_SCANNED_PER_RETURNED' | 'RESTARTS_IN_LAST_HOUR' | 'SWAP_USAGE_FREE' | 'SWAP_USAGE_USED' | 'SYSTEM_CPU_GUEST' | 'SYSTEM_CPU_IOWAIT' | 'SYSTEM_CPU_IRQ' | 'SYSTEM_CPU_KERNEL' | 'SYSTEM_CPU_NICE' | 'SYSTEM_CPU_SOFTIRQ' | 'SYSTEM_CPU_STEAL' | 'SYSTEM_CPU_USER' | 'SYSTEM_MEMORY_AVAILABLE' | 'SYSTEM_MEMORY_FREE' | 'SYSTEM_MEMORY_USED' | 'SYSTEM_NETWORK_IN' | 'SYSTEM_NETWORK_OUT' | 'SYSTEM_NORMALIZED_CPU_GUEST' | 'SYSTEM_NORMALIZED_CPU_IOWAIT' | 'SYSTEM_NORMALIZED_CPU_IRQ' | 'SYSTEM_NORMALIZED_CPU_KERNEL' | 'SYSTEM_NORMALIZED_CPU_NICE' | 'SYSTEM_NORMALIZED_CPU_SOFTIRQ' | 'SYSTEM_NORMALIZED_CPU_STEAL' | 'SYSTEM_NORMALIZED_CPU_USER' | 'TICKETS_AVAILABLE_READS' | 'TICKETS_AVAILABLE_WRITE'>", ""));
                        }
                        if (period !== undefined) {
                            requestContext.setQueryParam("period", ObjectSerializer_1.ObjectSerializer.serialize(period, "Date", "date-time"));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MonitoringAndLogsApiRequestFactory.prototype.getIndexMetrics = function (processId, indexName, databaseName, collectionName, groupId, granularity, metrics, period, start, end, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (processId === null || processId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getIndexMetrics", "processId");
                        }
                        if (indexName === null || indexName === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getIndexMetrics", "indexName");
                        }
                        if (databaseName === null || databaseName === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getIndexMetrics", "databaseName");
                        }
                        if (collectionName === null || collectionName === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getIndexMetrics", "collectionName");
                        }
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getIndexMetrics", "groupId");
                        }
                        if (granularity === null || granularity === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getIndexMetrics", "granularity");
                        }
                        if (metrics === null || metrics === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getIndexMetrics", "metrics");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/hosts/{processId}/fts/metrics/indexes/{databaseName}/{collectionName}/{indexName}/measurements'
                            .replace('{' + 'processId' + '}', encodeURIComponent(String(processId)))
                            .replace('{' + 'indexName' + '}', encodeURIComponent(String(indexName)))
                            .replace('{' + 'databaseName' + '}', encodeURIComponent(String(databaseName)))
                            .replace('{' + 'collectionName' + '}', encodeURIComponent(String(collectionName)))
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (granularity !== undefined) {
                            requestContext.setQueryParam("granularity", ObjectSerializer_1.ObjectSerializer.serialize(granularity, "string", ""));
                        }
                        if (period !== undefined) {
                            requestContext.setQueryParam("period", ObjectSerializer_1.ObjectSerializer.serialize(period, "string", ""));
                        }
                        if (start !== undefined) {
                            requestContext.setQueryParam("start", ObjectSerializer_1.ObjectSerializer.serialize(start, "Date", "date-time"));
                        }
                        if (end !== undefined) {
                            requestContext.setQueryParam("end", ObjectSerializer_1.ObjectSerializer.serialize(end, "Date", "date-time"));
                        }
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (metrics !== undefined) {
                            requestContext.setQueryParam("metrics", ObjectSerializer_1.ObjectSerializer.serialize(metrics, "Set<'INDEX_SIZE_ON_DISK' | 'NUMBER_OF_DELETES' | 'NUMBER_OF_ERROR_QUERIES' | 'NUMBER_OF_GETMORE_COMMANDS' | 'NUMBER_OF_INDEX_FIELDS' | 'NUMBER_OF_INSERTS' | 'NUMBER_OF_SUCCESS_QUERIES' | 'NUMBER_OF_UPDATES' | 'REPLICATION_LAG' | 'TOTAL_NUMBER_OF_QUERIES'>", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MonitoringAndLogsApiRequestFactory.prototype.getMeasurements = function (processId, groupId, granularity, metrics, period, start, end, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (processId === null || processId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getMeasurements", "processId");
                        }
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getMeasurements", "groupId");
                        }
                        if (granularity === null || granularity === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getMeasurements", "granularity");
                        }
                        if (metrics === null || metrics === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "getMeasurements", "metrics");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/hosts/{processId}/fts/metrics/measurements'
                            .replace('{' + 'processId' + '}', encodeURIComponent(String(processId)))
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (granularity !== undefined) {
                            requestContext.setQueryParam("granularity", ObjectSerializer_1.ObjectSerializer.serialize(granularity, "string", ""));
                        }
                        if (period !== undefined) {
                            requestContext.setQueryParam("period", ObjectSerializer_1.ObjectSerializer.serialize(period, "string", ""));
                        }
                        if (start !== undefined) {
                            requestContext.setQueryParam("start", ObjectSerializer_1.ObjectSerializer.serialize(start, "Date", "date-time"));
                        }
                        if (end !== undefined) {
                            requestContext.setQueryParam("end", ObjectSerializer_1.ObjectSerializer.serialize(end, "Date", "date-time"));
                        }
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (metrics !== undefined) {
                            requestContext.setQueryParam("metrics", ObjectSerializer_1.ObjectSerializer.serialize(metrics, "Set<'FTS_DISK_USAGE' | 'FTS_PROCESS_CPU_KERNEL' | 'FTS_PROCESS_CPU_USER' | 'FTS_PROCESS_NORMALIZED_CPU_KERNEL' | 'FTS_PROCESS_NORMALIZED_CPU_USER' | 'FTS_PROCESS_RESIDENT_MEMORY' | 'FTS_PROCESS_SHARED_MEMORY' | 'FTS_PROCESS_VIRTUAL_MEMORY' | 'JVM_CURRENT_MEMORY' | 'JVM_MAX_MEMORY'>", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MonitoringAndLogsApiRequestFactory.prototype.listAtlasProcesses = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "listAtlasProcesses", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/processes'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MonitoringAndLogsApiRequestFactory.prototype.listDatabases = function (groupId, processId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "listDatabases", "groupId");
                        }
                        if (processId === null || processId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "listDatabases", "processId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/processes/{processId}/databases'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'processId' + '}', encodeURIComponent(String(processId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MonitoringAndLogsApiRequestFactory.prototype.listDiskMeasurements = function (partitionName, groupId, processId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (partitionName === null || partitionName === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "listDiskMeasurements", "partitionName");
                        }
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "listDiskMeasurements", "groupId");
                        }
                        if (processId === null || processId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "listDiskMeasurements", "processId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/processes/{processId}/disks/{partitionName}'
                            .replace('{' + 'partitionName' + '}', encodeURIComponent(String(partitionName)))
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'processId' + '}', encodeURIComponent(String(processId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MonitoringAndLogsApiRequestFactory.prototype.listDiskPartitions = function (groupId, processId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "listDiskPartitions", "groupId");
                        }
                        if (processId === null || processId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "listDiskPartitions", "processId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/processes/{processId}/disks'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'processId' + '}', encodeURIComponent(String(processId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MonitoringAndLogsApiRequestFactory.prototype.listIndexMetrics = function (processId, databaseName, collectionName, groupId, granularity, metrics, period, start, end, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (processId === null || processId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "listIndexMetrics", "processId");
                        }
                        if (databaseName === null || databaseName === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "listIndexMetrics", "databaseName");
                        }
                        if (collectionName === null || collectionName === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "listIndexMetrics", "collectionName");
                        }
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "listIndexMetrics", "groupId");
                        }
                        if (granularity === null || granularity === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "listIndexMetrics", "granularity");
                        }
                        if (metrics === null || metrics === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "listIndexMetrics", "metrics");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/hosts/{processId}/fts/metrics/indexes/{databaseName}/{collectionName}/measurements'
                            .replace('{' + 'processId' + '}', encodeURIComponent(String(processId)))
                            .replace('{' + 'databaseName' + '}', encodeURIComponent(String(databaseName)))
                            .replace('{' + 'collectionName' + '}', encodeURIComponent(String(collectionName)))
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (granularity !== undefined) {
                            requestContext.setQueryParam("granularity", ObjectSerializer_1.ObjectSerializer.serialize(granularity, "string", ""));
                        }
                        if (period !== undefined) {
                            requestContext.setQueryParam("period", ObjectSerializer_1.ObjectSerializer.serialize(period, "string", ""));
                        }
                        if (start !== undefined) {
                            requestContext.setQueryParam("start", ObjectSerializer_1.ObjectSerializer.serialize(start, "Date", "date-time"));
                        }
                        if (end !== undefined) {
                            requestContext.setQueryParam("end", ObjectSerializer_1.ObjectSerializer.serialize(end, "Date", "date-time"));
                        }
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (metrics !== undefined) {
                            requestContext.setQueryParam("metrics", ObjectSerializer_1.ObjectSerializer.serialize(metrics, "Set<'INDEX_SIZE_ON_DISK' | 'NUMBER_OF_DELETES' | 'NUMBER_OF_ERROR_QUERIES' | 'NUMBER_OF_GETMORE_COMMANDS' | 'NUMBER_OF_INDEX_FIELDS' | 'NUMBER_OF_INSERTS' | 'NUMBER_OF_SUCCESS_QUERIES' | 'NUMBER_OF_UPDATES' | 'REPLICATION_LAG' | 'TOTAL_NUMBER_OF_QUERIES'>", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MonitoringAndLogsApiRequestFactory.prototype.listMetricTypes = function (processId, groupId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (processId === null || processId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "listMetricTypes", "processId");
                        }
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MonitoringAndLogsApi", "listMetricTypes", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/hosts/{processId}/fts/metrics'
                            .replace('{' + 'processId' + '}', encodeURIComponent(String(processId)))
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return MonitoringAndLogsApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.MonitoringAndLogsApiRequestFactory = MonitoringAndLogsApiRequestFactory;
var MonitoringAndLogsApiResponseProcessor = (function () {
    function MonitoringAndLogsApiResponseProcessor() {
    }
    MonitoringAndLogsApiResponseProcessor.prototype.getAtlasProcess = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiHostViewAtlas", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "ApiHostViewAtlas", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    MonitoringAndLogsApiResponseProcessor.prototype.getDatabase = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiDatabaseView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "ApiDatabaseView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    MonitoringAndLogsApiResponseProcessor.prototype.getDatabaseMeasurements = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiMeasurementsGeneralViewAtlas", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "ApiMeasurementsGeneralViewAtlas", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    MonitoringAndLogsApiResponseProcessor.prototype.getDiskMeasurements = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiMeasurementsGeneralViewAtlas", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "ApiMeasurementsGeneralViewAtlas", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    MonitoringAndLogsApiResponseProcessor.prototype.getHostLogs = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        return [4, response.getBodyAsFile()];
                    case 1:
                        body = _6.sent();
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "ApiError", "binary"]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", "binary"]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 8];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", "binary"]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 10];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", "binary"]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 12];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", "binary"]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 12:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 14];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", "binary"]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 14:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 16];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 15:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "HttpFile", "binary"]);
                        return [2, body];
                    case 16:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 17: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    MonitoringAndLogsApiResponseProcessor.prototype.getHostMeasurements = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiMeasurementsGeneralViewAtlas", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "ApiMeasurementsGeneralViewAtlas", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    MonitoringAndLogsApiResponseProcessor.prototype.getIndexMetrics = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiMeasurementsIndexesView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ApiMeasurementsIndexesView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    MonitoringAndLogsApiResponseProcessor.prototype.getMeasurements = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiMeasurementsNonIndexView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ApiMeasurementsNonIndexView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    MonitoringAndLogsApiResponseProcessor.prototype.listAtlasProcesses = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedHostViewAtlas", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedHostViewAtlas", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    MonitoringAndLogsApiResponseProcessor.prototype.listDatabases = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedDatabaseView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedDatabaseView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    MonitoringAndLogsApiResponseProcessor.prototype.listDiskMeasurements = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiDiskPartitionView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "ApiDiskPartitionView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    MonitoringAndLogsApiResponseProcessor.prototype.listDiskPartitions = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedDiskPartitionView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedDiskPartitionView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    MonitoringAndLogsApiResponseProcessor.prototype.listIndexMetrics = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiMeasurementsIndexesView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ApiMeasurementsIndexesView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    MonitoringAndLogsApiResponseProcessor.prototype.listMetricTypes = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiFTSMetricsView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ApiFTSMetricsView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    return MonitoringAndLogsApiResponseProcessor;
}());
exports.MonitoringAndLogsApiResponseProcessor = MonitoringAndLogsApiResponseProcessor;
//# sourceMappingURL=MonitoringAndLogsApi.js.map

/***/ }),

/***/ 12458:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MultiCloudClustersApiResponseProcessor = exports.MultiCloudClustersApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var MultiCloudClustersApiRequestFactory = (function (_super) {
    __extends(MultiCloudClustersApiRequestFactory, _super);
    function MultiCloudClustersApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MultiCloudClustersApiRequestFactory.prototype.createCluster = function (groupId, clusterDescriptionV15, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MultiCloudClustersApi", "createCluster", "groupId");
                        }
                        if (clusterDescriptionV15 === null || clusterDescriptionV15 === undefined) {
                            throw new baseapi_1.RequiredError("MultiCloudClustersApi", "createCluster", "clusterDescriptionV15");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-02-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(clusterDescriptionV15, "ClusterDescriptionV15", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MultiCloudClustersApiRequestFactory.prototype.deleteCluster = function (groupId, clusterName, envelope, retainBackups, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MultiCloudClustersApi", "deleteCluster", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("MultiCloudClustersApi", "deleteCluster", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (retainBackups !== undefined) {
                            requestContext.setQueryParam("retainBackups", ObjectSerializer_1.ObjectSerializer.serialize(retainBackups, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MultiCloudClustersApiRequestFactory.prototype.getCluster = function (groupId, clusterName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MultiCloudClustersApi", "getCluster", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("MultiCloudClustersApi", "getCluster", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MultiCloudClustersApiRequestFactory.prototype.listClusters = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MultiCloudClustersApi", "listClusters", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MultiCloudClustersApiRequestFactory.prototype.testFailover = function (groupId, clusterName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MultiCloudClustersApi", "testFailover", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("MultiCloudClustersApi", "testFailover", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/restartPrimaries'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    MultiCloudClustersApiRequestFactory.prototype.updateCluster = function (groupId, clusterName, clusterDescriptionV15, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("MultiCloudClustersApi", "updateCluster", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("MultiCloudClustersApi", "updateCluster", "clusterName");
                        }
                        if (clusterDescriptionV15 === null || clusterDescriptionV15 === undefined) {
                            throw new baseapi_1.RequiredError("MultiCloudClustersApi", "updateCluster", "clusterDescriptionV15");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-02-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(clusterDescriptionV15, "ClusterDescriptionV15", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return MultiCloudClustersApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.MultiCloudClustersApiRequestFactory = MultiCloudClustersApiRequestFactory;
var MultiCloudClustersApiResponseProcessor = (function () {
    function MultiCloudClustersApiResponseProcessor() {
    }
    MultiCloudClustersApiResponseProcessor.prototype.createCluster = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, body, _4, _5, _6, _7, _8, _9;
            return __generator(this, function (_10) {
                switch (_10.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("201", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_10.sent(), contentType]),
                            "ClusterDescriptionV15", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("402", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Payment Required", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 12:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 14:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 16];
                        _5 = (_4 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _7 = (_6 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 15:
                        body = _5.apply(_4, [_7.apply(_6, [_10.sent(), contentType]),
                            "ClusterDescriptionV15", ""]);
                        return [2, body];
                    case 16:
                        _8 = exception_1.ApiException.bind;
                        _9 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 17: throw new (_8.apply(exception_1.ApiException, _9.concat([_10.sent(), response.headers])))();
                }
            });
        });
    };
    MultiCloudClustersApiResponseProcessor.prototype.deleteCluster = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    MultiCloudClustersApiResponseProcessor.prototype.getCluster = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ClusterDescriptionV15", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "ClusterDescriptionV15", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    MultiCloudClustersApiResponseProcessor.prototype.listClusters = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedClusterDescriptionV15View", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedClusterDescriptionV15View", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    MultiCloudClustersApiResponseProcessor.prototype.testFailover = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, _o, _p;
            return __generator(this, function (_q) {
                switch (_q.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_q.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_q.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_q.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 6:
                        _o = exception_1.ApiException.bind;
                        _p = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 7: throw new (_o.apply(exception_1.ApiException, _p.concat([_q.sent(), response.headers])))();
                }
            });
        });
    };
    MultiCloudClustersApiResponseProcessor.prototype.updateCluster = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "ClusterDescriptionV15", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "ClusterDescriptionV15", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    return MultiCloudClustersApiResponseProcessor;
}());
exports.MultiCloudClustersApiResponseProcessor = MultiCloudClustersApiResponseProcessor;
//# sourceMappingURL=MultiCloudClustersApi.js.map

/***/ }),

/***/ 24201:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NetworkPeeringApiResponseProcessor = exports.NetworkPeeringApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var NetworkPeeringApiRequestFactory = (function (_super) {
    __extends(NetworkPeeringApiRequestFactory, _super);
    function NetworkPeeringApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NetworkPeeringApiRequestFactory.prototype.createPeeringConnection = function (groupId, apiAtlasContainerPeerViewRequest, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "createPeeringConnection", "groupId");
                        }
                        if (apiAtlasContainerPeerViewRequest === null || apiAtlasContainerPeerViewRequest === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "createPeeringConnection", "apiAtlasContainerPeerViewRequest");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/peers'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiAtlasContainerPeerViewRequest, "ApiAtlasContainerPeerViewRequest", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    NetworkPeeringApiRequestFactory.prototype.createPeeringContainer = function (groupId, cloudProviderContainer, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "createPeeringContainer", "groupId");
                        }
                        if (cloudProviderContainer === null || cloudProviderContainer === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "createPeeringContainer", "cloudProviderContainer");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/containers'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(cloudProviderContainer, "CloudProviderContainer", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    NetworkPeeringApiRequestFactory.prototype.deletePeeringConnection = function (groupId, peerId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "deletePeeringConnection", "groupId");
                        }
                        if (peerId === null || peerId === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "deletePeeringConnection", "peerId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/peers/{peerId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'peerId' + '}', encodeURIComponent(String(peerId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    NetworkPeeringApiRequestFactory.prototype.deletePeeringContainer = function (groupId, containerId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "deletePeeringContainer", "groupId");
                        }
                        if (containerId === null || containerId === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "deletePeeringContainer", "containerId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/containers/{containerId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'containerId' + '}', encodeURIComponent(String(containerId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    NetworkPeeringApiRequestFactory.prototype.disablePeering = function (groupId, privateIPModeView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "disablePeering", "groupId");
                        }
                        if (privateIPModeView === null || privateIPModeView === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "disablePeering", "privateIPModeView");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/privateIpMode'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(privateIPModeView, "PrivateIPModeView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    NetworkPeeringApiRequestFactory.prototype.getPeeringConnection = function (groupId, peerId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "getPeeringConnection", "groupId");
                        }
                        if (peerId === null || peerId === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "getPeeringConnection", "peerId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/peers/{peerId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'peerId' + '}', encodeURIComponent(String(peerId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    NetworkPeeringApiRequestFactory.prototype.getPeeringContainer = function (groupId, containerId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "getPeeringContainer", "groupId");
                        }
                        if (containerId === null || containerId === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "getPeeringContainer", "containerId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/containers/{containerId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'containerId' + '}', encodeURIComponent(String(containerId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    NetworkPeeringApiRequestFactory.prototype.listPeeringConnections = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, providerName, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "listPeeringConnections", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/peers'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (providerName !== undefined) {
                            requestContext.setQueryParam("providerName", ObjectSerializer_1.ObjectSerializer.serialize(providerName, "'AWS' | 'AZURE' | 'GCP'", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    NetworkPeeringApiRequestFactory.prototype.listPeeringContainerByCloudProvider = function (groupId, providerName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "listPeeringContainerByCloudProvider", "groupId");
                        }
                        if (providerName === null || providerName === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "listPeeringContainerByCloudProvider", "providerName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/containers'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (providerName !== undefined) {
                            requestContext.setQueryParam("providerName", ObjectSerializer_1.ObjectSerializer.serialize(providerName, "'AWS' | 'AZURE' | 'GCP'", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    NetworkPeeringApiRequestFactory.prototype.listPeeringContainers = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "listPeeringContainers", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/containers/all'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    NetworkPeeringApiRequestFactory.prototype.updatePeeringConnection = function (groupId, peerId, apiAtlasContainerPeerViewRequest, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "updatePeeringConnection", "groupId");
                        }
                        if (peerId === null || peerId === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "updatePeeringConnection", "peerId");
                        }
                        if (apiAtlasContainerPeerViewRequest === null || apiAtlasContainerPeerViewRequest === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "updatePeeringConnection", "apiAtlasContainerPeerViewRequest");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/peers/{peerId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'peerId' + '}', encodeURIComponent(String(peerId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiAtlasContainerPeerViewRequest, "ApiAtlasContainerPeerViewRequest", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    NetworkPeeringApiRequestFactory.prototype.updatePeeringContainer = function (groupId, containerId, cloudProviderContainer, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "updatePeeringContainer", "groupId");
                        }
                        if (containerId === null || containerId === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "updatePeeringContainer", "containerId");
                        }
                        if (cloudProviderContainer === null || cloudProviderContainer === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "updatePeeringContainer", "cloudProviderContainer");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/containers/{containerId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'containerId' + '}', encodeURIComponent(String(containerId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(cloudProviderContainer, "CloudProviderContainer", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    NetworkPeeringApiRequestFactory.prototype.verifyConnectViaPeeringOnlyModeForOneProject = function (groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("NetworkPeeringApi", "verifyConnectViaPeeringOnlyModeForOneProject", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/privateIpMode'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return NetworkPeeringApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.NetworkPeeringApiRequestFactory = NetworkPeeringApiRequestFactory;
var NetworkPeeringApiResponseProcessor = (function () {
    function NetworkPeeringApiResponseProcessor() {
    }
    NetworkPeeringApiResponseProcessor.prototype.createPeeringConnection = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "CreatePeeringConnection200Response", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "CreatePeeringConnection200Response", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    NetworkPeeringApiResponseProcessor.prototype.createPeeringContainer = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, body, _4, _5, _6, _7, _8, _9;
            return __generator(this, function (_10) {
                switch (_10.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_10.sent(), contentType]),
                            "CloudProviderContainer", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 12:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 14:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 16];
                        _5 = (_4 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _7 = (_6 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 15:
                        body = _5.apply(_4, [_7.apply(_6, [_10.sent(), contentType]),
                            "CloudProviderContainer", ""]);
                        return [2, body];
                    case 16:
                        _8 = exception_1.ApiException.bind;
                        _9 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 17: throw new (_8.apply(exception_1.ApiException, _9.concat([_10.sent(), response.headers])))();
                }
            });
        });
    };
    NetworkPeeringApiResponseProcessor.prototype.deletePeeringConnection = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("202", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    NetworkPeeringApiResponseProcessor.prototype.deletePeeringContainer = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    NetworkPeeringApiResponseProcessor.prototype.disablePeering = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "PrivateIPModeView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "PrivateIPModeView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    NetworkPeeringApiResponseProcessor.prototype.getPeeringConnection = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "GetPeeringConnection200Response", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "GetPeeringConnection200Response", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    NetworkPeeringApiResponseProcessor.prototype.getPeeringContainer = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "CloudProviderContainer", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "CloudProviderContainer", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    NetworkPeeringApiResponseProcessor.prototype.listPeeringConnections = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ListPeeringConnections200Response", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ListPeeringConnections200Response", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    NetworkPeeringApiResponseProcessor.prototype.listPeeringContainerByCloudProvider = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "PaginatedCloudProviderContainerView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "PaginatedCloudProviderContainerView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    NetworkPeeringApiResponseProcessor.prototype.listPeeringContainers = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedCloudProviderContainerView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedCloudProviderContainerView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    NetworkPeeringApiResponseProcessor.prototype.updatePeeringConnection = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "GetPeeringConnection200Response", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "GetPeeringConnection200Response", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    NetworkPeeringApiResponseProcessor.prototype.updatePeeringContainer = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, body, _4, _5, _6, _7, _8, _9;
            return __generator(this, function (_10) {
                switch (_10.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_10.sent(), contentType]),
                            "CloudProviderContainer", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 12:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 14:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 16];
                        _5 = (_4 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _7 = (_6 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 15:
                        body = _5.apply(_4, [_7.apply(_6, [_10.sent(), contentType]),
                            "CloudProviderContainer", ""]);
                        return [2, body];
                    case 16:
                        _8 = exception_1.ApiException.bind;
                        _9 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 17: throw new (_8.apply(exception_1.ApiException, _9.concat([_10.sent(), response.headers])))();
                }
            });
        });
    };
    NetworkPeeringApiResponseProcessor.prototype.verifyConnectViaPeeringOnlyModeForOneProject = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PrivateIPModeView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PrivateIPModeView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    return NetworkPeeringApiResponseProcessor;
}());
exports.NetworkPeeringApiResponseProcessor = NetworkPeeringApiResponseProcessor;
//# sourceMappingURL=NetworkPeeringApi.js.map

/***/ }),

/***/ 56766:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OnlineArchiveApiResponseProcessor = exports.OnlineArchiveApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var OnlineArchiveApiRequestFactory = (function (_super) {
    __extends(OnlineArchiveApiRequestFactory, _super);
    function OnlineArchiveApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OnlineArchiveApiRequestFactory.prototype.createOnlineArchive = function (groupId, clusterName, onlineArchive, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("OnlineArchiveApi", "createOnlineArchive", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("OnlineArchiveApi", "createOnlineArchive", "clusterName");
                        }
                        if (onlineArchive === null || onlineArchive === undefined) {
                            throw new baseapi_1.RequiredError("OnlineArchiveApi", "createOnlineArchive", "onlineArchive");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/onlineArchives'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(onlineArchive, "OnlineArchive", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    OnlineArchiveApiRequestFactory.prototype.deleteOnlineArchive = function (groupId, archiveId, clusterName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("OnlineArchiveApi", "deleteOnlineArchive", "groupId");
                        }
                        if (archiveId === null || archiveId === undefined) {
                            throw new baseapi_1.RequiredError("OnlineArchiveApi", "deleteOnlineArchive", "archiveId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("OnlineArchiveApi", "deleteOnlineArchive", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/onlineArchives/{archiveId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'archiveId' + '}', encodeURIComponent(String(archiveId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    OnlineArchiveApiRequestFactory.prototype.downloadOnlineArchiveQueryLogs = function (groupId, clusterName, envelope, startDate, endDate, archiveOnly, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("OnlineArchiveApi", "downloadOnlineArchiveQueryLogs", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("OnlineArchiveApi", "downloadOnlineArchiveQueryLogs", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/onlineArchives/queryLogs.gz'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (startDate !== undefined) {
                            requestContext.setQueryParam("startDate", ObjectSerializer_1.ObjectSerializer.serialize(startDate, "number", "int64"));
                        }
                        if (endDate !== undefined) {
                            requestContext.setQueryParam("endDate", ObjectSerializer_1.ObjectSerializer.serialize(endDate, "number", "int64"));
                        }
                        if (archiveOnly !== undefined) {
                            requestContext.setQueryParam("archiveOnly", ObjectSerializer_1.ObjectSerializer.serialize(archiveOnly, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    OnlineArchiveApiRequestFactory.prototype.getOnlineArchive = function (groupId, archiveId, clusterName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("OnlineArchiveApi", "getOnlineArchive", "groupId");
                        }
                        if (archiveId === null || archiveId === undefined) {
                            throw new baseapi_1.RequiredError("OnlineArchiveApi", "getOnlineArchive", "archiveId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("OnlineArchiveApi", "getOnlineArchive", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/onlineArchives/{archiveId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'archiveId' + '}', encodeURIComponent(String(archiveId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    OnlineArchiveApiRequestFactory.prototype.listOnlineArchives = function (groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("OnlineArchiveApi", "listOnlineArchives", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("OnlineArchiveApi", "listOnlineArchives", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/onlineArchives'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    OnlineArchiveApiRequestFactory.prototype.updateOnlineArchive = function (groupId, archiveId, clusterName, onlineArchive, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("OnlineArchiveApi", "updateOnlineArchive", "groupId");
                        }
                        if (archiveId === null || archiveId === undefined) {
                            throw new baseapi_1.RequiredError("OnlineArchiveApi", "updateOnlineArchive", "archiveId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("OnlineArchiveApi", "updateOnlineArchive", "clusterName");
                        }
                        if (onlineArchive === null || onlineArchive === undefined) {
                            throw new baseapi_1.RequiredError("OnlineArchiveApi", "updateOnlineArchive", "onlineArchive");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/onlineArchives/{archiveId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'archiveId' + '}', encodeURIComponent(String(archiveId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(onlineArchive, "OnlineArchive", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return OnlineArchiveApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.OnlineArchiveApiRequestFactory = OnlineArchiveApiRequestFactory;
var OnlineArchiveApiResponseProcessor = (function () {
    function OnlineArchiveApiResponseProcessor() {
    }
    OnlineArchiveApiResponseProcessor.prototype.createOnlineArchive = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "OnlineArchive", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "OnlineArchive", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    OnlineArchiveApiResponseProcessor.prototype.deleteOnlineArchive = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    OnlineArchiveApiResponseProcessor.prototype.downloadOnlineArchiveQueryLogs = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        return [4, response.getBodyAsFile()];
                    case 1:
                        body = _y.sent();
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiError", "binary"]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", "binary"]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", "binary"]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", "binary"]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "HttpFile", "binary"]);
                        return [2, body];
                    case 12:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    OnlineArchiveApiResponseProcessor.prototype.getOnlineArchive = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "OnlineArchive", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "OnlineArchive", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    OnlineArchiveApiResponseProcessor.prototype.listOnlineArchives = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedOnlineArchiveView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedOnlineArchiveView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    OnlineArchiveApiResponseProcessor.prototype.updateOnlineArchive = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "OnlineArchive", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "OnlineArchive", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    return OnlineArchiveApiResponseProcessor;
}());
exports.OnlineArchiveApiResponseProcessor = OnlineArchiveApiResponseProcessor;
//# sourceMappingURL=OnlineArchiveApi.js.map

/***/ }),

/***/ 56642:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OrganizationsApiResponseProcessor = exports.OrganizationsApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var OrganizationsApiRequestFactory = (function (_super) {
    __extends(OrganizationsApiRequestFactory, _super);
    function OrganizationsApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OrganizationsApiRequestFactory.prototype.createOrganization = function (createOrganizationRequest, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (createOrganizationRequest === null || createOrganizationRequest === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "createOrganization", "createOrganizationRequest");
                        }
                        localVarPath = '/api/atlas/v2/orgs';
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(createOrganizationRequest, "CreateOrganizationRequest", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    OrganizationsApiRequestFactory.prototype.createOrganizationInvitation = function (orgId, apiOrganizationInvitationRequestView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "createOrganizationInvitation", "orgId");
                        }
                        if (apiOrganizationInvitationRequestView === null || apiOrganizationInvitationRequestView === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "createOrganizationInvitation", "apiOrganizationInvitationRequestView");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/invites'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiOrganizationInvitationRequestView, "ApiOrganizationInvitationRequestView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    OrganizationsApiRequestFactory.prototype.deleteOrganization = function (orgId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "deleteOrganization", "orgId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    OrganizationsApiRequestFactory.prototype.deleteOrganizationInvitation = function (orgId, invitationId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "deleteOrganizationInvitation", "orgId");
                        }
                        if (invitationId === null || invitationId === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "deleteOrganizationInvitation", "invitationId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/invites/{invitationId}'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)))
                            .replace('{' + 'invitationId' + '}', encodeURIComponent(String(invitationId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    OrganizationsApiRequestFactory.prototype.getOrganization = function (orgId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "getOrganization", "orgId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    OrganizationsApiRequestFactory.prototype.getOrganizationInvitation = function (orgId, invitationId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "getOrganizationInvitation", "orgId");
                        }
                        if (invitationId === null || invitationId === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "getOrganizationInvitation", "invitationId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/invites/{invitationId}'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)))
                            .replace('{' + 'invitationId' + '}', encodeURIComponent(String(invitationId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    OrganizationsApiRequestFactory.prototype.getOrganizationSettings = function (orgId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "getOrganizationSettings", "orgId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/settings'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    OrganizationsApiRequestFactory.prototype.listOrganizationInvitations = function (orgId, envelope, pretty, username, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "listOrganizationInvitations", "orgId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/invites'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (username !== undefined) {
                            requestContext.setQueryParam("username", ObjectSerializer_1.ObjectSerializer.serialize(username, "string", "email"));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    OrganizationsApiRequestFactory.prototype.listOrganizationProjects = function (orgId, envelope, includeCount, itemsPerPage, pageNum, pretty, name, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "listOrganizationProjects", "orgId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/groups'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (name !== undefined) {
                            requestContext.setQueryParam("name", ObjectSerializer_1.ObjectSerializer.serialize(name, "string", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    OrganizationsApiRequestFactory.prototype.listOrganizationUsers = function (orgId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "listOrganizationUsers", "orgId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/users'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    OrganizationsApiRequestFactory.prototype.listOrganizations = function (envelope, includeCount, itemsPerPage, pageNum, pretty, name, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        localVarPath = '/api/atlas/v2/orgs';
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (name !== undefined) {
                            requestContext.setQueryParam("name", ObjectSerializer_1.ObjectSerializer.serialize(name, "string", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    OrganizationsApiRequestFactory.prototype.renameOrganization = function (orgId, apiOrganizationView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "renameOrganization", "orgId");
                        }
                        if (apiOrganizationView === null || apiOrganizationView === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "renameOrganization", "apiOrganizationView");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiOrganizationView, "ApiOrganizationView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    OrganizationsApiRequestFactory.prototype.updateOrganizationInvitation = function (orgId, apiOrganizationInvitationRequestView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "updateOrganizationInvitation", "orgId");
                        }
                        if (apiOrganizationInvitationRequestView === null || apiOrganizationInvitationRequestView === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "updateOrganizationInvitation", "apiOrganizationInvitationRequestView");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/invites'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiOrganizationInvitationRequestView, "ApiOrganizationInvitationRequestView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    OrganizationsApiRequestFactory.prototype.updateOrganizationInvitationById = function (orgId, invitationId, apiOrganizationInvitationUpdateRequestView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "updateOrganizationInvitationById", "orgId");
                        }
                        if (invitationId === null || invitationId === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "updateOrganizationInvitationById", "invitationId");
                        }
                        if (apiOrganizationInvitationUpdateRequestView === null || apiOrganizationInvitationUpdateRequestView === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "updateOrganizationInvitationById", "apiOrganizationInvitationUpdateRequestView");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/invites/{invitationId}'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)))
                            .replace('{' + 'invitationId' + '}', encodeURIComponent(String(invitationId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiOrganizationInvitationUpdateRequestView, "ApiOrganizationInvitationUpdateRequestView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    OrganizationsApiRequestFactory.prototype.updateOrganizationSettings = function (orgId, organizationSettings, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "updateOrganizationSettings", "orgId");
                        }
                        if (organizationSettings === null || organizationSettings === undefined) {
                            throw new baseapi_1.RequiredError("OrganizationsApi", "updateOrganizationSettings", "organizationSettings");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/settings'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(organizationSettings, "OrganizationSettings", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return OrganizationsApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.OrganizationsApiRequestFactory = OrganizationsApiRequestFactory;
var OrganizationsApiResponseProcessor = (function () {
    function OrganizationsApiResponseProcessor() {
    }
    OrganizationsApiResponseProcessor.prototype.createOrganization = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, body, _4, _5, _6, _7, _8, _9;
            return __generator(this, function (_10) {
                switch (_10.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("201", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_10.sent(), contentType]),
                            "CreateOrganizationResponse", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 12:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 14:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 16];
                        _5 = (_4 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _7 = (_6 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 15:
                        body = _5.apply(_4, [_7.apply(_6, [_10.sent(), contentType]),
                            "CreateOrganizationResponse", ""]);
                        return [2, body];
                    case 16:
                        _8 = exception_1.ApiException.bind;
                        _9 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 17: throw new (_8.apply(exception_1.ApiException, _9.concat([_10.sent(), response.headers])))();
                }
            });
        });
    };
    OrganizationsApiResponseProcessor.prototype.createOrganizationInvitation = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "ApiOrganizationInvitationView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "ApiOrganizationInvitationView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    OrganizationsApiResponseProcessor.prototype.deleteOrganization = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("402", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Payment Required", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    OrganizationsApiResponseProcessor.prototype.deleteOrganizationInvitation = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    OrganizationsApiResponseProcessor.prototype.getOrganization = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "ApiOrganizationView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "ApiOrganizationView", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    OrganizationsApiResponseProcessor.prototype.getOrganizationInvitation = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "ApiOrganizationInvitationView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "ApiOrganizationInvitationView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    OrganizationsApiResponseProcessor.prototype.getOrganizationSettings = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "OrganizationSettings", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "OrganizationSettings", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    OrganizationsApiResponseProcessor.prototype.listOrganizationInvitations = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "Array<ApiOrganizationInvitationView>", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "Array<ApiOrganizationInvitationView>", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    OrganizationsApiResponseProcessor.prototype.listOrganizationProjects = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "PaginatedAtlasGroupView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "PaginatedAtlasGroupView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    OrganizationsApiResponseProcessor.prototype.listOrganizationUsers = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "PaginatedAppUserView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "PaginatedAppUserView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    OrganizationsApiResponseProcessor.prototype.listOrganizations = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "PaginatedOrganizationView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "PaginatedOrganizationView", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    OrganizationsApiResponseProcessor.prototype.renameOrganization = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "ApiOrganizationView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "ApiOrganizationView", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    OrganizationsApiResponseProcessor.prototype.updateOrganizationInvitation = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "ApiOrganizationInvitationView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "ApiOrganizationInvitationView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    OrganizationsApiResponseProcessor.prototype.updateOrganizationInvitationById = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "ApiOrganizationInvitationView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "ApiOrganizationInvitationView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    OrganizationsApiResponseProcessor.prototype.updateOrganizationSettings = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "OrganizationSettings", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "OrganizationSettings", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    return OrganizationsApiResponseProcessor;
}());
exports.OrganizationsApiResponseProcessor = OrganizationsApiResponseProcessor;
//# sourceMappingURL=OrganizationsApi.js.map

/***/ }),

/***/ 57109:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PerformanceAdvisorApiResponseProcessor = exports.PerformanceAdvisorApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var PerformanceAdvisorApiRequestFactory = (function (_super) {
    __extends(PerformanceAdvisorApiRequestFactory, _super);
    function PerformanceAdvisorApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PerformanceAdvisorApiRequestFactory.prototype.disableSlowOperationThresholding = function (groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("PerformanceAdvisorApi", "disableSlowOperationThresholding", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/managedSlowMs/disable'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    PerformanceAdvisorApiRequestFactory.prototype.enableSlowOperationThresholding = function (groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("PerformanceAdvisorApi", "enableSlowOperationThresholding", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/managedSlowMs/enable'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    PerformanceAdvisorApiRequestFactory.prototype.listSlowQueries = function (groupId, processId, envelope, pretty, duration, namespaces, nLogs, since, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("PerformanceAdvisorApi", "listSlowQueries", "groupId");
                        }
                        if (processId === null || processId === undefined) {
                            throw new baseapi_1.RequiredError("PerformanceAdvisorApi", "listSlowQueries", "processId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/processes/{processId}/performanceAdvisor/slowQueryLogs'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'processId' + '}', encodeURIComponent(String(processId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (duration !== undefined) {
                            requestContext.setQueryParam("duration", ObjectSerializer_1.ObjectSerializer.serialize(duration, "number", "int64"));
                        }
                        if (namespaces !== undefined) {
                            requestContext.setQueryParam("namespaces", ObjectSerializer_1.ObjectSerializer.serialize(namespaces, "Array<string>", ""));
                        }
                        if (nLogs !== undefined) {
                            requestContext.setQueryParam("nLogs", ObjectSerializer_1.ObjectSerializer.serialize(nLogs, "number", "int64"));
                        }
                        if (since !== undefined) {
                            requestContext.setQueryParam("since", ObjectSerializer_1.ObjectSerializer.serialize(since, "number", "int64"));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    PerformanceAdvisorApiRequestFactory.prototype.listSlowQueryNamespaces = function (groupId, processId, envelope, pretty, duration, since, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("PerformanceAdvisorApi", "listSlowQueryNamespaces", "groupId");
                        }
                        if (processId === null || processId === undefined) {
                            throw new baseapi_1.RequiredError("PerformanceAdvisorApi", "listSlowQueryNamespaces", "processId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/processes/{processId}/performanceAdvisor/namespaces'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'processId' + '}', encodeURIComponent(String(processId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (duration !== undefined) {
                            requestContext.setQueryParam("duration", ObjectSerializer_1.ObjectSerializer.serialize(duration, "number", "int64"));
                        }
                        if (since !== undefined) {
                            requestContext.setQueryParam("since", ObjectSerializer_1.ObjectSerializer.serialize(since, "number", "int64"));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    PerformanceAdvisorApiRequestFactory.prototype.listSuggestedIndexes = function (groupId, processId, envelope, includeCount, itemsPerPage, pageNum, pretty, duration, namespaces, nExamples, nIndexes, since, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("PerformanceAdvisorApi", "listSuggestedIndexes", "groupId");
                        }
                        if (processId === null || processId === undefined) {
                            throw new baseapi_1.RequiredError("PerformanceAdvisorApi", "listSuggestedIndexes", "processId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/processes/{processId}/performanceAdvisor/suggestedIndexes'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'processId' + '}', encodeURIComponent(String(processId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (duration !== undefined) {
                            requestContext.setQueryParam("duration", ObjectSerializer_1.ObjectSerializer.serialize(duration, "number", ""));
                        }
                        if (namespaces !== undefined) {
                            requestContext.setQueryParam("namespaces", ObjectSerializer_1.ObjectSerializer.serialize(namespaces, "Array<string>", ""));
                        }
                        if (nExamples !== undefined) {
                            requestContext.setQueryParam("nExamples", ObjectSerializer_1.ObjectSerializer.serialize(nExamples, "number", "int64"));
                        }
                        if (nIndexes !== undefined) {
                            requestContext.setQueryParam("nIndexes", ObjectSerializer_1.ObjectSerializer.serialize(nIndexes, "number", "int64"));
                        }
                        if (since !== undefined) {
                            requestContext.setQueryParam("since", ObjectSerializer_1.ObjectSerializer.serialize(since, "number", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return PerformanceAdvisorApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.PerformanceAdvisorApiRequestFactory = PerformanceAdvisorApiRequestFactory;
var PerformanceAdvisorApiResponseProcessor = (function () {
    function PerformanceAdvisorApiResponseProcessor() {
    }
    PerformanceAdvisorApiResponseProcessor.prototype.disableSlowOperationThresholding = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    PerformanceAdvisorApiResponseProcessor.prototype.enableSlowOperationThresholding = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    PerformanceAdvisorApiResponseProcessor.prototype.listSlowQueries = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiPerformanceAdvisorSlowQueryListView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "ApiPerformanceAdvisorSlowQueryListView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    PerformanceAdvisorApiResponseProcessor.prototype.listSlowQueryNamespaces = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiNamespacesView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "ApiNamespacesView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    PerformanceAdvisorApiResponseProcessor.prototype.listSuggestedIndexes = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiPerformanceAdvisorResponseView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "ApiPerformanceAdvisorResponseView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    return PerformanceAdvisorApiResponseProcessor;
}());
exports.PerformanceAdvisorApiResponseProcessor = PerformanceAdvisorApiResponseProcessor;
//# sourceMappingURL=PerformanceAdvisorApi.js.map

/***/ }),

/***/ 42931:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PrivateEndpointServicesApiResponseProcessor = exports.PrivateEndpointServicesApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var PrivateEndpointServicesApiRequestFactory = (function (_super) {
    __extends(PrivateEndpointServicesApiRequestFactory, _super);
    function PrivateEndpointServicesApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PrivateEndpointServicesApiRequestFactory.prototype.createPrivateEndpoint = function (groupId, cloudProvider, endpointServiceId, createPrivateEndpointRequest, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "createPrivateEndpoint", "groupId");
                        }
                        if (cloudProvider === null || cloudProvider === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "createPrivateEndpoint", "cloudProvider");
                        }
                        if (endpointServiceId === null || endpointServiceId === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "createPrivateEndpoint", "endpointServiceId");
                        }
                        if (createPrivateEndpointRequest === null || createPrivateEndpointRequest === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "createPrivateEndpoint", "createPrivateEndpointRequest");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/privateEndpoint/{cloudProvider}/endpointService/{endpointServiceId}/endpoint'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'cloudProvider' + '}', encodeURIComponent(String(cloudProvider)))
                            .replace('{' + 'endpointServiceId' + '}', encodeURIComponent(String(endpointServiceId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(createPrivateEndpointRequest, "CreatePrivateEndpointRequest", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    PrivateEndpointServicesApiRequestFactory.prototype.createPrivateEndpointService = function (groupId, createEndpointServiceRequest, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "createPrivateEndpointService", "groupId");
                        }
                        if (createEndpointServiceRequest === null || createEndpointServiceRequest === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "createPrivateEndpointService", "createEndpointServiceRequest");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/privateEndpoint/endpointService'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(createEndpointServiceRequest, "CreateEndpointServiceRequest", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    PrivateEndpointServicesApiRequestFactory.prototype.deletePrivateEndpoint = function (groupId, cloudProvider, endpointId, endpointServiceId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "deletePrivateEndpoint", "groupId");
                        }
                        if (cloudProvider === null || cloudProvider === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "deletePrivateEndpoint", "cloudProvider");
                        }
                        if (endpointId === null || endpointId === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "deletePrivateEndpoint", "endpointId");
                        }
                        if (endpointServiceId === null || endpointServiceId === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "deletePrivateEndpoint", "endpointServiceId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/privateEndpoint/{cloudProvider}/endpointService/{endpointServiceId}/endpoint/{endpointId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'cloudProvider' + '}', encodeURIComponent(String(cloudProvider)))
                            .replace('{' + 'endpointId' + '}', encodeURIComponent(String(endpointId)))
                            .replace('{' + 'endpointServiceId' + '}', encodeURIComponent(String(endpointServiceId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    PrivateEndpointServicesApiRequestFactory.prototype.deletePrivateEndpointService = function (groupId, cloudProvider, endpointServiceId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "deletePrivateEndpointService", "groupId");
                        }
                        if (cloudProvider === null || cloudProvider === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "deletePrivateEndpointService", "cloudProvider");
                        }
                        if (endpointServiceId === null || endpointServiceId === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "deletePrivateEndpointService", "endpointServiceId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/privateEndpoint/{cloudProvider}/endpointService/{endpointServiceId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'cloudProvider' + '}', encodeURIComponent(String(cloudProvider)))
                            .replace('{' + 'endpointServiceId' + '}', encodeURIComponent(String(endpointServiceId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    PrivateEndpointServicesApiRequestFactory.prototype.getPrivateEndpoint = function (groupId, cloudProvider, endpointId, endpointServiceId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "getPrivateEndpoint", "groupId");
                        }
                        if (cloudProvider === null || cloudProvider === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "getPrivateEndpoint", "cloudProvider");
                        }
                        if (endpointId === null || endpointId === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "getPrivateEndpoint", "endpointId");
                        }
                        if (endpointServiceId === null || endpointServiceId === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "getPrivateEndpoint", "endpointServiceId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/privateEndpoint/{cloudProvider}/endpointService/{endpointServiceId}/endpoint/{endpointId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'cloudProvider' + '}', encodeURIComponent(String(cloudProvider)))
                            .replace('{' + 'endpointId' + '}', encodeURIComponent(String(endpointId)))
                            .replace('{' + 'endpointServiceId' + '}', encodeURIComponent(String(endpointServiceId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    PrivateEndpointServicesApiRequestFactory.prototype.getPrivateEndpointService = function (groupId, cloudProvider, endpointServiceId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "getPrivateEndpointService", "groupId");
                        }
                        if (cloudProvider === null || cloudProvider === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "getPrivateEndpointService", "cloudProvider");
                        }
                        if (endpointServiceId === null || endpointServiceId === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "getPrivateEndpointService", "endpointServiceId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/privateEndpoint/{cloudProvider}/endpointService/{endpointServiceId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'cloudProvider' + '}', encodeURIComponent(String(cloudProvider)))
                            .replace('{' + 'endpointServiceId' + '}', encodeURIComponent(String(endpointServiceId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    PrivateEndpointServicesApiRequestFactory.prototype.getRegionalizedPrivateEndpointSetting = function (groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "getRegionalizedPrivateEndpointSetting", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/privateEndpoint/regionalMode'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    PrivateEndpointServicesApiRequestFactory.prototype.listPrivateEndpointServices = function (groupId, cloudProvider, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "listPrivateEndpointServices", "groupId");
                        }
                        if (cloudProvider === null || cloudProvider === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "listPrivateEndpointServices", "cloudProvider");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/privateEndpoint/{cloudProvider}/endpointService'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'cloudProvider' + '}', encodeURIComponent(String(cloudProvider)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    PrivateEndpointServicesApiRequestFactory.prototype.toggleRegionalizedPrivateEndpointSetting = function (groupId, projectSettingItemView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "toggleRegionalizedPrivateEndpointSetting", "groupId");
                        }
                        if (projectSettingItemView === null || projectSettingItemView === undefined) {
                            throw new baseapi_1.RequiredError("PrivateEndpointServicesApi", "toggleRegionalizedPrivateEndpointSetting", "projectSettingItemView");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/privateEndpoint/regionalMode'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(projectSettingItemView, "ProjectSettingItemView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return PrivateEndpointServicesApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.PrivateEndpointServicesApiRequestFactory = PrivateEndpointServicesApiRequestFactory;
var PrivateEndpointServicesApiResponseProcessor = (function () {
    function PrivateEndpointServicesApiResponseProcessor() {
    }
    PrivateEndpointServicesApiResponseProcessor.prototype.createPrivateEndpoint = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "Endpoint", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("402", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Payment Required", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "Endpoint", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    PrivateEndpointServicesApiResponseProcessor.prototype.createPrivateEndpointService = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "EndpointService", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "EndpointService", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    PrivateEndpointServicesApiResponseProcessor.prototype.deletePrivateEndpoint = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, _o, _p;
            return __generator(this, function (_q) {
                switch (_q.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_q.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_q.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_q.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 6:
                        _o = exception_1.ApiException.bind;
                        _p = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 7: throw new (_o.apply(exception_1.ApiException, _p.concat([_q.sent(), response.headers])))();
                }
            });
        });
    };
    PrivateEndpointServicesApiResponseProcessor.prototype.deletePrivateEndpointService = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, _o, _p;
            return __generator(this, function (_q) {
                switch (_q.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_q.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_q.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_q.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 6:
                        _o = exception_1.ApiException.bind;
                        _p = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 7: throw new (_o.apply(exception_1.ApiException, _p.concat([_q.sent(), response.headers])))();
                }
            });
        });
    };
    PrivateEndpointServicesApiResponseProcessor.prototype.getPrivateEndpoint = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "Endpoint", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "Endpoint", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    PrivateEndpointServicesApiResponseProcessor.prototype.getPrivateEndpointService = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "EndpointService", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "EndpointService", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    PrivateEndpointServicesApiResponseProcessor.prototype.getRegionalizedPrivateEndpointSetting = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ProjectSettingItemView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ProjectSettingItemView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    PrivateEndpointServicesApiResponseProcessor.prototype.listPrivateEndpointServices = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedPrivateLinkConnectionView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedPrivateLinkConnectionView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    PrivateEndpointServicesApiResponseProcessor.prototype.toggleRegionalizedPrivateEndpointSetting = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ProjectSettingItemView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ProjectSettingItemView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    return PrivateEndpointServicesApiResponseProcessor;
}());
exports.PrivateEndpointServicesApiResponseProcessor = PrivateEndpointServicesApiResponseProcessor;
//# sourceMappingURL=PrivateEndpointServicesApi.js.map

/***/ }),

/***/ 92725:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProgrammaticAPIKeysApiResponseProcessor = exports.ProgrammaticAPIKeysApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var ProgrammaticAPIKeysApiRequestFactory = (function (_super) {
    __extends(ProgrammaticAPIKeysApiRequestFactory, _super);
    function ProgrammaticAPIKeysApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProgrammaticAPIKeysApiRequestFactory.prototype.addProjectApiKey = function (groupId, apiUserId, apiUserRoleAssignment, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "addProjectApiKey", "groupId");
                        }
                        if (apiUserId === null || apiUserId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "addProjectApiKey", "apiUserId");
                        }
                        if (apiUserRoleAssignment === null || apiUserRoleAssignment === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "addProjectApiKey", "apiUserRoleAssignment");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/apiKeys/{apiUserId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'apiUserId' + '}', encodeURIComponent(String(apiUserId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiUserRoleAssignment, "Array<ApiUserRoleAssignment>", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProgrammaticAPIKeysApiRequestFactory.prototype.createApiKey = function (orgId, apiCreateApiKeyView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "createApiKey", "orgId");
                        }
                        if (apiCreateApiKeyView === null || apiCreateApiKeyView === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "createApiKey", "apiCreateApiKeyView");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/apiKeys'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiCreateApiKeyView, "ApiCreateApiKeyView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProgrammaticAPIKeysApiRequestFactory.prototype.createApiKeyAccessList = function (orgId, apiUserId, apiUserAccessListView, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "createApiKeyAccessList", "orgId");
                        }
                        if (apiUserId === null || apiUserId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "createApiKeyAccessList", "apiUserId");
                        }
                        if (apiUserAccessListView === null || apiUserAccessListView === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "createApiKeyAccessList", "apiUserAccessListView");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/apiKeys/{apiUserId}/accessList'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)))
                            .replace('{' + 'apiUserId' + '}', encodeURIComponent(String(apiUserId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiUserAccessListView, "Array<ApiUserAccessListView>", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProgrammaticAPIKeysApiRequestFactory.prototype.createProjectApiKey = function (groupId, apiCreateApiKeyView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "createProjectApiKey", "groupId");
                        }
                        if (apiCreateApiKeyView === null || apiCreateApiKeyView === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "createProjectApiKey", "apiCreateApiKeyView");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/apiKeys'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiCreateApiKeyView, "ApiCreateApiKeyView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProgrammaticAPIKeysApiRequestFactory.prototype.deleteApiKey = function (orgId, apiUserId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "deleteApiKey", "orgId");
                        }
                        if (apiUserId === null || apiUserId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "deleteApiKey", "apiUserId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/apiKeys/{apiUserId}'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)))
                            .replace('{' + 'apiUserId' + '}', encodeURIComponent(String(apiUserId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProgrammaticAPIKeysApiRequestFactory.prototype.deleteApiKeyAcessList = function (orgId, apiUserId, ipAddress, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "deleteApiKeyAcessList", "orgId");
                        }
                        if (apiUserId === null || apiUserId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "deleteApiKeyAcessList", "apiUserId");
                        }
                        if (ipAddress === null || ipAddress === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "deleteApiKeyAcessList", "ipAddress");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/apiKeys/{apiUserId}/accessList/{ipAddress}'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)))
                            .replace('{' + 'apiUserId' + '}', encodeURIComponent(String(apiUserId)))
                            .replace('{' + 'ipAddress' + '}', encodeURIComponent(String(ipAddress)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProgrammaticAPIKeysApiRequestFactory.prototype.getApiKey = function (orgId, apiUserId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "getApiKey", "orgId");
                        }
                        if (apiUserId === null || apiUserId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "getApiKey", "apiUserId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/apiKeys/{apiUserId}'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)))
                            .replace('{' + 'apiUserId' + '}', encodeURIComponent(String(apiUserId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProgrammaticAPIKeysApiRequestFactory.prototype.getApiKeyAccessList = function (orgId, ipAddress, apiUserId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "getApiKeyAccessList", "orgId");
                        }
                        if (ipAddress === null || ipAddress === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "getApiKeyAccessList", "ipAddress");
                        }
                        if (apiUserId === null || apiUserId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "getApiKeyAccessList", "apiUserId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/apiKeys/{apiUserId}/accessList/{ipAddress}'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)))
                            .replace('{' + 'ipAddress' + '}', encodeURIComponent(String(ipAddress)))
                            .replace('{' + 'apiUserId' + '}', encodeURIComponent(String(apiUserId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProgrammaticAPIKeysApiRequestFactory.prototype.listApiKeyAccessListsEntries = function (orgId, apiUserId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "listApiKeyAccessListsEntries", "orgId");
                        }
                        if (apiUserId === null || apiUserId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "listApiKeyAccessListsEntries", "apiUserId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/apiKeys/{apiUserId}/accessList'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)))
                            .replace('{' + 'apiUserId' + '}', encodeURIComponent(String(apiUserId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProgrammaticAPIKeysApiRequestFactory.prototype.listApiKeys = function (orgId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "listApiKeys", "orgId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/apiKeys'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProgrammaticAPIKeysApiRequestFactory.prototype.listProjectApiKeys = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "listProjectApiKeys", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/apiKeys'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProgrammaticAPIKeysApiRequestFactory.prototype.removeProjectApiKey = function (groupId, apiUserId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "removeProjectApiKey", "groupId");
                        }
                        if (apiUserId === null || apiUserId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "removeProjectApiKey", "apiUserId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/apiKeys/{apiUserId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'apiUserId' + '}', encodeURIComponent(String(apiUserId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProgrammaticAPIKeysApiRequestFactory.prototype.updateApiKey = function (orgId, apiUserId, apiApiUserView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "updateApiKey", "orgId");
                        }
                        if (apiUserId === null || apiUserId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "updateApiKey", "apiUserId");
                        }
                        if (apiApiUserView === null || apiApiUserView === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "updateApiKey", "apiApiUserView");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/apiKeys/{apiUserId}'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)))
                            .replace('{' + 'apiUserId' + '}', encodeURIComponent(String(apiUserId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiApiUserView, "ApiApiUserView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProgrammaticAPIKeysApiRequestFactory.prototype.updateApiKeyRoles = function (groupId, apiUserId, apiCreateApiKeyView, pageNum, itemsPerPage, includeCount, pretty, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "updateApiKeyRoles", "groupId");
                        }
                        if (apiUserId === null || apiUserId === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "updateApiKeyRoles", "apiUserId");
                        }
                        if (apiCreateApiKeyView === null || apiCreateApiKeyView === undefined) {
                            throw new baseapi_1.RequiredError("ProgrammaticAPIKeysApi", "updateApiKeyRoles", "apiCreateApiKeyView");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/apiKeys/{apiUserId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'apiUserId' + '}', encodeURIComponent(String(apiUserId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiCreateApiKeyView, "ApiCreateApiKeyView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return ProgrammaticAPIKeysApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.ProgrammaticAPIKeysApiRequestFactory = ProgrammaticAPIKeysApiRequestFactory;
var ProgrammaticAPIKeysApiResponseProcessor = (function () {
    function ProgrammaticAPIKeysApiResponseProcessor() {
    }
    ProgrammaticAPIKeysApiResponseProcessor.prototype.addProjectApiKey = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiApiUserView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "ApiApiUserView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    ProgrammaticAPIKeysApiResponseProcessor.prototype.createApiKey = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiApiUserView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "ApiApiUserView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    ProgrammaticAPIKeysApiResponseProcessor.prototype.createApiKeyAccessList = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "ApiUserAccessListView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "ApiUserAccessListView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    ProgrammaticAPIKeysApiResponseProcessor.prototype.createProjectApiKey = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiApiUserView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "ApiApiUserView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    ProgrammaticAPIKeysApiResponseProcessor.prototype.deleteApiKey = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, _o, _p;
            return __generator(this, function (_q) {
                switch (_q.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_q.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_q.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_q.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 6:
                        _o = exception_1.ApiException.bind;
                        _p = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 7: throw new (_o.apply(exception_1.ApiException, _p.concat([_q.sent(), response.headers])))();
                }
            });
        });
    };
    ProgrammaticAPIKeysApiResponseProcessor.prototype.deleteApiKeyAcessList = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    ProgrammaticAPIKeysApiResponseProcessor.prototype.getApiKey = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiApiUserView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "ApiApiUserView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    ProgrammaticAPIKeysApiResponseProcessor.prototype.getApiKeyAccessList = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiUserAccessListView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ApiUserAccessListView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    ProgrammaticAPIKeysApiResponseProcessor.prototype.listApiKeyAccessListsEntries = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedApiUserAccessListView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedApiUserAccessListView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    ProgrammaticAPIKeysApiResponseProcessor.prototype.listApiKeys = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedApiApiUserView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedApiApiUserView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    ProgrammaticAPIKeysApiResponseProcessor.prototype.listProjectApiKeys = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedApiApiUserView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedApiApiUserView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    ProgrammaticAPIKeysApiResponseProcessor.prototype.removeProjectApiKey = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    ProgrammaticAPIKeysApiResponseProcessor.prototype.updateApiKey = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiApiUserView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ApiApiUserView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    ProgrammaticAPIKeysApiResponseProcessor.prototype.updateApiKeyRoles = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiApiUserView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ApiApiUserView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    return ProgrammaticAPIKeysApiResponseProcessor;
}());
exports.ProgrammaticAPIKeysApiResponseProcessor = ProgrammaticAPIKeysApiResponseProcessor;
//# sourceMappingURL=ProgrammaticAPIKeysApi.js.map

/***/ }),

/***/ 19008:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProjectIPAccessListApiResponseProcessor = exports.ProjectIPAccessListApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var ProjectIPAccessListApiRequestFactory = (function (_super) {
    __extends(ProjectIPAccessListApiRequestFactory, _super);
    function ProjectIPAccessListApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProjectIPAccessListApiRequestFactory.prototype.createProjectIpAccessList = function (groupId, networkPermissionEntry, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectIPAccessListApi", "createProjectIpAccessList", "groupId");
                        }
                        if (networkPermissionEntry === null || networkPermissionEntry === undefined) {
                            throw new baseapi_1.RequiredError("ProjectIPAccessListApi", "createProjectIpAccessList", "networkPermissionEntry");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/accessList'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(networkPermissionEntry, "Array<NetworkPermissionEntry>", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectIPAccessListApiRequestFactory.prototype.deleteProjectIpAccessList = function (groupId, entryValue, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectIPAccessListApi", "deleteProjectIpAccessList", "groupId");
                        }
                        if (entryValue === null || entryValue === undefined) {
                            throw new baseapi_1.RequiredError("ProjectIPAccessListApi", "deleteProjectIpAccessList", "entryValue");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/accessList/{entryValue}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'entryValue' + '}', encodeURIComponent(String(entryValue)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectIPAccessListApiRequestFactory.prototype.getProjectIpAccessListStatus = function (groupId, entryValue, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectIPAccessListApi", "getProjectIpAccessListStatus", "groupId");
                        }
                        if (entryValue === null || entryValue === undefined) {
                            throw new baseapi_1.RequiredError("ProjectIPAccessListApi", "getProjectIpAccessListStatus", "entryValue");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/accessList/{entryValue}/status'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'entryValue' + '}', encodeURIComponent(String(entryValue)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectIPAccessListApiRequestFactory.prototype.getProjectIpList = function (groupId, entryValue, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectIPAccessListApi", "getProjectIpList", "groupId");
                        }
                        if (entryValue === null || entryValue === undefined) {
                            throw new baseapi_1.RequiredError("ProjectIPAccessListApi", "getProjectIpList", "entryValue");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/accessList/{entryValue}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'entryValue' + '}', encodeURIComponent(String(entryValue)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectIPAccessListApiRequestFactory.prototype.listProjectIpAccessLists = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectIPAccessListApi", "listProjectIpAccessLists", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/accessList'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return ProjectIPAccessListApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.ProjectIPAccessListApiRequestFactory = ProjectIPAccessListApiRequestFactory;
var ProjectIPAccessListApiResponseProcessor = (function () {
    function ProjectIPAccessListApiResponseProcessor() {
    }
    ProjectIPAccessListApiResponseProcessor.prototype.createProjectIpAccessList = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "PaginatedNetworkAccessView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "PaginatedNetworkAccessView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectIPAccessListApiResponseProcessor.prototype.deleteProjectIpAccessList = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectIPAccessListApiResponseProcessor.prototype.getProjectIpAccessListStatus = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "NetworkPermissionEntryStatus", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "NetworkPermissionEntryStatus", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectIPAccessListApiResponseProcessor.prototype.getProjectIpList = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "NetworkPermissionEntry", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "NetworkPermissionEntry", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectIPAccessListApiResponseProcessor.prototype.listProjectIpAccessLists = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedNetworkAccessView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedNetworkAccessView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    return ProjectIPAccessListApiResponseProcessor;
}());
exports.ProjectIPAccessListApiResponseProcessor = ProjectIPAccessListApiResponseProcessor;
//# sourceMappingURL=ProjectIPAccessListApi.js.map

/***/ }),

/***/ 92943:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProjectsApiResponseProcessor = exports.ProjectsApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var ProjectsApiRequestFactory = (function (_super) {
    __extends(ProjectsApiRequestFactory, _super);
    function ProjectsApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProjectsApiRequestFactory.prototype.createProject = function (group, envelope, pretty, projectOwnerId, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (group === null || group === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "createProject", "group");
                        }
                        localVarPath = '/api/atlas/v2/groups';
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (projectOwnerId !== undefined) {
                            requestContext.setQueryParam("projectOwnerId", ObjectSerializer_1.ObjectSerializer.serialize(projectOwnerId, "string", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(group, "Group", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectsApiRequestFactory.prototype.createProjectInvitation = function (groupId, apiGroupInvitationRequestView, pretty, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "createProjectInvitation", "groupId");
                        }
                        if (apiGroupInvitationRequestView === null || apiGroupInvitationRequestView === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "createProjectInvitation", "apiGroupInvitationRequestView");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/invites'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiGroupInvitationRequestView, "ApiGroupInvitationRequestView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectsApiRequestFactory.prototype.deleteProject = function (groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "deleteProject", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectsApiRequestFactory.prototype.deleteProjectInvitation = function (groupId, invitationId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "deleteProjectInvitation", "groupId");
                        }
                        if (invitationId === null || invitationId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "deleteProjectInvitation", "invitationId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/invites/{invitationId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'invitationId' + '}', encodeURIComponent(String(invitationId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectsApiRequestFactory.prototype.deleteProjectLimit = function (limitName, groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (limitName === null || limitName === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "deleteProjectLimit", "limitName");
                        }
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "deleteProjectLimit", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/limits/{limitName}'
                            .replace('{' + 'limitName' + '}', encodeURIComponent(String(limitName)))
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectsApiRequestFactory.prototype.getProject = function (groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "getProject", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectsApiRequestFactory.prototype.getProjectByName = function (groupName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupName === null || groupName === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "getProjectByName", "groupName");
                        }
                        localVarPath = '/api/atlas/v2/groups/byName/{groupName}'
                            .replace('{' + 'groupName' + '}', encodeURIComponent(String(groupName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectsApiRequestFactory.prototype.getProjectInvitation = function (groupId, invitationId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "getProjectInvitation", "groupId");
                        }
                        if (invitationId === null || invitationId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "getProjectInvitation", "invitationId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/invites/{invitationId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'invitationId' + '}', encodeURIComponent(String(invitationId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectsApiRequestFactory.prototype.getProjectLimit = function (limitName, groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (limitName === null || limitName === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "getProjectLimit", "limitName");
                        }
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "getProjectLimit", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/limits/{limitName}'
                            .replace('{' + 'limitName' + '}', encodeURIComponent(String(limitName)))
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectsApiRequestFactory.prototype.getProjectSettings = function (groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "getProjectSettings", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/settings'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectsApiRequestFactory.prototype.listProjectInvitations = function (groupId, envelope, pretty, username, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "listProjectInvitations", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/invites'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (username !== undefined) {
                            requestContext.setQueryParam("username", ObjectSerializer_1.ObjectSerializer.serialize(username, "string", "email"));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectsApiRequestFactory.prototype.listProjectLimits = function (groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "listProjectLimits", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/limits'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectsApiRequestFactory.prototype.listProjectUsers = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, flattenTeams, includeOrgUsers, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "listProjectUsers", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/users'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (flattenTeams !== undefined) {
                            requestContext.setQueryParam("flattenTeams", ObjectSerializer_1.ObjectSerializer.serialize(flattenTeams, "boolean", ""));
                        }
                        if (includeOrgUsers !== undefined) {
                            requestContext.setQueryParam("includeOrgUsers", ObjectSerializer_1.ObjectSerializer.serialize(includeOrgUsers, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectsApiRequestFactory.prototype.listProjects = function (envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        localVarPath = '/api/atlas/v2/groups';
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectsApiRequestFactory.prototype.removeProjectUser = function (groupId, userId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "removeProjectUser", "groupId");
                        }
                        if (userId === null || userId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "removeProjectUser", "userId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/users/{userId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectsApiRequestFactory.prototype.setProjectLimit = function (limitName, groupId, envelope, pretty, apiLimitView, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (limitName === null || limitName === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "setProjectLimit", "limitName");
                        }
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "setProjectLimit", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/limits/{limitName}'
                            .replace('{' + 'limitName' + '}', encodeURIComponent(String(limitName)))
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiLimitView, "ApiLimitView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectsApiRequestFactory.prototype.updateProject = function (groupId, envelope, pretty, groupName, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "updateProject", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(groupName, "GroupName", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectsApiRequestFactory.prototype.updateProjectInvitation = function (groupId, apiGroupInvitationRequestView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "updateProjectInvitation", "groupId");
                        }
                        if (apiGroupInvitationRequestView === null || apiGroupInvitationRequestView === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "updateProjectInvitation", "apiGroupInvitationRequestView");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/invites'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiGroupInvitationRequestView, "ApiGroupInvitationRequestView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectsApiRequestFactory.prototype.updateProjectInvitationById = function (groupId, invitationId, apiGroupInvitationUpdateRequestView, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "updateProjectInvitationById", "groupId");
                        }
                        if (invitationId === null || invitationId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "updateProjectInvitationById", "invitationId");
                        }
                        if (apiGroupInvitationUpdateRequestView === null || apiGroupInvitationUpdateRequestView === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "updateProjectInvitationById", "apiGroupInvitationUpdateRequestView");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/invites/{invitationId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'invitationId' + '}', encodeURIComponent(String(invitationId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiGroupInvitationUpdateRequestView, "ApiGroupInvitationUpdateRequestView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ProjectsApiRequestFactory.prototype.updateProjectSettings = function (groupId, envelope, pretty, groupSettings, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ProjectsApi", "updateProjectSettings", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/settings'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(groupSettings, "GroupSettings", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return ProjectsApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.ProjectsApiRequestFactory = ProjectsApiRequestFactory;
var ProjectsApiResponseProcessor = (function () {
    function ProjectsApiResponseProcessor() {
    }
    ProjectsApiResponseProcessor.prototype.createProject = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, body, _4, _5, _6, _7, _8, _9;
            return __generator(this, function (_10) {
                switch (_10.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_10.sent(), contentType]),
                            "Group", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 12:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 14:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 16];
                        _5 = (_4 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _7 = (_6 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 15:
                        body = _5.apply(_4, [_7.apply(_6, [_10.sent(), contentType]),
                            "Group", ""]);
                        return [2, body];
                    case 16:
                        _8 = exception_1.ApiException.bind;
                        _9 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 17: throw new (_8.apply(exception_1.ApiException, _9.concat([_10.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectsApiResponseProcessor.prototype.createProjectInvitation = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiGroupInvitationView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "ApiGroupInvitationView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectsApiResponseProcessor.prototype.deleteProject = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectsApiResponseProcessor.prototype.deleteProjectInvitation = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, _o, _p;
            return __generator(this, function (_q) {
                switch (_q.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_q.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_q.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_q.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 6:
                        _o = exception_1.ApiException.bind;
                        _p = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 7: throw new (_o.apply(exception_1.ApiException, _p.concat([_q.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectsApiResponseProcessor.prototype.deleteProjectLimit = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectsApiResponseProcessor.prototype.getProject = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "Group", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "Group", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectsApiResponseProcessor.prototype.getProjectByName = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "Group", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "Group", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectsApiResponseProcessor.prototype.getProjectInvitation = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiGroupInvitationView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ApiGroupInvitationView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectsApiResponseProcessor.prototype.getProjectLimit = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "ApiLimitView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "ApiLimitView", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectsApiResponseProcessor.prototype.getProjectSettings = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "GroupSettings", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "GroupSettings", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectsApiResponseProcessor.prototype.listProjectInvitations = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "Array<ApiGroupInvitationView>", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "Array<ApiGroupInvitationView>", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectsApiResponseProcessor.prototype.listProjectLimits = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "ApiLimitView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "ApiLimitView", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectsApiResponseProcessor.prototype.listProjectUsers = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedApiAppUserView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedApiAppUserView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectsApiResponseProcessor.prototype.listProjects = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "PaginatedAtlasGroupView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "PaginatedAtlasGroupView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectsApiResponseProcessor.prototype.removeProjectUser = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectsApiResponseProcessor.prototype.setProjectLimit = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "ApiLimitView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "ApiLimitView", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectsApiResponseProcessor.prototype.updateProject = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "Group", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "Group", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectsApiResponseProcessor.prototype.updateProjectInvitation = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "ApiGroupInvitationView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "ApiGroupInvitationView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectsApiResponseProcessor.prototype.updateProjectInvitationById = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "ApiGroupInvitationView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "ApiGroupInvitationView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    ProjectsApiResponseProcessor.prototype.updateProjectSettings = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "GroupSettings", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "GroupSettings", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    return ProjectsApiResponseProcessor;
}());
exports.ProjectsApiResponseProcessor = ProjectsApiResponseProcessor;
//# sourceMappingURL=ProjectsApi.js.map

/***/ }),

/***/ 28218:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RollingIndexApiResponseProcessor = exports.RollingIndexApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var RollingIndexApiRequestFactory = (function (_super) {
    __extends(RollingIndexApiRequestFactory, _super);
    function RollingIndexApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RollingIndexApiRequestFactory.prototype.createRollingIndex = function (groupId, clusterName, apiIndexRequestView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("RollingIndexApi", "createRollingIndex", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("RollingIndexApi", "createRollingIndex", "clusterName");
                        }
                        if (apiIndexRequestView === null || apiIndexRequestView === undefined) {
                            throw new baseapi_1.RequiredError("RollingIndexApi", "createRollingIndex", "apiIndexRequestView");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/index'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiIndexRequestView, "ApiIndexRequestView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return RollingIndexApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.RollingIndexApiRequestFactory = RollingIndexApiRequestFactory;
var RollingIndexApiResponseProcessor = (function () {
    function RollingIndexApiResponseProcessor() {
    }
    RollingIndexApiResponseProcessor.prototype.createRollingIndex = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    return RollingIndexApiResponseProcessor;
}());
exports.RollingIndexApiResponseProcessor = RollingIndexApiResponseProcessor;
//# sourceMappingURL=RollingIndexApi.js.map

/***/ }),

/***/ 55033:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RootApiResponseProcessor = exports.RootApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var RootApiRequestFactory = (function (_super) {
    __extends(RootApiRequestFactory, _super);
    function RootApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RootApiRequestFactory.prototype.getSystemStatus = function (envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        localVarPath = '/api/atlas/v2';
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return RootApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.RootApiRequestFactory = RootApiRequestFactory;
var RootApiResponseProcessor = (function () {
    function RootApiResponseProcessor() {
    }
    RootApiResponseProcessor.prototype.getSystemStatus = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiSystemStatusView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ApiSystemStatusView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    return RootApiResponseProcessor;
}());
exports.RootApiResponseProcessor = RootApiResponseProcessor;
//# sourceMappingURL=RootApi.js.map

/***/ }),

/***/ 50055:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerlessInstancesApiResponseProcessor = exports.ServerlessInstancesApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var ServerlessInstancesApiRequestFactory = (function (_super) {
    __extends(ServerlessInstancesApiRequestFactory, _super);
    function ServerlessInstancesApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ServerlessInstancesApiRequestFactory.prototype.createServerlessInstance = function (groupId, serverlessInstanceDescriptionCreate, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessInstancesApi", "createServerlessInstance", "groupId");
                        }
                        if (serverlessInstanceDescriptionCreate === null || serverlessInstanceDescriptionCreate === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessInstancesApi", "createServerlessInstance", "serverlessInstanceDescriptionCreate");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/serverless'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(serverlessInstanceDescriptionCreate, "ServerlessInstanceDescriptionCreate", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ServerlessInstancesApiRequestFactory.prototype.deleteServerlessInstance = function (groupId, name, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessInstancesApi", "deleteServerlessInstance", "groupId");
                        }
                        if (name === null || name === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessInstancesApi", "deleteServerlessInstance", "name");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/serverless/{name}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ServerlessInstancesApiRequestFactory.prototype.getServerlessInstance = function (groupId, name, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessInstancesApi", "getServerlessInstance", "groupId");
                        }
                        if (name === null || name === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessInstancesApi", "getServerlessInstance", "name");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/serverless/{name}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ServerlessInstancesApiRequestFactory.prototype.listServerlessInstances = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessInstancesApi", "listServerlessInstances", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/serverless'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ServerlessInstancesApiRequestFactory.prototype.updateServerlessInstance = function (groupId, name, serverlessInstanceDescriptionUpdate, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessInstancesApi", "updateServerlessInstance", "groupId");
                        }
                        if (name === null || name === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessInstancesApi", "updateServerlessInstance", "name");
                        }
                        if (serverlessInstanceDescriptionUpdate === null || serverlessInstanceDescriptionUpdate === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessInstancesApi", "updateServerlessInstance", "serverlessInstanceDescriptionUpdate");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/serverless/{name}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(serverlessInstanceDescriptionUpdate, "ServerlessInstanceDescriptionUpdate", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return ServerlessInstancesApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.ServerlessInstancesApiRequestFactory = ServerlessInstancesApiRequestFactory;
var ServerlessInstancesApiResponseProcessor = (function () {
    function ServerlessInstancesApiResponseProcessor() {
    }
    ServerlessInstancesApiResponseProcessor.prototype.createServerlessInstance = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("201", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "ServerlessInstanceDescription", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("402", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Payment Required", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "ServerlessInstanceDescription", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    ServerlessInstancesApiResponseProcessor.prototype.deleteServerlessInstance = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    ServerlessInstancesApiResponseProcessor.prototype.getServerlessInstance = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "ServerlessInstanceDescription", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "ServerlessInstanceDescription", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    ServerlessInstancesApiResponseProcessor.prototype.listServerlessInstances = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "PaginatedServerlessInstanceDescriptionView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "PaginatedServerlessInstanceDescriptionView", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    ServerlessInstancesApiResponseProcessor.prototype.updateServerlessInstance = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ServerlessInstanceDescription", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("402", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Payment Required", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ServerlessInstanceDescription", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    return ServerlessInstancesApiResponseProcessor;
}());
exports.ServerlessInstancesApiResponseProcessor = ServerlessInstancesApiResponseProcessor;
//# sourceMappingURL=ServerlessInstancesApi.js.map

/***/ }),

/***/ 866:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerlessPrivateEndpointsApiResponseProcessor = exports.ServerlessPrivateEndpointsApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var ServerlessPrivateEndpointsApiRequestFactory = (function (_super) {
    __extends(ServerlessPrivateEndpointsApiRequestFactory, _super);
    function ServerlessPrivateEndpointsApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ServerlessPrivateEndpointsApiRequestFactory.prototype.createServerlessPrivateEndpoint = function (groupId, instanceName, serverlessTenantEndpointCreate, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessPrivateEndpointsApi", "createServerlessPrivateEndpoint", "groupId");
                        }
                        if (instanceName === null || instanceName === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessPrivateEndpointsApi", "createServerlessPrivateEndpoint", "instanceName");
                        }
                        if (serverlessTenantEndpointCreate === null || serverlessTenantEndpointCreate === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessPrivateEndpointsApi", "createServerlessPrivateEndpoint", "serverlessTenantEndpointCreate");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/privateEndpoint/serverless/instance/{instanceName}/endpoint'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'instanceName' + '}', encodeURIComponent(String(instanceName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(serverlessTenantEndpointCreate, "ServerlessTenantEndpointCreate", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ServerlessPrivateEndpointsApiRequestFactory.prototype.deleteServerlessPrivateEndpoint = function (groupId, instanceName, endpointId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessPrivateEndpointsApi", "deleteServerlessPrivateEndpoint", "groupId");
                        }
                        if (instanceName === null || instanceName === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessPrivateEndpointsApi", "deleteServerlessPrivateEndpoint", "instanceName");
                        }
                        if (endpointId === null || endpointId === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessPrivateEndpointsApi", "deleteServerlessPrivateEndpoint", "endpointId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/privateEndpoint/serverless/instance/{instanceName}/endpoint/{endpointId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'instanceName' + '}', encodeURIComponent(String(instanceName)))
                            .replace('{' + 'endpointId' + '}', encodeURIComponent(String(endpointId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ServerlessPrivateEndpointsApiRequestFactory.prototype.getServerlessPrivateEndpoint = function (groupId, instanceName, endpointId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessPrivateEndpointsApi", "getServerlessPrivateEndpoint", "groupId");
                        }
                        if (instanceName === null || instanceName === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessPrivateEndpointsApi", "getServerlessPrivateEndpoint", "instanceName");
                        }
                        if (endpointId === null || endpointId === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessPrivateEndpointsApi", "getServerlessPrivateEndpoint", "endpointId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/privateEndpoint/serverless/instance/{instanceName}/endpoint/{endpointId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'instanceName' + '}', encodeURIComponent(String(instanceName)))
                            .replace('{' + 'endpointId' + '}', encodeURIComponent(String(endpointId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ServerlessPrivateEndpointsApiRequestFactory.prototype.listServerlessPrivateEndpoints = function (groupId, instanceName, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessPrivateEndpointsApi", "listServerlessPrivateEndpoints", "groupId");
                        }
                        if (instanceName === null || instanceName === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessPrivateEndpointsApi", "listServerlessPrivateEndpoints", "instanceName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/privateEndpoint/serverless/instance/{instanceName}/endpoint'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'instanceName' + '}', encodeURIComponent(String(instanceName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ServerlessPrivateEndpointsApiRequestFactory.prototype.updateServerlessPrivateEndpoint = function (groupId, instanceName, endpointId, envelope, serverlessTenantEndpointUpdate, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessPrivateEndpointsApi", "updateServerlessPrivateEndpoint", "groupId");
                        }
                        if (instanceName === null || instanceName === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessPrivateEndpointsApi", "updateServerlessPrivateEndpoint", "instanceName");
                        }
                        if (endpointId === null || endpointId === undefined) {
                            throw new baseapi_1.RequiredError("ServerlessPrivateEndpointsApi", "updateServerlessPrivateEndpoint", "endpointId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/privateEndpoint/serverless/instance/{instanceName}/endpoint/{endpointId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'instanceName' + '}', encodeURIComponent(String(instanceName)))
                            .replace('{' + 'endpointId' + '}', encodeURIComponent(String(endpointId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(serverlessTenantEndpointUpdate, "ServerlessTenantEndpointUpdate", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return ServerlessPrivateEndpointsApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.ServerlessPrivateEndpointsApiRequestFactory = ServerlessPrivateEndpointsApiRequestFactory;
var ServerlessPrivateEndpointsApiResponseProcessor = (function () {
    function ServerlessPrivateEndpointsApiResponseProcessor() {
    }
    ServerlessPrivateEndpointsApiResponseProcessor.prototype.createServerlessPrivateEndpoint = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("201", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ServerlessTenantEndpoint", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ServerlessTenantEndpoint", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    ServerlessPrivateEndpointsApiResponseProcessor.prototype.deleteServerlessPrivateEndpoint = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    ServerlessPrivateEndpointsApiResponseProcessor.prototype.getServerlessPrivateEndpoint = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ServerlessTenantEndpoint", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ServerlessTenantEndpoint", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    ServerlessPrivateEndpointsApiResponseProcessor.prototype.listServerlessPrivateEndpoints = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "Array<ServerlessTenantEndpoint>", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "Array<ServerlessTenantEndpoint>", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    ServerlessPrivateEndpointsApiResponseProcessor.prototype.updateServerlessPrivateEndpoint = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ServerlessTenantEndpoint", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "ServerlessTenantEndpoint", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    return ServerlessPrivateEndpointsApiResponseProcessor;
}());
exports.ServerlessPrivateEndpointsApiResponseProcessor = ServerlessPrivateEndpointsApiResponseProcessor;
//# sourceMappingURL=ServerlessPrivateEndpointsApi.js.map

/***/ }),

/***/ 95222:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SharedTierRestoreJobsApiResponseProcessor = exports.SharedTierRestoreJobsApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var SharedTierRestoreJobsApiRequestFactory = (function (_super) {
    __extends(SharedTierRestoreJobsApiRequestFactory, _super);
    function SharedTierRestoreJobsApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SharedTierRestoreJobsApiRequestFactory.prototype.createSharedClusterBackupRestoreJob = function (clusterName, groupId, tenantRestore, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("SharedTierRestoreJobsApi", "createSharedClusterBackupRestoreJob", "clusterName");
                        }
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("SharedTierRestoreJobsApi", "createSharedClusterBackupRestoreJob", "groupId");
                        }
                        if (tenantRestore === null || tenantRestore === undefined) {
                            throw new baseapi_1.RequiredError("SharedTierRestoreJobsApi", "createSharedClusterBackupRestoreJob", "tenantRestore");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/tenant/restore'
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(tenantRestore, "TenantRestore", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    SharedTierRestoreJobsApiRequestFactory.prototype.getSharedClusterBackupRestoreJob = function (clusterName, groupId, restoreId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("SharedTierRestoreJobsApi", "getSharedClusterBackupRestoreJob", "clusterName");
                        }
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("SharedTierRestoreJobsApi", "getSharedClusterBackupRestoreJob", "groupId");
                        }
                        if (restoreId === null || restoreId === undefined) {
                            throw new baseapi_1.RequiredError("SharedTierRestoreJobsApi", "getSharedClusterBackupRestoreJob", "restoreId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/tenant/restores/{restoreId}'
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'restoreId' + '}', encodeURIComponent(String(restoreId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    SharedTierRestoreJobsApiRequestFactory.prototype.listSharedClusterBackupRestoreJobs = function (clusterName, groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("SharedTierRestoreJobsApi", "listSharedClusterBackupRestoreJobs", "clusterName");
                        }
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("SharedTierRestoreJobsApi", "listSharedClusterBackupRestoreJobs", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/tenant/restores'
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return SharedTierRestoreJobsApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.SharedTierRestoreJobsApiRequestFactory = SharedTierRestoreJobsApiRequestFactory;
var SharedTierRestoreJobsApiResponseProcessor = (function () {
    function SharedTierRestoreJobsApiResponseProcessor() {
    }
    SharedTierRestoreJobsApiResponseProcessor.prototype.createSharedClusterBackupRestoreJob = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "TenantRestore", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "TenantRestore", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    SharedTierRestoreJobsApiResponseProcessor.prototype.getSharedClusterBackupRestoreJob = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "TenantRestore", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "TenantRestore", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    SharedTierRestoreJobsApiResponseProcessor.prototype.listSharedClusterBackupRestoreJobs = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "PaginatedTenantRestoreView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "PaginatedTenantRestoreView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    return SharedTierRestoreJobsApiResponseProcessor;
}());
exports.SharedTierRestoreJobsApiResponseProcessor = SharedTierRestoreJobsApiResponseProcessor;
//# sourceMappingURL=SharedTierRestoreJobsApi.js.map

/***/ }),

/***/ 83898:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SharedTierSnapshotsApiResponseProcessor = exports.SharedTierSnapshotsApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var SharedTierSnapshotsApiRequestFactory = (function (_super) {
    __extends(SharedTierSnapshotsApiRequestFactory, _super);
    function SharedTierSnapshotsApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SharedTierSnapshotsApiRequestFactory.prototype.downloadSharedClusterBackup = function (clusterName, groupId, tenantRestore, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("SharedTierSnapshotsApi", "downloadSharedClusterBackup", "clusterName");
                        }
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("SharedTierSnapshotsApi", "downloadSharedClusterBackup", "groupId");
                        }
                        if (tenantRestore === null || tenantRestore === undefined) {
                            throw new baseapi_1.RequiredError("SharedTierSnapshotsApi", "downloadSharedClusterBackup", "tenantRestore");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/tenant/download'
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(tenantRestore, "TenantRestore", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    SharedTierSnapshotsApiRequestFactory.prototype.getSharedClusterBackup = function (groupId, clusterName, snapshotId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("SharedTierSnapshotsApi", "getSharedClusterBackup", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("SharedTierSnapshotsApi", "getSharedClusterBackup", "clusterName");
                        }
                        if (snapshotId === null || snapshotId === undefined) {
                            throw new baseapi_1.RequiredError("SharedTierSnapshotsApi", "getSharedClusterBackup", "snapshotId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/tenant/snapshots/{snapshotId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)))
                            .replace('{' + 'snapshotId' + '}', encodeURIComponent(String(snapshotId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    SharedTierSnapshotsApiRequestFactory.prototype.listSharedClusterBackups = function (groupId, clusterName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("SharedTierSnapshotsApi", "listSharedClusterBackups", "groupId");
                        }
                        if (clusterName === null || clusterName === undefined) {
                            throw new baseapi_1.RequiredError("SharedTierSnapshotsApi", "listSharedClusterBackups", "clusterName");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/tenant/snapshots'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'clusterName' + '}', encodeURIComponent(String(clusterName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return SharedTierSnapshotsApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.SharedTierSnapshotsApiRequestFactory = SharedTierSnapshotsApiRequestFactory;
var SharedTierSnapshotsApiResponseProcessor = (function () {
    function SharedTierSnapshotsApiResponseProcessor() {
    }
    SharedTierSnapshotsApiResponseProcessor.prototype.downloadSharedClusterBackup = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, body, _4, _5, _6, _7, _8, _9;
            return __generator(this, function (_10) {
                switch (_10.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_10.sent(), contentType]),
                            "TenantRestore", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 12:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 14:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 16];
                        _5 = (_4 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _7 = (_6 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 15:
                        body = _5.apply(_4, [_7.apply(_6, [_10.sent(), contentType]),
                            "TenantRestore", ""]);
                        return [2, body];
                    case 16:
                        _8 = exception_1.ApiException.bind;
                        _9 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 17: throw new (_8.apply(exception_1.ApiException, _9.concat([_10.sent(), response.headers])))();
                }
            });
        });
    };
    SharedTierSnapshotsApiResponseProcessor.prototype.getSharedClusterBackup = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "TenantSnapshot", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "TenantSnapshot", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    SharedTierSnapshotsApiResponseProcessor.prototype.listSharedClusterBackups = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "PaginatedTenantSnapshotView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "PaginatedTenantSnapshotView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    return SharedTierSnapshotsApiResponseProcessor;
}());
exports.SharedTierSnapshotsApiResponseProcessor = SharedTierSnapshotsApiResponseProcessor;
//# sourceMappingURL=SharedTierSnapshotsApi.js.map

/***/ }),

/***/ 54194:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TeamsApiResponseProcessor = exports.TeamsApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var TeamsApiRequestFactory = (function (_super) {
    __extends(TeamsApiRequestFactory, _super);
    function TeamsApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TeamsApiRequestFactory.prototype.addAllTeamsToProject = function (groupId, apiTeamRoleView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "addAllTeamsToProject", "groupId");
                        }
                        if (apiTeamRoleView === null || apiTeamRoleView === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "addAllTeamsToProject", "apiTeamRoleView");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/teams'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiTeamRoleView, "Array<ApiTeamRoleView>", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    TeamsApiRequestFactory.prototype.addTeamUser = function (orgId, teamId, apiAddUserToTeamView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "addTeamUser", "orgId");
                        }
                        if (teamId === null || teamId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "addTeamUser", "teamId");
                        }
                        if (apiAddUserToTeamView === null || apiAddUserToTeamView === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "addTeamUser", "apiAddUserToTeamView");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/teams/{teamId}/users'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)))
                            .replace('{' + 'teamId' + '}', encodeURIComponent(String(teamId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiAddUserToTeamView, "Array<ApiAddUserToTeamView>", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    TeamsApiRequestFactory.prototype.createTeam = function (orgId, apiTeamView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "createTeam", "orgId");
                        }
                        if (apiTeamView === null || apiTeamView === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "createTeam", "apiTeamView");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/teams'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiTeamView, "ApiTeamView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    TeamsApiRequestFactory.prototype.deleteTeam = function (orgId, teamId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "deleteTeam", "orgId");
                        }
                        if (teamId === null || teamId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "deleteTeam", "teamId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/teams/{teamId}'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)))
                            .replace('{' + 'teamId' + '}', encodeURIComponent(String(teamId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    TeamsApiRequestFactory.prototype.getTeamById = function (orgId, teamId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "getTeamById", "orgId");
                        }
                        if (teamId === null || teamId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "getTeamById", "teamId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/teams/{teamId}'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)))
                            .replace('{' + 'teamId' + '}', encodeURIComponent(String(teamId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    TeamsApiRequestFactory.prototype.getTeamByName = function (orgId, teamName, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "getTeamByName", "orgId");
                        }
                        if (teamName === null || teamName === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "getTeamByName", "teamName");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/teams/byName/{teamName}'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)))
                            .replace('{' + 'teamName' + '}', encodeURIComponent(String(teamName)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    TeamsApiRequestFactory.prototype.listOrganizationTeams = function (orgId, envelope, itemsPerPage, includeCount, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "listOrganizationTeams", "orgId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/teams'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    TeamsApiRequestFactory.prototype.listProjectTeams = function (groupId, envelope, pretty, includeCount, itemsPerPage, pageNum, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "listProjectTeams", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/teams'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    TeamsApiRequestFactory.prototype.listTeamUsers = function (orgId, teamId, envelope, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "listTeamUsers", "orgId");
                        }
                        if (teamId === null || teamId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "listTeamUsers", "teamId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/teams/{teamId}/users'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)))
                            .replace('{' + 'teamId' + '}', encodeURIComponent(String(teamId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    TeamsApiRequestFactory.prototype.removeProjectTeam = function (groupId, teamId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "removeProjectTeam", "groupId");
                        }
                        if (teamId === null || teamId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "removeProjectTeam", "teamId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/teams/{teamId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'teamId' + '}', encodeURIComponent(String(teamId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    TeamsApiRequestFactory.prototype.removeTeamUser = function (orgId, teamId, userId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "removeTeamUser", "orgId");
                        }
                        if (teamId === null || teamId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "removeTeamUser", "teamId");
                        }
                        if (userId === null || userId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "removeTeamUser", "userId");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/teams/{teamId}/users/{userId}'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)))
                            .replace('{' + 'teamId' + '}', encodeURIComponent(String(teamId)))
                            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    TeamsApiRequestFactory.prototype.renameTeam = function (orgId, teamId, apiTeamView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (orgId === null || orgId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "renameTeam", "orgId");
                        }
                        if (teamId === null || teamId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "renameTeam", "teamId");
                        }
                        if (apiTeamView === null || apiTeamView === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "renameTeam", "apiTeamView");
                        }
                        localVarPath = '/api/atlas/v2/orgs/{orgId}/teams/{teamId}'
                            .replace('{' + 'orgId' + '}', encodeURIComponent(String(orgId)))
                            .replace('{' + 'teamId' + '}', encodeURIComponent(String(teamId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiTeamView, "ApiTeamView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    TeamsApiRequestFactory.prototype.updateTeamRoles = function (groupId, teamId, apiTeamRoleView, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "updateTeamRoles", "groupId");
                        }
                        if (teamId === null || teamId === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "updateTeamRoles", "teamId");
                        }
                        if (apiTeamRoleView === null || apiTeamRoleView === undefined) {
                            throw new baseapi_1.RequiredError("TeamsApi", "updateTeamRoles", "apiTeamRoleView");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/teams/{teamId}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'teamId' + '}', encodeURIComponent(String(teamId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(apiTeamRoleView, "ApiTeamRoleView", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return TeamsApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.TeamsApiRequestFactory = TeamsApiRequestFactory;
var TeamsApiResponseProcessor = (function () {
    function TeamsApiResponseProcessor() {
    }
    TeamsApiResponseProcessor.prototype.addAllTeamsToProject = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "PaginatedTeamRoleView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "PaginatedTeamRoleView", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    TeamsApiResponseProcessor.prototype.addTeamUser = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "PaginatedApiAppUserView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "PaginatedApiAppUserView", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    TeamsApiResponseProcessor.prototype.createTeam = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "ApiTeamView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "ApiTeamView", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    TeamsApiResponseProcessor.prototype.deleteTeam = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    TeamsApiResponseProcessor.prototype.getTeamById = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "ApiTeamResponseView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "ApiTeamResponseView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    TeamsApiResponseProcessor.prototype.getTeamByName = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "ApiTeamResponseView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "ApiTeamResponseView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    TeamsApiResponseProcessor.prototype.listOrganizationTeams = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "PaginatedTeamView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "PaginatedTeamView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    TeamsApiResponseProcessor.prototype.listProjectTeams = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "PaginatedTeamRoleView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "PaginatedTeamRoleView", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    TeamsApiResponseProcessor.prototype.listTeamUsers = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "PaginatedApiAppUserView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "PaginatedApiAppUserView", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    TeamsApiResponseProcessor.prototype.removeProjectTeam = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    TeamsApiResponseProcessor.prototype.removeTeamUser = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    TeamsApiResponseProcessor.prototype.renameTeam = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "ApiTeamResponseView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "ApiTeamResponseView", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    TeamsApiResponseProcessor.prototype.updateTeamRoles = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "PaginatedTeamRoleView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "PaginatedTeamRoleView", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    return TeamsApiResponseProcessor;
}());
exports.TeamsApiResponseProcessor = TeamsApiResponseProcessor;
//# sourceMappingURL=TeamsApi.js.map

/***/ }),

/***/ 32962:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TestApiResponseProcessor = exports.TestApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var TestApiRequestFactory = (function (_super) {
    __extends(TestApiRequestFactory, _super);
    function TestApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TestApiRequestFactory.prototype.versionedExample = function (envelope, additionalInfo, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        localVarPath = '/api/atlas/v2/example/info';
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (additionalInfo !== undefined) {
                            requestContext.setQueryParam("additionalInfo", ObjectSerializer_1.ObjectSerializer.serialize(additionalInfo, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return TestApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.TestApiRequestFactory = TestApiRequestFactory;
var TestApiResponseProcessor = (function () {
    function TestApiResponseProcessor() {
    }
    TestApiResponseProcessor.prototype.versionedExample = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "ExampleResourceResponseView20230201", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "ExampleResourceResponseView20230201", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    return TestApiResponseProcessor;
}());
exports.TestApiResponseProcessor = TestApiResponseProcessor;
//# sourceMappingURL=TestApi.js.map

/***/ }),

/***/ 85499:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ThirdPartyIntegrationsApiResponseProcessor = exports.ThirdPartyIntegrationsApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var ThirdPartyIntegrationsApiRequestFactory = (function (_super) {
    __extends(ThirdPartyIntegrationsApiRequestFactory, _super);
    function ThirdPartyIntegrationsApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThirdPartyIntegrationsApiRequestFactory.prototype.createThirdPartyIntegration = function (integrationType, groupId, integrationViewForNdsGroup, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (integrationType === null || integrationType === undefined) {
                            throw new baseapi_1.RequiredError("ThirdPartyIntegrationsApi", "createThirdPartyIntegration", "integrationType");
                        }
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ThirdPartyIntegrationsApi", "createThirdPartyIntegration", "groupId");
                        }
                        if (integrationViewForNdsGroup === null || integrationViewForNdsGroup === undefined) {
                            throw new baseapi_1.RequiredError("ThirdPartyIntegrationsApi", "createThirdPartyIntegration", "integrationViewForNdsGroup");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/integrations/{integrationType}'
                            .replace('{' + 'integrationType' + '}', encodeURIComponent(String(integrationType)))
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(integrationViewForNdsGroup, "IntegrationViewForNdsGroup", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ThirdPartyIntegrationsApiRequestFactory.prototype.deleteThirdPartyIntegration = function (integrationType, groupId, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (integrationType === null || integrationType === undefined) {
                            throw new baseapi_1.RequiredError("ThirdPartyIntegrationsApi", "deleteThirdPartyIntegration", "integrationType");
                        }
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ThirdPartyIntegrationsApi", "deleteThirdPartyIntegration", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/integrations/{integrationType}'
                            .replace('{' + 'integrationType' + '}', encodeURIComponent(String(integrationType)))
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ThirdPartyIntegrationsApiRequestFactory.prototype.getThirdPartyIntegration = function (groupId, integrationType, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ThirdPartyIntegrationsApi", "getThirdPartyIntegration", "groupId");
                        }
                        if (integrationType === null || integrationType === undefined) {
                            throw new baseapi_1.RequiredError("ThirdPartyIntegrationsApi", "getThirdPartyIntegration", "integrationType");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/integrations/{integrationType}'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'integrationType' + '}', encodeURIComponent(String(integrationType)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ThirdPartyIntegrationsApiRequestFactory.prototype.listThirdPartyIntegrations = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ThirdPartyIntegrationsApi", "listThirdPartyIntegrations", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/integrations'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    ThirdPartyIntegrationsApiRequestFactory.prototype.updateThirdPartyIntegration = function (integrationType, groupId, integrationViewForNdsGroup, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (integrationType === null || integrationType === undefined) {
                            throw new baseapi_1.RequiredError("ThirdPartyIntegrationsApi", "updateThirdPartyIntegration", "integrationType");
                        }
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("ThirdPartyIntegrationsApi", "updateThirdPartyIntegration", "groupId");
                        }
                        if (integrationViewForNdsGroup === null || integrationViewForNdsGroup === undefined) {
                            throw new baseapi_1.RequiredError("ThirdPartyIntegrationsApi", "updateThirdPartyIntegration", "integrationViewForNdsGroup");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/integrations/{integrationType}'
                            .replace('{' + 'integrationType' + '}', encodeURIComponent(String(integrationType)))
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PUT);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(integrationViewForNdsGroup, "IntegrationViewForNdsGroup", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return ThirdPartyIntegrationsApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.ThirdPartyIntegrationsApiRequestFactory = ThirdPartyIntegrationsApiRequestFactory;
var ThirdPartyIntegrationsApiResponseProcessor = (function () {
    function ThirdPartyIntegrationsApiResponseProcessor() {
    }
    ThirdPartyIntegrationsApiResponseProcessor.prototype.createThirdPartyIntegration = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_6.sent(), contentType]),
                            "GroupPaginatedIntegrationView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_6.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 12:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_6.sent(), contentType]),
                            "GroupPaginatedIntegrationView", ""]);
                        return [2, body];
                    case 14:
                        _4 = exception_1.ApiException.bind;
                        _5 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 15: throw new (_4.apply(exception_1.ApiException, _5.concat([_6.sent(), response.headers])))();
                }
            });
        });
    };
    ThirdPartyIntegrationsApiResponseProcessor.prototype.deleteThirdPartyIntegration = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if ((0, util_1.isCodeInRange)("204", response.httpStatusCode)) {
                            return [2];
                        }
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 2:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "void", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    ThirdPartyIntegrationsApiResponseProcessor.prototype.getThirdPartyIntegration = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "IntegrationViewForNdsGroup", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "IntegrationViewForNdsGroup", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    ThirdPartyIntegrationsApiResponseProcessor.prototype.listThirdPartyIntegrations = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "GroupPaginatedIntegrationView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "GroupPaginatedIntegrationView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    ThirdPartyIntegrationsApiResponseProcessor.prototype.updateThirdPartyIntegration = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, _0, _1;
            return __generator(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_2.sent(), contentType]),
                            "GroupPaginatedIntegrationView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_2.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 10:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_2.sent(), contentType]),
                            "GroupPaginatedIntegrationView", ""]);
                        return [2, body];
                    case 12:
                        _0 = exception_1.ApiException.bind;
                        _1 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 13: throw new (_0.apply(exception_1.ApiException, _1.concat([_2.sent(), response.headers])))();
                }
            });
        });
    };
    return ThirdPartyIntegrationsApiResponseProcessor;
}());
exports.ThirdPartyIntegrationsApiResponseProcessor = ThirdPartyIntegrationsApiResponseProcessor;
//# sourceMappingURL=ThirdPartyIntegrationsApi.js.map

/***/ }),

/***/ 21845:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.X509AuthenticationApiResponseProcessor = exports.X509AuthenticationApiRequestFactory = void 0;
var baseapi_1 = __nccwpck_require__(66659);
var http_1 = __nccwpck_require__(53094);
var ObjectSerializer_1 = __nccwpck_require__(79595);
var exception_1 = __nccwpck_require__(67207);
var util_1 = __nccwpck_require__(73113);
var X509AuthenticationApiRequestFactory = (function (_super) {
    __extends(X509AuthenticationApiRequestFactory, _super);
    function X509AuthenticationApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    X509AuthenticationApiRequestFactory.prototype.createDatabaseUserCertificate = function (groupId, username, userCert, envelope, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("X509AuthenticationApi", "createDatabaseUserCertificate", "groupId");
                        }
                        if (username === null || username === undefined) {
                            throw new baseapi_1.RequiredError("X509AuthenticationApi", "createDatabaseUserCertificate", "username");
                        }
                        if (userCert === null || userCert === undefined) {
                            throw new baseapi_1.RequiredError("X509AuthenticationApi", "createDatabaseUserCertificate", "userCert");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/databaseUsers/{username}/certs'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/vnd.atlas.2023-01-01+json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(userCert, "UserCert", ""), contentType);
                        requestContext.setBody(serializedBody);
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    X509AuthenticationApiRequestFactory.prototype.disableCustomerManagedX509 = function (groupId, envelope, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("X509AuthenticationApi", "disableCustomerManagedX509", "groupId");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/userSecurity/customerX509'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    X509AuthenticationApiRequestFactory.prototype.listDatabaseUserCertificates = function (groupId, username, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _config, localVarPath, requestContext, defaultAuth;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _config = _options || this.configuration;
                        if (groupId === null || groupId === undefined) {
                            throw new baseapi_1.RequiredError("X509AuthenticationApi", "listDatabaseUserCertificates", "groupId");
                        }
                        if (username === null || username === undefined) {
                            throw new baseapi_1.RequiredError("X509AuthenticationApi", "listDatabaseUserCertificates", "username");
                        }
                        localVarPath = '/api/atlas/v2/groups/{groupId}/databaseUsers/{username}/certs'
                            .replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)))
                            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
                        requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (envelope !== undefined) {
                            requestContext.setQueryParam("envelope", ObjectSerializer_1.ObjectSerializer.serialize(envelope, "boolean", ""));
                        }
                        if (includeCount !== undefined) {
                            requestContext.setQueryParam("includeCount", ObjectSerializer_1.ObjectSerializer.serialize(includeCount, "boolean", ""));
                        }
                        if (itemsPerPage !== undefined) {
                            requestContext.setQueryParam("itemsPerPage", ObjectSerializer_1.ObjectSerializer.serialize(itemsPerPage, "number", ""));
                        }
                        if (pageNum !== undefined) {
                            requestContext.setQueryParam("pageNum", ObjectSerializer_1.ObjectSerializer.serialize(pageNum, "number", ""));
                        }
                        if (pretty !== undefined) {
                            requestContext.setQueryParam("pretty", ObjectSerializer_1.ObjectSerializer.serialize(pretty, "boolean", ""));
                        }
                        defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
                        if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [3, 2];
                        return [4, (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext))];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2, requestContext];
                }
            });
        });
    };
    return X509AuthenticationApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.X509AuthenticationApiRequestFactory = X509AuthenticationApiRequestFactory;
var X509AuthenticationApiResponseProcessor = (function () {
    function X509AuthenticationApiResponseProcessor() {
    }
    X509AuthenticationApiResponseProcessor.prototype.createDatabaseUserCertificate = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, body, _w, _x, _y, _z, body, _0, _1, _2, _3, body, _4, _5, _6, _7, _8, _9;
            return __generator(this, function (_10) {
                switch (_10.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_10.sent(), contentType]),
                            "UserCert", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("403", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
                    case 8:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 10:
                        if (!(0, util_1.isCodeInRange)("409", response.httpStatusCode)) return [3, 12];
                        _x = (_w = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _z = (_y = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 11:
                        body = _x.apply(_w, [_z.apply(_y, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Conflict", body, response.headers);
                    case 12:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 14];
                        _1 = (_0 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _3 = (_2 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 13:
                        body = _1.apply(_0, [_3.apply(_2, [_10.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 14:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 16];
                        _5 = (_4 = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _7 = (_6 = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 15:
                        body = _5.apply(_4, [_7.apply(_6, [_10.sent(), contentType]),
                            "UserCert", ""]);
                        return [2, body];
                    case 16:
                        _8 = exception_1.ApiException.bind;
                        _9 = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 17: throw new (_8.apply(exception_1.ApiException, _9.concat([_10.sent(), response.headers])))();
                }
            });
        });
    };
    X509AuthenticationApiResponseProcessor.prototype.disableCustomerManagedX509 = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, _s, _t;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_u.sent(), contentType]),
                            "UserSecurity", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("404", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Not Found", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_u.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 6:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_u.sent(), contentType]),
                            "UserSecurity", ""]);
                        return [2, body];
                    case 8:
                        _s = exception_1.ApiException.bind;
                        _t = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 9: throw new (_s.apply(exception_1.ApiException, _t.concat([_u.sent(), response.headers])))();
                }
            });
        });
    };
    X509AuthenticationApiResponseProcessor.prototype.listDatabaseUserCertificates = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body, _a, _b, _c, _d, body, _e, _f, _g, _h, body, _j, _k, _l, _m, body, _o, _p, _q, _r, body, _s, _t, _u, _v, _w, _x;
            return __generator(this, function (_y) {
                switch (_y.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!(0, util_1.isCodeInRange)("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body = _b.apply(_a, [_d.apply(_c, [_y.sent(), contentType]),
                            "PaginatedUserCertView", ""]);
                        return [2, body];
                    case 2:
                        if (!(0, util_1.isCodeInRange)("400", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body = _f.apply(_e, [_h.apply(_g, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Bad Request", body, response.headers);
                    case 4:
                        if (!(0, util_1.isCodeInRange)("401", response.httpStatusCode)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body = _k.apply(_j, [_m.apply(_l, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
                    case 6:
                        if (!(0, util_1.isCodeInRange)("500", response.httpStatusCode)) return [3, 8];
                        _p = (_o = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _r = (_q = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 7:
                        body = _p.apply(_o, [_r.apply(_q, [_y.sent(), contentType]),
                            "ApiError", ""]);
                        throw new exception_1.ApiException(response.httpStatusCode, "Internal Server Error", body, response.headers);
                    case 8:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 10];
                        _t = (_s = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _v = (_u = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 9:
                        body = _t.apply(_s, [_v.apply(_u, [_y.sent(), contentType]),
                            "PaginatedUserCertView", ""]);
                        return [2, body];
                    case 10:
                        _w = exception_1.ApiException.bind;
                        _x = [void 0, response.httpStatusCode, "Unknown API Status Code!"];
                        return [4, response.getBodyAsAny()];
                    case 11: throw new (_w.apply(exception_1.ApiException, _x.concat([_y.sent(), response.headers])))();
                }
            });
        });
    };
    return X509AuthenticationApiResponseProcessor;
}());
exports.X509AuthenticationApiResponseProcessor = X509AuthenticationApiResponseProcessor;
//# sourceMappingURL=X509AuthenticationApi.js.map

/***/ }),

/***/ 66659:
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RequiredError = exports.BaseAPIRequestFactory = exports.COLLECTION_FORMATS = void 0;
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
var BaseAPIRequestFactory = (function () {
    function BaseAPIRequestFactory(configuration) {
        this.configuration = configuration;
    }
    return BaseAPIRequestFactory;
}());
exports.BaseAPIRequestFactory = BaseAPIRequestFactory;
;
var RequiredError = (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(api, method, field) {
        var _this = _super.call(this, "Required parameter " + field + " was null or undefined when calling " + api + "." + method + ".") || this;
        _this.api = api;
        _this.method = method;
        _this.field = field;
        _this.name = "RequiredError";
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
//# sourceMappingURL=baseapi.js.map

/***/ }),

/***/ 67207:
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiException = void 0;
var ApiException = (function (_super) {
    __extends(ApiException, _super);
    function ApiException(code, message, body, headers) {
        var _this = _super.call(this, "HTTP-Code: " + code + "\nMessage: " + message + "\nBody: " + JSON.stringify(body) + "\nHeaders: " +
            JSON.stringify(headers)) || this;
        _this.code = code;
        _this.body = body;
        _this.headers = headers;
        return _this;
    }
    return ApiException;
}(Error));
exports.ApiException = ApiException;
//# sourceMappingURL=exception.js.map

/***/ }),

/***/ 21593:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.configureAuthMethods = void 0;
function configureAuthMethods(config) {
    var authMethods = {};
    if (!config) {
        return authMethods;
    }
    authMethods["default"] = config["default"];
    return authMethods;
}
exports.configureAuthMethods = configureAuthMethods;
//# sourceMappingURL=auth.js.map

/***/ }),

/***/ 120:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createConfiguration = void 0;
var middleware_1 = __nccwpck_require__(43625);
var isomorphic_fetch_1 = __nccwpck_require__(8756);
var servers_1 = __nccwpck_require__(85188);
var auth_1 = __nccwpck_require__(21593);
function createConfiguration(conf) {
    if (conf === void 0) { conf = {}; }
    var configuration = {
        baseServer: conf.baseServer !== undefined ? conf.baseServer : servers_1.server1,
        httpApi: conf.httpApi || new isomorphic_fetch_1.IsomorphicFetchHttpLibrary(),
        middleware: conf.middleware || [],
        authMethods: (0, auth_1.configureAuthMethods)(conf.authMethods)
    };
    if (conf.promiseMiddleware) {
        conf.promiseMiddleware.forEach(function (m) { return configuration.middleware.push(new middleware_1.PromiseMiddlewareWrapper(m)); });
    }
    return configuration;
}
exports.createConfiguration = createConfiguration;
//# sourceMappingURL=configuration.js.map

/***/ }),

/***/ 53094:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.wrapHttpLibrary = exports.ResponseContext = exports.SelfDecodingBody = exports.RequestContext = exports.HttpException = exports.HttpMethod = void 0;
var rxjsStub_1 = __nccwpck_require__(78640);
__exportStar(__nccwpck_require__(8756), exports);
var HttpMethod;
(function (HttpMethod) {
    HttpMethod["GET"] = "GET";
    HttpMethod["HEAD"] = "HEAD";
    HttpMethod["POST"] = "POST";
    HttpMethod["PUT"] = "PUT";
    HttpMethod["DELETE"] = "DELETE";
    HttpMethod["CONNECT"] = "CONNECT";
    HttpMethod["OPTIONS"] = "OPTIONS";
    HttpMethod["TRACE"] = "TRACE";
    HttpMethod["PATCH"] = "PATCH";
})(HttpMethod = exports.HttpMethod || (exports.HttpMethod = {}));
var HttpException = (function (_super) {
    __extends(HttpException, _super);
    function HttpException(msg) {
        return _super.call(this, msg) || this;
    }
    return HttpException;
}(Error));
exports.HttpException = HttpException;
var RequestContext = (function () {
    function RequestContext(url, httpMethod) {
        this.httpMethod = httpMethod;
        this.headers = {};
        this.body = undefined;
        this.url = new URL(url);
    }
    RequestContext.prototype.getUrl = function () {
        return this.url.toString().endsWith("/") ?
            this.url.toString().slice(0, -1)
            : this.url.toString();
    };
    RequestContext.prototype.setUrl = function (url) {
        this.url = new URL(url);
    };
    RequestContext.prototype.setBody = function (body) {
        this.body = body;
    };
    RequestContext.prototype.getHttpMethod = function () {
        return this.httpMethod;
    };
    RequestContext.prototype.getHeaders = function () {
        return this.headers;
    };
    RequestContext.prototype.getBody = function () {
        return this.body;
    };
    RequestContext.prototype.setQueryParam = function (name, value) {
        this.url.searchParams.set(name, value);
    };
    RequestContext.prototype.addCookie = function (name, value) {
        if (!this.headers["Cookie"]) {
            this.headers["Cookie"] = "";
        }
        this.headers["Cookie"] += name + "=" + value + "; ";
    };
    RequestContext.prototype.setHeaderParam = function (key, value) {
        this.headers[key] = value;
    };
    return RequestContext;
}());
exports.RequestContext = RequestContext;
var SelfDecodingBody = (function () {
    function SelfDecodingBody(dataSource) {
        this.dataSource = dataSource;
    }
    SelfDecodingBody.prototype.binary = function () {
        return this.dataSource;
    };
    SelfDecodingBody.prototype.text = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.dataSource];
                    case 1:
                        data = _a.sent();
                        if (data.text) {
                            return [2, data.text()];
                        }
                        return [2, new Promise(function (resolve, reject) {
                                var reader = new FileReader();
                                reader.addEventListener("load", function () { return resolve(reader.result); });
                                reader.addEventListener("error", function () { return reject(reader.error); });
                                reader.readAsText(data);
                            })];
                }
            });
        });
    };
    return SelfDecodingBody;
}());
exports.SelfDecodingBody = SelfDecodingBody;
var ResponseContext = (function () {
    function ResponseContext(httpStatusCode, headers, body) {
        this.httpStatusCode = httpStatusCode;
        this.headers = headers;
        this.body = body;
    }
    ResponseContext.prototype.getParsedHeader = function (headerName) {
        var result = {};
        if (!this.headers[headerName]) {
            return result;
        }
        var parameters = this.headers[headerName].split(";");
        for (var _i = 0, parameters_1 = parameters; _i < parameters_1.length; _i++) {
            var parameter = parameters_1[_i];
            var _a = parameter.split("=", 2), key = _a[0], value = _a[1];
            key = key.toLowerCase().trim();
            if (value === undefined) {
                result[""] = key;
            }
            else {
                value = value.trim();
                if (value.startsWith('"') && value.endsWith('"')) {
                    value = value.substring(1, value.length - 1);
                }
                result[key] = value;
            }
        }
        return result;
    };
    ResponseContext.prototype.getBodyAsFile = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data, fileName, contentType;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.body.binary()];
                    case 1:
                        data = _a.sent();
                        fileName = this.getParsedHeader("content-disposition")["filename"] || "";
                        contentType = this.headers["content-type"] || "";
                        try {
                            return [2, new File([data], fileName, { type: contentType })];
                        }
                        catch (error) {
                            return [2, Object.assign(data, {
                                    name: fileName,
                                    type: contentType
                                })];
                        }
                        return [2];
                }
            });
        });
    };
    ResponseContext.prototype.getBodyAsAny = function () {
        try {
            return this.body.text();
        }
        catch (_a) { }
        try {
            return this.body.binary();
        }
        catch (_b) { }
        return Promise.resolve(undefined);
    };
    return ResponseContext;
}());
exports.ResponseContext = ResponseContext;
function wrapHttpLibrary(promiseHttpLibrary) {
    return {
        send: function (request) {
            return (0, rxjsStub_1.from)(promiseHttpLibrary.send(request));
        }
    };
}
exports.wrapHttpLibrary = wrapHttpLibrary;
//# sourceMappingURL=http.js.map

/***/ }),

/***/ 8756:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IsomorphicFetchHttpLibrary = void 0;
var http_1 = __nccwpck_require__(53094);
var rxjsStub_1 = __nccwpck_require__(78640);
__nccwpck_require__(50664);
var IsomorphicFetchHttpLibrary = (function () {
    function IsomorphicFetchHttpLibrary() {
    }
    IsomorphicFetchHttpLibrary.prototype.send = function (request) {
        var method = request.getHttpMethod().toString();
        var body = request.getBody();
        var resultPromise = fetch(request.getUrl(), {
            method: method,
            body: body,
            headers: request.getHeaders(),
            credentials: "same-origin"
        }).then(function (resp) {
            var headers = {};
            resp.headers.forEach(function (value, name) {
                headers[name] = value;
            });
            var body = {
                text: function () { return resp.text(); },
                binary: function () { return resp.blob(); }
            };
            return new http_1.ResponseContext(resp.status, headers, body);
        });
        return (0, rxjsStub_1.from)(resultPromise);
    };
    return IsomorphicFetchHttpLibrary;
}());
exports.IsomorphicFetchHttpLibrary = IsomorphicFetchHttpLibrary;
//# sourceMappingURL=isomorphic-fetch.js.map

/***/ }),

/***/ 30627:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.X509AuthenticationApi = exports.ThirdPartyIntegrationsApi = exports.TestApi = exports.TeamsApi = exports.SharedTierSnapshotsApi = exports.SharedTierRestoreJobsApi = exports.ServerlessPrivateEndpointsApi = exports.ServerlessInstancesApi = exports.RootApi = exports.RollingIndexApi = exports.ProjectsApi = exports.ProjectIPAccessListApi = exports.ProgrammaticAPIKeysApi = exports.PrivateEndpointServicesApi = exports.PerformanceAdvisorApi = exports.OrganizationsApi = exports.OnlineArchiveApi = exports.NetworkPeeringApi = exports.MultiCloudClustersApi = exports.MonitoringAndLogsApi = exports.MongoDBCloudUsersApi = exports.MaintenanceWindowsApi = exports.LegacyBackupRestoreJobsApi = exports.LegacyBackupApi = exports.LDAPConfigurationApi = exports.InvoicesApi = exports.GlobalClustersApi = exports.FederatedAuthenticationApi = exports.EventsApi = exports.EncryptionAtRestUsingCustomerKeyManagementApi = exports.DatabaseUsersApi = exports.DataLakePipelinesApi = exports.DataFederationApi = exports.CustomDatabaseRolesApi = exports.ClustersApi = exports.ClusterOutageSimulationApi = exports.CloudProviderAccessApi = exports.CloudMigrationServiceApi = exports.CloudBackupsApi = exports.AuditingApi = exports.AtlasSearchApi = exports.AlertsApi = exports.AlertConfigurationsApi = exports.AccessTrackingApi = exports.AWSClustersDNSApi = exports.RequiredError = exports.createConfiguration = void 0;
__exportStar(__nccwpck_require__(53094), exports);
__exportStar(__nccwpck_require__(21593), exports);
__exportStar(__nccwpck_require__(9309), exports);
var configuration_1 = __nccwpck_require__(120);
Object.defineProperty(exports, "createConfiguration", ({ enumerable: true, get: function () { return configuration_1.createConfiguration; } }));
__exportStar(__nccwpck_require__(67207), exports);
__exportStar(__nccwpck_require__(85188), exports);
var baseapi_1 = __nccwpck_require__(66659);
Object.defineProperty(exports, "RequiredError", ({ enumerable: true, get: function () { return baseapi_1.RequiredError; } }));
var PromiseAPI_1 = __nccwpck_require__(9038);
Object.defineProperty(exports, "AWSClustersDNSApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseAWSClustersDNSApi; } }));
Object.defineProperty(exports, "AccessTrackingApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseAccessTrackingApi; } }));
Object.defineProperty(exports, "AlertConfigurationsApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseAlertConfigurationsApi; } }));
Object.defineProperty(exports, "AlertsApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseAlertsApi; } }));
Object.defineProperty(exports, "AtlasSearchApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseAtlasSearchApi; } }));
Object.defineProperty(exports, "AuditingApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseAuditingApi; } }));
Object.defineProperty(exports, "CloudBackupsApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseCloudBackupsApi; } }));
Object.defineProperty(exports, "CloudMigrationServiceApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseCloudMigrationServiceApi; } }));
Object.defineProperty(exports, "CloudProviderAccessApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseCloudProviderAccessApi; } }));
Object.defineProperty(exports, "ClusterOutageSimulationApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseClusterOutageSimulationApi; } }));
Object.defineProperty(exports, "ClustersApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseClustersApi; } }));
Object.defineProperty(exports, "CustomDatabaseRolesApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseCustomDatabaseRolesApi; } }));
Object.defineProperty(exports, "DataFederationApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseDataFederationApi; } }));
Object.defineProperty(exports, "DataLakePipelinesApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseDataLakePipelinesApi; } }));
Object.defineProperty(exports, "DatabaseUsersApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseDatabaseUsersApi; } }));
Object.defineProperty(exports, "EncryptionAtRestUsingCustomerKeyManagementApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseEncryptionAtRestUsingCustomerKeyManagementApi; } }));
Object.defineProperty(exports, "EventsApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseEventsApi; } }));
Object.defineProperty(exports, "FederatedAuthenticationApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseFederatedAuthenticationApi; } }));
Object.defineProperty(exports, "GlobalClustersApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseGlobalClustersApi; } }));
Object.defineProperty(exports, "InvoicesApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseInvoicesApi; } }));
Object.defineProperty(exports, "LDAPConfigurationApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseLDAPConfigurationApi; } }));
Object.defineProperty(exports, "LegacyBackupApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseLegacyBackupApi; } }));
Object.defineProperty(exports, "LegacyBackupRestoreJobsApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseLegacyBackupRestoreJobsApi; } }));
Object.defineProperty(exports, "MaintenanceWindowsApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseMaintenanceWindowsApi; } }));
Object.defineProperty(exports, "MongoDBCloudUsersApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseMongoDBCloudUsersApi; } }));
Object.defineProperty(exports, "MonitoringAndLogsApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseMonitoringAndLogsApi; } }));
Object.defineProperty(exports, "MultiCloudClustersApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseMultiCloudClustersApi; } }));
Object.defineProperty(exports, "NetworkPeeringApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseNetworkPeeringApi; } }));
Object.defineProperty(exports, "OnlineArchiveApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseOnlineArchiveApi; } }));
Object.defineProperty(exports, "OrganizationsApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseOrganizationsApi; } }));
Object.defineProperty(exports, "PerformanceAdvisorApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromisePerformanceAdvisorApi; } }));
Object.defineProperty(exports, "PrivateEndpointServicesApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromisePrivateEndpointServicesApi; } }));
Object.defineProperty(exports, "ProgrammaticAPIKeysApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseProgrammaticAPIKeysApi; } }));
Object.defineProperty(exports, "ProjectIPAccessListApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseProjectIPAccessListApi; } }));
Object.defineProperty(exports, "ProjectsApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseProjectsApi; } }));
Object.defineProperty(exports, "RollingIndexApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseRollingIndexApi; } }));
Object.defineProperty(exports, "RootApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseRootApi; } }));
Object.defineProperty(exports, "ServerlessInstancesApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseServerlessInstancesApi; } }));
Object.defineProperty(exports, "ServerlessPrivateEndpointsApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseServerlessPrivateEndpointsApi; } }));
Object.defineProperty(exports, "SharedTierRestoreJobsApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseSharedTierRestoreJobsApi; } }));
Object.defineProperty(exports, "SharedTierSnapshotsApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseSharedTierSnapshotsApi; } }));
Object.defineProperty(exports, "TeamsApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseTeamsApi; } }));
Object.defineProperty(exports, "TestApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseTestApi; } }));
Object.defineProperty(exports, "ThirdPartyIntegrationsApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseThirdPartyIntegrationsApi; } }));
Object.defineProperty(exports, "X509AuthenticationApi", ({ enumerable: true, get: function () { return PromiseAPI_1.PromiseX509AuthenticationApi; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 43625:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PromiseMiddlewareWrapper = void 0;
var rxjsStub_1 = __nccwpck_require__(78640);
var PromiseMiddlewareWrapper = (function () {
    function PromiseMiddlewareWrapper(middleware) {
        this.middleware = middleware;
    }
    PromiseMiddlewareWrapper.prototype.pre = function (context) {
        return (0, rxjsStub_1.from)(this.middleware.pre(context));
    };
    PromiseMiddlewareWrapper.prototype.post = function (context) {
        return (0, rxjsStub_1.from)(this.middleware.post(context));
    };
    return PromiseMiddlewareWrapper;
}());
exports.PromiseMiddlewareWrapper = PromiseMiddlewareWrapper;
//# sourceMappingURL=middleware.js.map

/***/ }),

/***/ 29746:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AWSAutoScaling = void 0;
var AWSAutoScaling = (function () {
    function AWSAutoScaling() {
    }
    AWSAutoScaling.getAttributeTypeMap = function () {
        return AWSAutoScaling.attributeTypeMap;
    };
    AWSAutoScaling.discriminator = undefined;
    AWSAutoScaling.attributeTypeMap = [
        {
            "name": "compute",
            "baseName": "compute",
            "type": "AWSComputeAutoScaling",
            "format": ""
        }
    ];
    return AWSAutoScaling;
}());
exports.AWSAutoScaling = AWSAutoScaling;
//# sourceMappingURL=AWSAutoScaling.js.map

/***/ }),

/***/ 48681:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AWSCloudProviderContainer = void 0;
var AWSCloudProviderContainer = (function () {
    function AWSCloudProviderContainer() {
    }
    AWSCloudProviderContainer.getAttributeTypeMap = function () {
        return AWSCloudProviderContainer.attributeTypeMap;
    };
    AWSCloudProviderContainer.discriminator = undefined;
    AWSCloudProviderContainer.attributeTypeMap = [
        {
            "name": "atlasCidrBlock",
            "baseName": "atlasCidrBlock",
            "type": "string",
            "format": ""
        },
        {
            "name": "regionName",
            "baseName": "regionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "vpcId",
            "baseName": "vpcId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "provisioned",
            "baseName": "provisioned",
            "type": "boolean",
            "format": ""
        }
    ];
    return AWSCloudProviderContainer;
}());
exports.AWSCloudProviderContainer = AWSCloudProviderContainer;
//# sourceMappingURL=AWSCloudProviderContainer.js.map

/***/ }),

/***/ 29236:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AWSComputeAutoScaling = void 0;
var AWSComputeAutoScaling = (function () {
    function AWSComputeAutoScaling() {
    }
    AWSComputeAutoScaling.getAttributeTypeMap = function () {
        return AWSComputeAutoScaling.attributeTypeMap;
    };
    AWSComputeAutoScaling.discriminator = undefined;
    AWSComputeAutoScaling.attributeTypeMap = [
        {
            "name": "maxInstanceSize",
            "baseName": "maxInstanceSize",
            "type": "string",
            "format": ""
        },
        {
            "name": "minInstanceSize",
            "baseName": "minInstanceSize",
            "type": "string",
            "format": ""
        }
    ];
    return AWSComputeAutoScaling;
}());
exports.AWSComputeAutoScaling = AWSComputeAutoScaling;
//# sourceMappingURL=AWSComputeAutoScaling.js.map

/***/ }),

/***/ 65471:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AWSCustomDNSEnabledView = void 0;
var AWSCustomDNSEnabledView = (function () {
    function AWSCustomDNSEnabledView() {
    }
    AWSCustomDNSEnabledView.getAttributeTypeMap = function () {
        return AWSCustomDNSEnabledView.attributeTypeMap;
    };
    AWSCustomDNSEnabledView.discriminator = undefined;
    AWSCustomDNSEnabledView.attributeTypeMap = [
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        }
    ];
    return AWSCustomDNSEnabledView;
}());
exports.AWSCustomDNSEnabledView = AWSCustomDNSEnabledView;
//# sourceMappingURL=AWSCustomDNSEnabledView.js.map

/***/ }),

/***/ 96643:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AWSHardwareSpec = void 0;
var AWSHardwareSpec = (function () {
    function AWSHardwareSpec() {
    }
    AWSHardwareSpec.getAttributeTypeMap = function () {
        return AWSHardwareSpec.attributeTypeMap;
    };
    AWSHardwareSpec.discriminator = undefined;
    AWSHardwareSpec.attributeTypeMap = [
        {
            "name": "diskIOPS",
            "baseName": "diskIOPS",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "ebsVolumeType",
            "baseName": "ebsVolumeType",
            "type": "string",
            "format": ""
        },
        {
            "name": "instanceSize",
            "baseName": "instanceSize",
            "type": "string",
            "format": ""
        },
        {
            "name": "nodeCount",
            "baseName": "nodeCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return AWSHardwareSpec;
}());
exports.AWSHardwareSpec = AWSHardwareSpec;
//# sourceMappingURL=AWSHardwareSpec.js.map

/***/ }),

/***/ 16282:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AWSInterfaceEndpoint = void 0;
var AWSInterfaceEndpoint = (function () {
    function AWSInterfaceEndpoint() {
    }
    AWSInterfaceEndpoint.getAttributeTypeMap = function () {
        return AWSInterfaceEndpoint.attributeTypeMap;
    };
    AWSInterfaceEndpoint.discriminator = undefined;
    AWSInterfaceEndpoint.attributeTypeMap = [
        {
            "name": "connectionStatus",
            "baseName": "connectionStatus",
            "type": "string",
            "format": ""
        },
        {
            "name": "deleteRequested",
            "baseName": "deleteRequested",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "errorMessage",
            "baseName": "errorMessage",
            "type": "string",
            "format": ""
        },
        {
            "name": "interfaceEndpointId",
            "baseName": "interfaceEndpointId",
            "type": "string",
            "format": ""
        }
    ];
    return AWSInterfaceEndpoint;
}());
exports.AWSInterfaceEndpoint = AWSInterfaceEndpoint;
//# sourceMappingURL=AWSInterfaceEndpoint.js.map

/***/ }),

/***/ 28366:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AWSKMS = void 0;
var AWSKMS = (function () {
    function AWSKMS() {
    }
    AWSKMS.getAttributeTypeMap = function () {
        return AWSKMS.attributeTypeMap;
    };
    AWSKMS.discriminator = undefined;
    AWSKMS.attributeTypeMap = [
        {
            "name": "accessKeyID",
            "baseName": "accessKeyID",
            "type": "string",
            "format": ""
        },
        {
            "name": "customerMasterKeyID",
            "baseName": "customerMasterKeyID",
            "type": "string",
            "format": ""
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "region",
            "baseName": "region",
            "type": "string",
            "format": ""
        },
        {
            "name": "roleId",
            "baseName": "roleId",
            "type": "string",
            "format": ""
        },
        {
            "name": "secretAccessKey",
            "baseName": "secretAccessKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "valid",
            "baseName": "valid",
            "type": "boolean",
            "format": ""
        }
    ];
    return AWSKMS;
}());
exports.AWSKMS = AWSKMS;
//# sourceMappingURL=AWSKMS.js.map

/***/ }),

/***/ 94762:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AWSPeerVpc = void 0;
var AWSPeerVpc = (function () {
    function AWSPeerVpc() {
    }
    AWSPeerVpc.getAttributeTypeMap = function () {
        return AWSPeerVpc.attributeTypeMap;
    };
    AWSPeerVpc.discriminator = undefined;
    AWSPeerVpc.attributeTypeMap = [
        {
            "name": "accepterRegionName",
            "baseName": "accepterRegionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "awsAccountId",
            "baseName": "awsAccountId",
            "type": "string",
            "format": ""
        },
        {
            "name": "connectionId",
            "baseName": "connectionId",
            "type": "string",
            "format": ""
        },
        {
            "name": "containerId",
            "baseName": "containerId",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorStateName",
            "baseName": "errorStateName",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "routeTableCidrBlock",
            "baseName": "routeTableCidrBlock",
            "type": "string",
            "format": ""
        },
        {
            "name": "statusName",
            "baseName": "statusName",
            "type": "string",
            "format": ""
        },
        {
            "name": "vpcId",
            "baseName": "vpcId",
            "type": "string",
            "format": ""
        }
    ];
    return AWSPeerVpc;
}());
exports.AWSPeerVpc = AWSPeerVpc;
//# sourceMappingURL=AWSPeerVpc.js.map

/***/ }),

/***/ 88198:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AWSPeerVpcRequest = void 0;
var AWSPeerVpcRequest = (function () {
    function AWSPeerVpcRequest() {
    }
    AWSPeerVpcRequest.getAttributeTypeMap = function () {
        return AWSPeerVpcRequest.attributeTypeMap;
    };
    AWSPeerVpcRequest.discriminator = undefined;
    AWSPeerVpcRequest.attributeTypeMap = [
        {
            "name": "containerId",
            "baseName": "containerId",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "accepterRegionName",
            "baseName": "accepterRegionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "awsAccountId",
            "baseName": "awsAccountId",
            "type": "string",
            "format": ""
        },
        {
            "name": "connectionId",
            "baseName": "connectionId",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorStateName",
            "baseName": "errorStateName",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "routeTableCidrBlock",
            "baseName": "routeTableCidrBlock",
            "type": "string",
            "format": ""
        },
        {
            "name": "statusName",
            "baseName": "statusName",
            "type": "string",
            "format": ""
        },
        {
            "name": "vpcId",
            "baseName": "vpcId",
            "type": "string",
            "format": ""
        }
    ];
    return AWSPeerVpcRequest;
}());
exports.AWSPeerVpcRequest = AWSPeerVpcRequest;
//# sourceMappingURL=AWSPeerVpcRequest.js.map

/***/ }),

/***/ 98364:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AWSPrivateLinkConnection = void 0;
var AWSPrivateLinkConnection = (function () {
    function AWSPrivateLinkConnection() {
    }
    AWSPrivateLinkConnection.getAttributeTypeMap = function () {
        return AWSPrivateLinkConnection.attributeTypeMap;
    };
    AWSPrivateLinkConnection.discriminator = undefined;
    AWSPrivateLinkConnection.attributeTypeMap = [
        {
            "name": "endpointServiceName",
            "baseName": "endpointServiceName",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorMessage",
            "baseName": "errorMessage",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "interfaceEndpoints",
            "baseName": "interfaceEndpoints",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "regionName",
            "baseName": "regionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        }
    ];
    return AWSPrivateLinkConnection;
}());
exports.AWSPrivateLinkConnection = AWSPrivateLinkConnection;
//# sourceMappingURL=AWSPrivateLinkConnection.js.map

/***/ }),

/***/ 94419:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AWSProviderSettings = void 0;
var AWSProviderSettings = (function () {
    function AWSProviderSettings() {
    }
    AWSProviderSettings.getAttributeTypeMap = function () {
        return AWSProviderSettings.attributeTypeMap;
    };
    AWSProviderSettings.discriminator = undefined;
    AWSProviderSettings.attributeTypeMap = [
        {
            "name": "autoScaling",
            "baseName": "autoScaling",
            "type": "AWSAutoScaling",
            "format": ""
        },
        {
            "name": "diskIOPS",
            "baseName": "diskIOPS",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "encryptEBSVolume",
            "baseName": "encryptEBSVolume",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "instanceSizeName",
            "baseName": "instanceSizeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "regionName",
            "baseName": "regionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "volumeType",
            "baseName": "volumeType",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        }
    ];
    return AWSProviderSettings;
}());
exports.AWSProviderSettings = AWSProviderSettings;
//# sourceMappingURL=AWSProviderSettings.js.map

/***/ }),

/***/ 40980:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AWSRegionConfig = void 0;
var AWSRegionConfig = (function () {
    function AWSRegionConfig() {
    }
    AWSRegionConfig.getAttributeTypeMap = function () {
        return AWSRegionConfig.attributeTypeMap;
    };
    AWSRegionConfig.discriminator = undefined;
    AWSRegionConfig.attributeTypeMap = [
        {
            "name": "analyticsAutoScaling",
            "baseName": "analyticsAutoScaling",
            "type": "AutoScalingV15",
            "format": ""
        },
        {
            "name": "analyticsSpecs",
            "baseName": "analyticsSpecs",
            "type": "DedicatedHardwareSpec",
            "format": ""
        },
        {
            "name": "autoScaling",
            "baseName": "autoScaling",
            "type": "AutoScalingV15",
            "format": ""
        },
        {
            "name": "readOnlySpecs",
            "baseName": "readOnlySpecs",
            "type": "DedicatedHardwareSpec",
            "format": ""
        },
        {
            "name": "electableSpecs",
            "baseName": "electableSpecs",
            "type": "HardwareSpec",
            "format": ""
        },
        {
            "name": "priority",
            "baseName": "priority",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "regionName",
            "baseName": "regionName",
            "type": "string",
            "format": ""
        }
    ];
    return AWSRegionConfig;
}());
exports.AWSRegionConfig = AWSRegionConfig;
//# sourceMappingURL=AWSRegionConfig.js.map

/***/ }),

/***/ 42387:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AccessListItemView = void 0;
var AccessListItemView = (function () {
    function AccessListItemView() {
    }
    AccessListItemView.getAttributeTypeMap = function () {
        return AccessListItemView.attributeTypeMap;
    };
    AccessListItemView.discriminator = undefined;
    AccessListItemView.attributeTypeMap = [
        {
            "name": "cidrBlock",
            "baseName": "cidrBlock",
            "type": "string",
            "format": ""
        },
        {
            "name": "ipAddress",
            "baseName": "ipAddress",
            "type": "string",
            "format": ""
        }
    ];
    return AccessListItemView;
}());
exports.AccessListItemView = AccessListItemView;
//# sourceMappingURL=AccessListItemView.js.map

/***/ }),

/***/ 77438:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=AlertAuditTypeView.js.map

/***/ }),

/***/ 85042:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AlertAuditView = void 0;
var AlertAuditView = (function () {
    function AlertAuditView() {
    }
    AlertAuditView.getAttributeTypeMap = function () {
        return AlertAuditView.attributeTypeMap;
    };
    AlertAuditView.discriminator = undefined;
    AlertAuditView.attributeTypeMap = [
        {
            "name": "alertId",
            "baseName": "alertId",
            "type": "string",
            "format": ""
        },
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "AlertAuditTypeView",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return AlertAuditView;
}());
exports.AlertAuditView = AlertAuditView;
//# sourceMappingURL=AlertAuditView.js.map

/***/ }),

/***/ 864:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=AlertConfigAuditTypeView.js.map

/***/ }),

/***/ 90102:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AlertConfigAuditView = void 0;
var AlertConfigAuditView = (function () {
    function AlertConfigAuditView() {
    }
    AlertConfigAuditView.getAttributeTypeMap = function () {
        return AlertConfigAuditView.attributeTypeMap;
    };
    AlertConfigAuditView.discriminator = undefined;
    AlertConfigAuditView.attributeTypeMap = [
        {
            "name": "alertConfigId",
            "baseName": "alertConfigId",
            "type": "string",
            "format": ""
        },
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "AlertConfigAuditTypeView",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return AlertConfigAuditView;
}());
exports.AlertConfigAuditView = AlertConfigAuditView;
//# sourceMappingURL=AlertConfigAuditView.js.map

/***/ }),

/***/ 23261:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AlertConfigView = void 0;
var AlertConfigView = (function () {
    function AlertConfigView() {
    }
    AlertConfigView.getAttributeTypeMap = function () {
        return AlertConfigView.attributeTypeMap;
    };
    AlertConfigView.discriminator = undefined;
    AlertConfigView.attributeTypeMap = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "matchers",
            "baseName": "matchers",
            "type": "Array<MatcherView>",
            "format": ""
        },
        {
            "name": "notifications",
            "baseName": "notifications",
            "type": "Array<NotificationView>",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return AlertConfigView;
}());
exports.AlertConfigView = AlertConfigView;
//# sourceMappingURL=AlertConfigView.js.map

/***/ }),

/***/ 31297:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AlertConfigViewForNdsGroup = void 0;
var AlertConfigViewForNdsGroup = (function () {
    function AlertConfigViewForNdsGroup() {
    }
    AlertConfigViewForNdsGroup.getAttributeTypeMap = function () {
        return AlertConfigViewForNdsGroup.attributeTypeMap;
    };
    AlertConfigViewForNdsGroup.discriminator = undefined;
    AlertConfigViewForNdsGroup.attributeTypeMap = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "ServerlessEventTypeViewAlertable",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "matchers",
            "baseName": "matchers",
            "type": "Array<MatcherView>",
            "format": ""
        },
        {
            "name": "notifications",
            "baseName": "notifications",
            "type": "Array<NotificationViewForNdsGroup>",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "metricThreshold",
            "baseName": "metricThreshold",
            "type": "ServerlessMetricThresholdView",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "ThresholdViewInteger",
            "format": ""
        }
    ];
    return AlertConfigViewForNdsGroup;
}());
exports.AlertConfigViewForNdsGroup = AlertConfigViewForNdsGroup;
//# sourceMappingURL=AlertConfigViewForNdsGroup.js.map

/***/ }),

/***/ 74164:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AlertView = void 0;
var AlertView = (function () {
    function AlertView() {
    }
    AlertView.getAttributeTypeMap = function () {
        return AlertView.attributeTypeMap;
    };
    AlertView.discriminator = undefined;
    AlertView.attributeTypeMap = [
        {
            "name": "acknowledgedUntil",
            "baseName": "acknowledgedUntil",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "acknowledgementComment",
            "baseName": "acknowledgementComment",
            "type": "string",
            "format": ""
        },
        {
            "name": "acknowledgingUsername",
            "baseName": "acknowledgingUsername",
            "type": "string",
            "format": "email"
        },
        {
            "name": "alertConfigId",
            "baseName": "alertConfigId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "lastNotified",
            "baseName": "lastNotified",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "resolved",
            "baseName": "resolved",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return AlertView;
}());
exports.AlertView = AlertView;
//# sourceMappingURL=AlertView.js.map

/***/ }),

/***/ 89972:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AlertViewForNdsGroup = void 0;
var AlertViewForNdsGroup = (function () {
    function AlertViewForNdsGroup() {
    }
    AlertViewForNdsGroup.getAttributeTypeMap = function () {
        return AlertViewForNdsGroup.attributeTypeMap;
    };
    AlertViewForNdsGroup.discriminator = undefined;
    AlertViewForNdsGroup.attributeTypeMap = [
        {
            "name": "acknowledgedUntil",
            "baseName": "acknowledgedUntil",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "acknowledgementComment",
            "baseName": "acknowledgementComment",
            "type": "string",
            "format": ""
        },
        {
            "name": "acknowledgingUsername",
            "baseName": "acknowledgingUsername",
            "type": "string",
            "format": "email"
        },
        {
            "name": "alertConfigId",
            "baseName": "alertConfigId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "ReplicaSetEventTypeViewForNdsGroupAlertable",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "lastNotified",
            "baseName": "lastNotified",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "resolved",
            "baseName": "resolved",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "hostnameAndPort",
            "baseName": "hostnameAndPort",
            "type": "string",
            "format": ""
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "currentValue",
            "baseName": "currentValue",
            "type": "HostMetricValueView",
            "format": ""
        },
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string",
            "format": ""
        },
        {
            "name": "nonRunningHostIds",
            "baseName": "nonRunningHostIds",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "parentClusterId",
            "baseName": "parentClusterId",
            "type": "string",
            "format": ""
        }
    ];
    return AlertViewForNdsGroup;
}());
exports.AlertViewForNdsGroup = AlertViewForNdsGroup;
//# sourceMappingURL=AlertViewForNdsGroup.js.map

/***/ }),

/***/ 70841:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiAddUserToTeamView = void 0;
var ApiAddUserToTeamView = (function () {
    function ApiAddUserToTeamView() {
    }
    ApiAddUserToTeamView.getAttributeTypeMap = function () {
        return ApiAddUserToTeamView.attributeTypeMap;
    };
    ApiAddUserToTeamView.discriminator = undefined;
    ApiAddUserToTeamView.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        }
    ];
    return ApiAddUserToTeamView;
}());
exports.ApiAddUserToTeamView = ApiAddUserToTeamView;
//# sourceMappingURL=ApiAddUserToTeamView.js.map

/***/ }),

/***/ 94832:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiApiUserView = void 0;
var ApiApiUserView = (function () {
    function ApiApiUserView() {
    }
    ApiApiUserView.getAttributeTypeMap = function () {
        return ApiApiUserView.attributeTypeMap;
    };
    ApiApiUserView.discriminator = undefined;
    ApiApiUserView.attributeTypeMap = [
        {
            "name": "desc",
            "baseName": "desc",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "privateKey",
            "baseName": "privateKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Array<ApiRoleAssignmentView>",
            "format": ""
        }
    ];
    return ApiApiUserView;
}());
exports.ApiApiUserView = ApiApiUserView;
//# sourceMappingURL=ApiApiUserView.js.map

/***/ }),

/***/ 12737:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiAppUserView = void 0;
var ApiAppUserView = (function () {
    function ApiAppUserView() {
    }
    ApiAppUserView.getAttributeTypeMap = function () {
        return ApiAppUserView.attributeTypeMap;
    };
    ApiAppUserView.discriminator = undefined;
    ApiAppUserView.attributeTypeMap = [
        {
            "name": "country",
            "baseName": "country",
            "type": "string",
            "format": ""
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "emailAddress",
            "baseName": "emailAddress",
            "type": "string",
            "format": "email"
        },
        {
            "name": "firstName",
            "baseName": "firstName",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "lastAuth",
            "baseName": "lastAuth",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "lastName",
            "baseName": "lastName",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "mobileNumber",
            "baseName": "mobileNumber",
            "type": "string",
            "format": ""
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string",
            "format": ""
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Array<ApiRoleAssignmentView>",
            "format": ""
        },
        {
            "name": "teamIds",
            "baseName": "teamIds",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return ApiAppUserView;
}());
exports.ApiAppUserView = ApiAppUserView;
//# sourceMappingURL=ApiAppUserView.js.map

/***/ }),

/***/ 13986:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiAtlasContainerPeerViewRequest = void 0;
var ApiAtlasContainerPeerViewRequest = (function () {
    function ApiAtlasContainerPeerViewRequest() {
    }
    ApiAtlasContainerPeerViewRequest.getAttributeTypeMap = function () {
        return ApiAtlasContainerPeerViewRequest.attributeTypeMap;
    };
    ApiAtlasContainerPeerViewRequest.discriminator = "providerName";
    ApiAtlasContainerPeerViewRequest.attributeTypeMap = [
        {
            "name": "containerId",
            "baseName": "containerId",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "accepterRegionName",
            "baseName": "accepterRegionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "awsAccountId",
            "baseName": "awsAccountId",
            "type": "string",
            "format": ""
        },
        {
            "name": "connectionId",
            "baseName": "connectionId",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorStateName",
            "baseName": "errorStateName",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "routeTableCidrBlock",
            "baseName": "routeTableCidrBlock",
            "type": "string",
            "format": ""
        },
        {
            "name": "statusName",
            "baseName": "statusName",
            "type": "string",
            "format": ""
        },
        {
            "name": "vpcId",
            "baseName": "vpcId",
            "type": "string",
            "format": ""
        },
        {
            "name": "azureDirectoryId",
            "baseName": "azureDirectoryId",
            "type": "string",
            "format": ""
        },
        {
            "name": "azureSubscriptionId",
            "baseName": "azureSubscriptionId",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorState",
            "baseName": "errorState",
            "type": "string",
            "format": ""
        },
        {
            "name": "resourceGroupName",
            "baseName": "resourceGroupName",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "vnetName",
            "baseName": "vnetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorMessage",
            "baseName": "errorMessage",
            "type": "string",
            "format": ""
        },
        {
            "name": "gcpProjectId",
            "baseName": "gcpProjectId",
            "type": "string",
            "format": ""
        },
        {
            "name": "networkName",
            "baseName": "networkName",
            "type": "string",
            "format": ""
        }
    ];
    return ApiAtlasContainerPeerViewRequest;
}());
exports.ApiAtlasContainerPeerViewRequest = ApiAtlasContainerPeerViewRequest;
//# sourceMappingURL=ApiAtlasContainerPeerViewRequest.js.map

/***/ }),

/***/ 97674:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiAtlasFTSAnalyzersViewManual = void 0;
var ApiAtlasFTSAnalyzersViewManual = (function () {
    function ApiAtlasFTSAnalyzersViewManual() {
    }
    ApiAtlasFTSAnalyzersViewManual.getAttributeTypeMap = function () {
        return ApiAtlasFTSAnalyzersViewManual.attributeTypeMap;
    };
    ApiAtlasFTSAnalyzersViewManual.discriminator = undefined;
    ApiAtlasFTSAnalyzersViewManual.attributeTypeMap = [
        {
            "name": "charFilters",
            "baseName": "charFilters",
            "type": "Array<ApiAtlasFTSAnalyzersViewManualCharFiltersInner>",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "tokenFilters",
            "baseName": "tokenFilters",
            "type": "Array<ApiAtlasFTSAnalyzersViewManualTokenFiltersInner>",
            "format": ""
        },
        {
            "name": "tokenizer",
            "baseName": "tokenizer",
            "type": "ApiAtlasFTSAnalyzersViewManualTokenizer",
            "format": ""
        }
    ];
    return ApiAtlasFTSAnalyzersViewManual;
}());
exports.ApiAtlasFTSAnalyzersViewManual = ApiAtlasFTSAnalyzersViewManual;
//# sourceMappingURL=ApiAtlasFTSAnalyzersViewManual.js.map

/***/ }),

/***/ 5431:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiAtlasFTSAnalyzersViewManualCharFiltersInner = void 0;
var ApiAtlasFTSAnalyzersViewManualCharFiltersInner = (function () {
    function ApiAtlasFTSAnalyzersViewManualCharFiltersInner() {
    }
    ApiAtlasFTSAnalyzersViewManualCharFiltersInner.getAttributeTypeMap = function () {
        return ApiAtlasFTSAnalyzersViewManualCharFiltersInner.attributeTypeMap;
    };
    ApiAtlasFTSAnalyzersViewManualCharFiltersInner.discriminator = undefined;
    ApiAtlasFTSAnalyzersViewManualCharFiltersInner.attributeTypeMap = [
        {
            "name": "ignoredTags",
            "baseName": "ignoredTags",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "mappings",
            "baseName": "mappings",
            "type": "CharFiltermappingMappings",
            "format": ""
        }
    ];
    return ApiAtlasFTSAnalyzersViewManualCharFiltersInner;
}());
exports.ApiAtlasFTSAnalyzersViewManualCharFiltersInner = ApiAtlasFTSAnalyzersViewManualCharFiltersInner;
//# sourceMappingURL=ApiAtlasFTSAnalyzersViewManualCharFiltersInner.js.map

/***/ }),

/***/ 15815:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiAtlasFTSAnalyzersViewManualTokenFiltersInner = void 0;
var ApiAtlasFTSAnalyzersViewManualTokenFiltersInner = (function () {
    function ApiAtlasFTSAnalyzersViewManualTokenFiltersInner() {
    }
    ApiAtlasFTSAnalyzersViewManualTokenFiltersInner.getAttributeTypeMap = function () {
        return ApiAtlasFTSAnalyzersViewManualTokenFiltersInner.attributeTypeMap;
    };
    ApiAtlasFTSAnalyzersViewManualTokenFiltersInner.discriminator = undefined;
    ApiAtlasFTSAnalyzersViewManualTokenFiltersInner.attributeTypeMap = [
        {
            "name": "originalTokens",
            "baseName": "originalTokens",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "maxGram",
            "baseName": "maxGram",
            "type": "number",
            "format": ""
        },
        {
            "name": "minGram",
            "baseName": "minGram",
            "type": "number",
            "format": ""
        },
        {
            "name": "termNotInBounds",
            "baseName": "termNotInBounds",
            "type": "string",
            "format": ""
        },
        {
            "name": "normalizationForm",
            "baseName": "normalizationForm",
            "type": "string",
            "format": ""
        },
        {
            "name": "max",
            "baseName": "max",
            "type": "number",
            "format": ""
        },
        {
            "name": "min",
            "baseName": "min",
            "type": "number",
            "format": ""
        },
        {
            "name": "matches",
            "baseName": "matches",
            "type": "string",
            "format": ""
        },
        {
            "name": "pattern",
            "baseName": "pattern",
            "type": "string",
            "format": ""
        },
        {
            "name": "replacement",
            "baseName": "replacement",
            "type": "string",
            "format": ""
        },
        {
            "name": "maxShingleSize",
            "baseName": "maxShingleSize",
            "type": "number",
            "format": ""
        },
        {
            "name": "minShingleSize",
            "baseName": "minShingleSize",
            "type": "number",
            "format": ""
        },
        {
            "name": "stemmerName",
            "baseName": "stemmerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "ignoreCase",
            "baseName": "ignoreCase",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "tokens",
            "baseName": "tokens",
            "type": "Array<string>",
            "format": ""
        }
    ];
    return ApiAtlasFTSAnalyzersViewManualTokenFiltersInner;
}());
exports.ApiAtlasFTSAnalyzersViewManualTokenFiltersInner = ApiAtlasFTSAnalyzersViewManualTokenFiltersInner;
//# sourceMappingURL=ApiAtlasFTSAnalyzersViewManualTokenFiltersInner.js.map

/***/ }),

/***/ 24691:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiAtlasFTSAnalyzersViewManualTokenizer = void 0;
var ApiAtlasFTSAnalyzersViewManualTokenizer = (function () {
    function ApiAtlasFTSAnalyzersViewManualTokenizer() {
    }
    ApiAtlasFTSAnalyzersViewManualTokenizer.getAttributeTypeMap = function () {
        return ApiAtlasFTSAnalyzersViewManualTokenizer.attributeTypeMap;
    };
    ApiAtlasFTSAnalyzersViewManualTokenizer.discriminator = undefined;
    ApiAtlasFTSAnalyzersViewManualTokenizer.attributeTypeMap = [
        {
            "name": "maxGram",
            "baseName": "maxGram",
            "type": "number",
            "format": ""
        },
        {
            "name": "minGram",
            "baseName": "minGram",
            "type": "number",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "group",
            "baseName": "group",
            "type": "number",
            "format": ""
        },
        {
            "name": "pattern",
            "baseName": "pattern",
            "type": "string",
            "format": ""
        },
        {
            "name": "maxTokenLength",
            "baseName": "maxTokenLength",
            "type": "number",
            "format": ""
        }
    ];
    return ApiAtlasFTSAnalyzersViewManualTokenizer;
}());
exports.ApiAtlasFTSAnalyzersViewManualTokenizer = ApiAtlasFTSAnalyzersViewManualTokenizer;
//# sourceMappingURL=ApiAtlasFTSAnalyzersViewManualTokenizer.js.map

/***/ }),

/***/ 89363:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiAtlasFTSMappingsViewManual = void 0;
var ApiAtlasFTSMappingsViewManual = (function () {
    function ApiAtlasFTSMappingsViewManual() {
    }
    ApiAtlasFTSMappingsViewManual.getAttributeTypeMap = function () {
        return ApiAtlasFTSMappingsViewManual.attributeTypeMap;
    };
    ApiAtlasFTSMappingsViewManual.discriminator = undefined;
    ApiAtlasFTSMappingsViewManual.attributeTypeMap = [
        {
            "name": "dynamic",
            "baseName": "dynamic",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "fields",
            "baseName": "fields",
            "type": "{ [key: string]: any; }",
            "format": ""
        }
    ];
    return ApiAtlasFTSMappingsViewManual;
}());
exports.ApiAtlasFTSMappingsViewManual = ApiAtlasFTSMappingsViewManual;
//# sourceMappingURL=ApiAtlasFTSMappingsViewManual.js.map

/***/ }),

/***/ 68306:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiAtlasNetPeerRequestBase = void 0;
var ApiAtlasNetPeerRequestBase = (function () {
    function ApiAtlasNetPeerRequestBase() {
    }
    ApiAtlasNetPeerRequestBase.getAttributeTypeMap = function () {
        return ApiAtlasNetPeerRequestBase.attributeTypeMap;
    };
    ApiAtlasNetPeerRequestBase.discriminator = undefined;
    ApiAtlasNetPeerRequestBase.attributeTypeMap = [
        {
            "name": "containerId",
            "baseName": "containerId",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        }
    ];
    return ApiAtlasNetPeerRequestBase;
}());
exports.ApiAtlasNetPeerRequestBase = ApiAtlasNetPeerRequestBase;
//# sourceMappingURL=ApiAtlasNetPeerRequestBase.js.map

/***/ }),

/***/ 90071:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiAvailableRegionView = void 0;
var ApiAvailableRegionView = (function () {
    function ApiAvailableRegionView() {
    }
    ApiAvailableRegionView.getAttributeTypeMap = function () {
        return ApiAvailableRegionView.attributeTypeMap;
    };
    ApiAvailableRegionView.discriminator = undefined;
    ApiAvailableRegionView.attributeTypeMap = [
        {
            "name": "_default",
            "baseName": "default",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        }
    ];
    return ApiAvailableRegionView;
}());
exports.ApiAvailableRegionView = ApiAvailableRegionView;
//# sourceMappingURL=ApiAvailableRegionView.js.map

/***/ }),

/***/ 32047:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiBSONTimestampView = void 0;
var ApiBSONTimestampView = (function () {
    function ApiBSONTimestampView() {
    }
    ApiBSONTimestampView.getAttributeTypeMap = function () {
        return ApiBSONTimestampView.attributeTypeMap;
    };
    ApiBSONTimestampView.discriminator = undefined;
    ApiBSONTimestampView.attributeTypeMap = [
        {
            "name": "date",
            "baseName": "date",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "increment",
            "baseName": "increment",
            "type": "number",
            "format": "int32"
        }
    ];
    return ApiBSONTimestampView;
}());
exports.ApiBSONTimestampView = ApiBSONTimestampView;
//# sourceMappingURL=ApiBSONTimestampView.js.map

/***/ }),

/***/ 39360:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiCheckpointPartView = void 0;
var ApiCheckpointPartView = (function () {
    function ApiCheckpointPartView() {
    }
    ApiCheckpointPartView.getAttributeTypeMap = function () {
        return ApiCheckpointPartView.attributeTypeMap;
    };
    ApiCheckpointPartView.discriminator = undefined;
    ApiCheckpointPartView.attributeTypeMap = [
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "shardName",
            "baseName": "shardName",
            "type": "string",
            "format": ""
        },
        {
            "name": "tokenDiscovered",
            "baseName": "tokenDiscovered",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "tokenTimestamp",
            "baseName": "tokenTimestamp",
            "type": "ApiBSONTimestampView",
            "format": ""
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        }
    ];
    return ApiCheckpointPartView;
}());
exports.ApiCheckpointPartView = ApiCheckpointPartView;
//# sourceMappingURL=ApiCheckpointPartView.js.map

/***/ }),

/***/ 85511:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiCreateApiKeyView = void 0;
var ApiCreateApiKeyView = (function () {
    function ApiCreateApiKeyView() {
    }
    ApiCreateApiKeyView.getAttributeTypeMap = function () {
        return ApiCreateApiKeyView.attributeTypeMap;
    };
    ApiCreateApiKeyView.discriminator = undefined;
    ApiCreateApiKeyView.attributeTypeMap = [
        {
            "name": "desc",
            "baseName": "desc",
            "type": "string",
            "format": ""
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Array<string>",
            "format": ""
        }
    ];
    return ApiCreateApiKeyView;
}());
exports.ApiCreateApiKeyView = ApiCreateApiKeyView;
//# sourceMappingURL=ApiCreateApiKeyView.js.map

/***/ }),

/***/ 76309:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiDatabaseView = void 0;
var ApiDatabaseView = (function () {
    function ApiDatabaseView() {
    }
    ApiDatabaseView.getAttributeTypeMap = function () {
        return ApiDatabaseView.attributeTypeMap;
    };
    ApiDatabaseView.discriminator = undefined;
    ApiDatabaseView.attributeTypeMap = [
        {
            "name": "databaseName",
            "baseName": "databaseName",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        }
    ];
    return ApiDatabaseView;
}());
exports.ApiDatabaseView = ApiDatabaseView;
//# sourceMappingURL=ApiDatabaseView.js.map

/***/ }),

/***/ 95083:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiDatadogView = void 0;
var ApiDatadogView = (function () {
    function ApiDatadogView() {
    }
    ApiDatadogView.getAttributeTypeMap = function () {
        return ApiDatadogView.attributeTypeMap;
    };
    ApiDatadogView.discriminator = undefined;
    ApiDatadogView.attributeTypeMap = [
        {
            "name": "apiKey",
            "baseName": "apiKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "region",
            "baseName": "region",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return ApiDatadogView;
}());
exports.ApiDatadogView = ApiDatadogView;
//# sourceMappingURL=ApiDatadogView.js.map

/***/ }),

/***/ 34027:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiDeleteCopiedBackupsView = void 0;
var ApiDeleteCopiedBackupsView = (function () {
    function ApiDeleteCopiedBackupsView() {
    }
    ApiDeleteCopiedBackupsView.getAttributeTypeMap = function () {
        return ApiDeleteCopiedBackupsView.attributeTypeMap;
    };
    ApiDeleteCopiedBackupsView.discriminator = undefined;
    ApiDeleteCopiedBackupsView.attributeTypeMap = [
        {
            "name": "cloudProvider",
            "baseName": "cloudProvider",
            "type": "string",
            "format": ""
        },
        {
            "name": "regionName",
            "baseName": "regionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "replicationSpecId",
            "baseName": "replicationSpecId",
            "type": "string",
            "format": ""
        }
    ];
    return ApiDeleteCopiedBackupsView;
}());
exports.ApiDeleteCopiedBackupsView = ApiDeleteCopiedBackupsView;
//# sourceMappingURL=ApiDeleteCopiedBackupsView.js.map

/***/ }),

/***/ 21464:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiDiskPartitionView = void 0;
var ApiDiskPartitionView = (function () {
    function ApiDiskPartitionView() {
    }
    ApiDiskPartitionView.getAttributeTypeMap = function () {
        return ApiDiskPartitionView.attributeTypeMap;
    };
    ApiDiskPartitionView.discriminator = undefined;
    ApiDiskPartitionView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "partitionName",
            "baseName": "partitionName",
            "type": "string",
            "format": ""
        }
    ];
    return ApiDiskPartitionView;
}());
exports.ApiDiskPartitionView = ApiDiskPartitionView;
//# sourceMappingURL=ApiDiskPartitionView.js.map

/***/ }),

/***/ 38365:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiError = void 0;
var ApiError = (function () {
    function ApiError() {
    }
    ApiError.getAttributeTypeMap = function () {
        return ApiError.attributeTypeMap;
    };
    ApiError.discriminator = undefined;
    ApiError.attributeTypeMap = [
        {
            "name": "detail",
            "baseName": "detail",
            "type": "string",
            "format": ""
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "errorCode",
            "baseName": "errorCode",
            "type": "string",
            "format": ""
        },
        {
            "name": "parameters",
            "baseName": "parameters",
            "type": "Array<any>",
            "format": ""
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string",
            "format": ""
        }
    ];
    return ApiError;
}());
exports.ApiError = ApiError;
//# sourceMappingURL=ApiError.js.map

/***/ }),

/***/ 16946:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiExportStatusView = void 0;
var ApiExportStatusView = (function () {
    function ApiExportStatusView() {
    }
    ApiExportStatusView.getAttributeTypeMap = function () {
        return ApiExportStatusView.attributeTypeMap;
    };
    ApiExportStatusView.discriminator = undefined;
    ApiExportStatusView.attributeTypeMap = [
        {
            "name": "exportedCollections",
            "baseName": "exportedCollections",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "totalCollections",
            "baseName": "totalCollections",
            "type": "number",
            "format": "int32"
        }
    ];
    return ApiExportStatusView;
}());
exports.ApiExportStatusView = ApiExportStatusView;
//# sourceMappingURL=ApiExportStatusView.js.map

/***/ }),

/***/ 37262:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiFTSMetricView = void 0;
var ApiFTSMetricView = (function () {
    function ApiFTSMetricView() {
    }
    ApiFTSMetricView.getAttributeTypeMap = function () {
        return ApiFTSMetricView.attributeTypeMap;
    };
    ApiFTSMetricView.discriminator = undefined;
    ApiFTSMetricView.attributeTypeMap = [
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string",
            "format": ""
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "string",
            "format": ""
        }
    ];
    return ApiFTSMetricView;
}());
exports.ApiFTSMetricView = ApiFTSMetricView;
//# sourceMappingURL=ApiFTSMetricView.js.map

/***/ }),

/***/ 15579:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiFTSMetricsView = void 0;
var ApiFTSMetricsView = (function () {
    function ApiFTSMetricsView() {
    }
    ApiFTSMetricsView.getAttributeTypeMap = function () {
        return ApiFTSMetricsView.attributeTypeMap;
    };
    ApiFTSMetricsView.discriminator = undefined;
    ApiFTSMetricsView.attributeTypeMap = [
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "hardwareMetrics",
            "baseName": "hardwareMetrics",
            "type": "Array<ApiFTSMetricView>",
            "format": ""
        },
        {
            "name": "indexMetrics",
            "baseName": "indexMetrics",
            "type": "Array<ApiFTSMetricView>",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "processId",
            "baseName": "processId",
            "type": "string",
            "format": ""
        },
        {
            "name": "statusMetrics",
            "baseName": "statusMetrics",
            "type": "Array<ApiFTSMetricView>",
            "format": ""
        }
    ];
    return ApiFTSMetricsView;
}());
exports.ApiFTSMetricsView = ApiFTSMetricsView;
//# sourceMappingURL=ApiFTSMetricsView.js.map

/***/ }),

/***/ 66888:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiGroupInvitationRequestView = void 0;
var ApiGroupInvitationRequestView = (function () {
    function ApiGroupInvitationRequestView() {
    }
    ApiGroupInvitationRequestView.getAttributeTypeMap = function () {
        return ApiGroupInvitationRequestView.attributeTypeMap;
    };
    ApiGroupInvitationRequestView.discriminator = undefined;
    ApiGroupInvitationRequestView.attributeTypeMap = [
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return ApiGroupInvitationRequestView;
}());
exports.ApiGroupInvitationRequestView = ApiGroupInvitationRequestView;
//# sourceMappingURL=ApiGroupInvitationRequestView.js.map

/***/ }),

/***/ 50374:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiGroupInvitationUpdateRequestView = void 0;
var ApiGroupInvitationUpdateRequestView = (function () {
    function ApiGroupInvitationUpdateRequestView() {
    }
    ApiGroupInvitationUpdateRequestView.getAttributeTypeMap = function () {
        return ApiGroupInvitationUpdateRequestView.attributeTypeMap;
    };
    ApiGroupInvitationUpdateRequestView.discriminator = undefined;
    ApiGroupInvitationUpdateRequestView.attributeTypeMap = [
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Set<string>",
            "format": ""
        }
    ];
    return ApiGroupInvitationUpdateRequestView;
}());
exports.ApiGroupInvitationUpdateRequestView = ApiGroupInvitationUpdateRequestView;
//# sourceMappingURL=ApiGroupInvitationUpdateRequestView.js.map

/***/ }),

/***/ 30100:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiGroupInvitationView = void 0;
var ApiGroupInvitationView = (function () {
    function ApiGroupInvitationView() {
    }
    ApiGroupInvitationView.getAttributeTypeMap = function () {
        return ApiGroupInvitationView.attributeTypeMap;
    };
    ApiGroupInvitationView.discriminator = undefined;
    ApiGroupInvitationView.attributeTypeMap = [
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "expiresAt",
            "baseName": "expiresAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupName",
            "baseName": "groupName",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "inviterUsername",
            "baseName": "inviterUsername",
            "type": "string",
            "format": "email"
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return ApiGroupInvitationView;
}());
exports.ApiGroupInvitationView = ApiGroupInvitationView;
//# sourceMappingURL=ApiGroupInvitationView.js.map

/***/ }),

/***/ 83615:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiHostViewAtlas = void 0;
var ApiHostViewAtlas = (function () {
    function ApiHostViewAtlas() {
    }
    ApiHostViewAtlas.getAttributeTypeMap = function () {
        return ApiHostViewAtlas.attributeTypeMap;
    };
    ApiHostViewAtlas.discriminator = undefined;
    ApiHostViewAtlas.attributeTypeMap = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "hostname",
            "baseName": "hostname",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "lastPing",
            "baseName": "lastPing",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<LinkAtlas>",
            "format": ""
        },
        {
            "name": "port",
            "baseName": "port",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "userAlias",
            "baseName": "userAlias",
            "type": "string",
            "format": ""
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "string",
            "format": ""
        }
    ];
    return ApiHostViewAtlas;
}());
exports.ApiHostViewAtlas = ApiHostViewAtlas;
//# sourceMappingURL=ApiHostViewAtlas.js.map

/***/ }),

/***/ 19924:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiIndexRequestView = void 0;
var ApiIndexRequestView = (function () {
    function ApiIndexRequestView() {
    }
    ApiIndexRequestView.getAttributeTypeMap = function () {
        return ApiIndexRequestView.attributeTypeMap;
    };
    ApiIndexRequestView.discriminator = undefined;
    ApiIndexRequestView.attributeTypeMap = [
        {
            "name": "collation",
            "baseName": "collation",
            "type": "Collation",
            "format": ""
        },
        {
            "name": "collection",
            "baseName": "collection",
            "type": "string",
            "format": ""
        },
        {
            "name": "db",
            "baseName": "db",
            "type": "string",
            "format": ""
        },
        {
            "name": "keys",
            "baseName": "keys",
            "type": "Array<{ [key: string]: string; }>",
            "format": ""
        },
        {
            "name": "options",
            "baseName": "options",
            "type": "IndexOptions",
            "format": ""
        }
    ];
    return ApiIndexRequestView;
}());
exports.ApiIndexRequestView = ApiIndexRequestView;
//# sourceMappingURL=ApiIndexRequestView.js.map

/***/ }),

/***/ 37445:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiInstanceSizeView = void 0;
var ApiInstanceSizeView = (function () {
    function ApiInstanceSizeView() {
    }
    ApiInstanceSizeView.getAttributeTypeMap = function () {
        return ApiInstanceSizeView.attributeTypeMap;
    };
    ApiInstanceSizeView.discriminator = undefined;
    ApiInstanceSizeView.attributeTypeMap = [
        {
            "name": "availableRegions",
            "baseName": "availableRegions",
            "type": "Array<ApiAvailableRegionView>",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        }
    ];
    return ApiInstanceSizeView;
}());
exports.ApiInstanceSizeView = ApiInstanceSizeView;
//# sourceMappingURL=ApiInstanceSizeView.js.map

/***/ }),

/***/ 31954:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiIntegrationView = void 0;
var ApiIntegrationView = (function () {
    function ApiIntegrationView() {
    }
    ApiIntegrationView.getAttributeTypeMap = function () {
        return ApiIntegrationView.attributeTypeMap;
    };
    ApiIntegrationView.discriminator = undefined;
    ApiIntegrationView.attributeTypeMap = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return ApiIntegrationView;
}());
exports.ApiIntegrationView = ApiIntegrationView;
//# sourceMappingURL=ApiIntegrationView.js.map

/***/ }),

/***/ 75563:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiInvoiceView = void 0;
var ApiInvoiceView = (function () {
    function ApiInvoiceView() {
    }
    ApiInvoiceView.getAttributeTypeMap = function () {
        return ApiInvoiceView.attributeTypeMap;
    };
    ApiInvoiceView.discriminator = undefined;
    ApiInvoiceView.attributeTypeMap = [
        {
            "name": "amountBilledCents",
            "baseName": "amountBilledCents",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "amountPaidCents",
            "baseName": "amountPaidCents",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "creditsCents",
            "baseName": "creditsCents",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "endDate",
            "baseName": "endDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "lineItems",
            "baseName": "lineItems",
            "type": "Array<ApiLineItemView>",
            "format": ""
        },
        {
            "name": "linkedInvoices",
            "baseName": "linkedInvoices",
            "type": "Array<ApiInvoiceView>",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "payments",
            "baseName": "payments",
            "type": "Array<ApiPaymentView>",
            "format": ""
        },
        {
            "name": "refunds",
            "baseName": "refunds",
            "type": "Array<ApiRefundView>",
            "format": ""
        },
        {
            "name": "salesTaxCents",
            "baseName": "salesTaxCents",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "startDate",
            "baseName": "startDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "startingBalanceCents",
            "baseName": "startingBalanceCents",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "statusName",
            "baseName": "statusName",
            "type": "string",
            "format": ""
        },
        {
            "name": "subtotalCents",
            "baseName": "subtotalCents",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return ApiInvoiceView;
}());
exports.ApiInvoiceView = ApiInvoiceView;
//# sourceMappingURL=ApiInvoiceView.js.map

/***/ }),

/***/ 8995:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiKeyView = void 0;
var ApiKeyView = (function () {
    function ApiKeyView() {
    }
    ApiKeyView.getAttributeTypeMap = function () {
        return ApiKeyView.attributeTypeMap;
    };
    ApiKeyView.discriminator = undefined;
    ApiKeyView.attributeTypeMap = [
        {
            "name": "accessList",
            "baseName": "accessList",
            "type": "Array<AccessListItemView>",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Array<ApiRoleAssignmentView>",
            "format": ""
        }
    ];
    return ApiKeyView;
}());
exports.ApiKeyView = ApiKeyView;
//# sourceMappingURL=ApiKeyView.js.map

/***/ }),

/***/ 90811:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiLimitView = void 0;
var ApiLimitView = (function () {
    function ApiLimitView() {
    }
    ApiLimitView.getAttributeTypeMap = function () {
        return ApiLimitView.attributeTypeMap;
    };
    ApiLimitView.discriminator = "name";
    ApiLimitView.attributeTypeMap = [
        {
            "name": "currentUsage",
            "baseName": "currentUsage",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "defaultLimit",
            "baseName": "defaultLimit",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "maximumLimit",
            "baseName": "maximumLimit",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "number",
            "format": "int64"
        }
    ];
    return ApiLimitView;
}());
exports.ApiLimitView = ApiLimitView;
//# sourceMappingURL=ApiLimitView.js.map

/***/ }),

/***/ 2196:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiLineItemView = void 0;
var ApiLineItemView = (function () {
    function ApiLineItemView() {
    }
    ApiLineItemView.getAttributeTypeMap = function () {
        return ApiLineItemView.attributeTypeMap;
    };
    ApiLineItemView.discriminator = undefined;
    ApiLineItemView.attributeTypeMap = [
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "discountCents",
            "baseName": "discountCents",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "endDate",
            "baseName": "endDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupName",
            "baseName": "groupName",
            "type": "string",
            "format": ""
        },
        {
            "name": "note",
            "baseName": "note",
            "type": "string",
            "format": ""
        },
        {
            "name": "percentDiscount",
            "baseName": "percentDiscount",
            "type": "number",
            "format": "float"
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number",
            "format": "double"
        },
        {
            "name": "sku",
            "baseName": "sku",
            "type": "string",
            "format": ""
        },
        {
            "name": "startDate",
            "baseName": "startDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "stitchAppName",
            "baseName": "stitchAppName",
            "type": "string",
            "format": ""
        },
        {
            "name": "tierLowerBound",
            "baseName": "tierLowerBound",
            "type": "number",
            "format": "double"
        },
        {
            "name": "tierUpperBound",
            "baseName": "tierUpperBound",
            "type": "number",
            "format": "double"
        },
        {
            "name": "totalPriceCents",
            "baseName": "totalPriceCents",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "unit",
            "baseName": "unit",
            "type": "string",
            "format": ""
        },
        {
            "name": "unitPriceDollars",
            "baseName": "unitPriceDollars",
            "type": "number",
            "format": "double"
        }
    ];
    return ApiLineItemView;
}());
exports.ApiLineItemView = ApiLineItemView;
//# sourceMappingURL=ApiLineItemView.js.map

/***/ }),

/***/ 86192:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiMeasurementView = void 0;
var ApiMeasurementView = (function () {
    function ApiMeasurementView() {
    }
    ApiMeasurementView.getAttributeTypeMap = function () {
        return ApiMeasurementView.attributeTypeMap;
    };
    ApiMeasurementView.discriminator = undefined;
    ApiMeasurementView.attributeTypeMap = [
        {
            "name": "dataPoints",
            "baseName": "dataPoints",
            "type": "Array<ApiMetricDataPointView>",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "string",
            "format": ""
        }
    ];
    return ApiMeasurementView;
}());
exports.ApiMeasurementView = ApiMeasurementView;
//# sourceMappingURL=ApiMeasurementView.js.map

/***/ }),

/***/ 76345:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiMeasurementViewAtlas = void 0;
var ApiMeasurementViewAtlas = (function () {
    function ApiMeasurementViewAtlas() {
    }
    ApiMeasurementViewAtlas.getAttributeTypeMap = function () {
        return ApiMeasurementViewAtlas.attributeTypeMap;
    };
    ApiMeasurementViewAtlas.discriminator = undefined;
    ApiMeasurementViewAtlas.attributeTypeMap = [
        {
            "name": "dataPoints",
            "baseName": "dataPoints",
            "type": "Array<ApiMetricDataPointViewAtlas>",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "string",
            "format": ""
        }
    ];
    return ApiMeasurementViewAtlas;
}());
exports.ApiMeasurementViewAtlas = ApiMeasurementViewAtlas;
//# sourceMappingURL=ApiMeasurementViewAtlas.js.map

/***/ }),

/***/ 19811:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiMeasurementsGeneralViewAtlas = void 0;
var ApiMeasurementsGeneralViewAtlas = (function () {
    function ApiMeasurementsGeneralViewAtlas() {
    }
    ApiMeasurementsGeneralViewAtlas.getAttributeTypeMap = function () {
        return ApiMeasurementsGeneralViewAtlas.attributeTypeMap;
    };
    ApiMeasurementsGeneralViewAtlas.discriminator = undefined;
    ApiMeasurementsGeneralViewAtlas.attributeTypeMap = [
        {
            "name": "databaseName",
            "baseName": "databaseName",
            "type": "string",
            "format": ""
        },
        {
            "name": "end",
            "baseName": "end",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "granularity",
            "baseName": "granularity",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "hostId",
            "baseName": "hostId",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<LinkAtlas>",
            "format": ""
        },
        {
            "name": "measurements",
            "baseName": "measurements",
            "type": "Array<ApiMeasurementViewAtlas>",
            "format": ""
        },
        {
            "name": "partitionName",
            "baseName": "partitionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "processId",
            "baseName": "processId",
            "type": "string",
            "format": ""
        },
        {
            "name": "start",
            "baseName": "start",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return ApiMeasurementsGeneralViewAtlas;
}());
exports.ApiMeasurementsGeneralViewAtlas = ApiMeasurementsGeneralViewAtlas;
//# sourceMappingURL=ApiMeasurementsGeneralViewAtlas.js.map

/***/ }),

/***/ 3265:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiMeasurementsIndexesView = void 0;
var ApiMeasurementsIndexesView = (function () {
    function ApiMeasurementsIndexesView() {
    }
    ApiMeasurementsIndexesView.getAttributeTypeMap = function () {
        return ApiMeasurementsIndexesView.attributeTypeMap;
    };
    ApiMeasurementsIndexesView.discriminator = undefined;
    ApiMeasurementsIndexesView.attributeTypeMap = [
        {
            "name": "collectionName",
            "baseName": "collectionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "databaseName",
            "baseName": "databaseName",
            "type": "string",
            "format": ""
        },
        {
            "name": "end",
            "baseName": "end",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "granularity",
            "baseName": "granularity",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "indexIds",
            "baseName": "indexIds",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "indexStatsMeasurements",
            "baseName": "indexStatsMeasurements",
            "type": "Array<ApiMeasurementView>",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "processId",
            "baseName": "processId",
            "type": "string",
            "format": ""
        },
        {
            "name": "start",
            "baseName": "start",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return ApiMeasurementsIndexesView;
}());
exports.ApiMeasurementsIndexesView = ApiMeasurementsIndexesView;
//# sourceMappingURL=ApiMeasurementsIndexesView.js.map

/***/ }),

/***/ 27030:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiMeasurementsNonIndexView = void 0;
var ApiMeasurementsNonIndexView = (function () {
    function ApiMeasurementsNonIndexView() {
    }
    ApiMeasurementsNonIndexView.getAttributeTypeMap = function () {
        return ApiMeasurementsNonIndexView.attributeTypeMap;
    };
    ApiMeasurementsNonIndexView.discriminator = undefined;
    ApiMeasurementsNonIndexView.attributeTypeMap = [
        {
            "name": "end",
            "baseName": "end",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "granularity",
            "baseName": "granularity",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "hardwareMeasurements",
            "baseName": "hardwareMeasurements",
            "type": "Array<ApiMeasurementView>",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "processId",
            "baseName": "processId",
            "type": "string",
            "format": ""
        },
        {
            "name": "start",
            "baseName": "start",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "statusMeasurements",
            "baseName": "statusMeasurements",
            "type": "Array<ApiMeasurementView>",
            "format": ""
        }
    ];
    return ApiMeasurementsNonIndexView;
}());
exports.ApiMeasurementsNonIndexView = ApiMeasurementsNonIndexView;
//# sourceMappingURL=ApiMeasurementsNonIndexView.js.map

/***/ }),

/***/ 74401:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiMetricDataPointView = void 0;
var ApiMetricDataPointView = (function () {
    function ApiMetricDataPointView() {
    }
    ApiMetricDataPointView.getAttributeTypeMap = function () {
        return ApiMetricDataPointView.attributeTypeMap;
    };
    ApiMetricDataPointView.discriminator = undefined;
    ApiMetricDataPointView.attributeTypeMap = [
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "number",
            "format": ""
        }
    ];
    return ApiMetricDataPointView;
}());
exports.ApiMetricDataPointView = ApiMetricDataPointView;
//# sourceMappingURL=ApiMetricDataPointView.js.map

/***/ }),

/***/ 8275:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiMetricDataPointViewAtlas = void 0;
var ApiMetricDataPointViewAtlas = (function () {
    function ApiMetricDataPointViewAtlas() {
    }
    ApiMetricDataPointViewAtlas.getAttributeTypeMap = function () {
        return ApiMetricDataPointViewAtlas.attributeTypeMap;
    };
    ApiMetricDataPointViewAtlas.discriminator = undefined;
    ApiMetricDataPointViewAtlas.attributeTypeMap = [
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "number",
            "format": ""
        }
    ];
    return ApiMetricDataPointViewAtlas;
}());
exports.ApiMetricDataPointViewAtlas = ApiMetricDataPointViewAtlas;
//# sourceMappingURL=ApiMetricDataPointViewAtlas.js.map

/***/ }),

/***/ 26270:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiMicrosoftTeamsView = void 0;
var ApiMicrosoftTeamsView = (function () {
    function ApiMicrosoftTeamsView() {
    }
    ApiMicrosoftTeamsView.getAttributeTypeMap = function () {
        return ApiMicrosoftTeamsView.attributeTypeMap;
    };
    ApiMicrosoftTeamsView.discriminator = undefined;
    ApiMicrosoftTeamsView.attributeTypeMap = [
        {
            "name": "microsoftTeamsWebhookUrl",
            "baseName": "microsoftTeamsWebhookUrl",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return ApiMicrosoftTeamsView;
}());
exports.ApiMicrosoftTeamsView = ApiMicrosoftTeamsView;
//# sourceMappingURL=ApiMicrosoftTeamsView.js.map

/***/ }),

/***/ 20279:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiMongoDBAccessLogsListView = void 0;
var ApiMongoDBAccessLogsListView = (function () {
    function ApiMongoDBAccessLogsListView() {
    }
    ApiMongoDBAccessLogsListView.getAttributeTypeMap = function () {
        return ApiMongoDBAccessLogsListView.attributeTypeMap;
    };
    ApiMongoDBAccessLogsListView.discriminator = undefined;
    ApiMongoDBAccessLogsListView.attributeTypeMap = [
        {
            "name": "accessLogs",
            "baseName": "accessLogs",
            "type": "Array<ApiMongoDBAccessLogsView>",
            "format": ""
        }
    ];
    return ApiMongoDBAccessLogsListView;
}());
exports.ApiMongoDBAccessLogsListView = ApiMongoDBAccessLogsListView;
//# sourceMappingURL=ApiMongoDBAccessLogsListView.js.map

/***/ }),

/***/ 4845:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiMongoDBAccessLogsView = void 0;
var ApiMongoDBAccessLogsView = (function () {
    function ApiMongoDBAccessLogsView() {
    }
    ApiMongoDBAccessLogsView.getAttributeTypeMap = function () {
        return ApiMongoDBAccessLogsView.attributeTypeMap;
    };
    ApiMongoDBAccessLogsView.discriminator = undefined;
    ApiMongoDBAccessLogsView.attributeTypeMap = [
        {
            "name": "authResult",
            "baseName": "authResult",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "authSource",
            "baseName": "authSource",
            "type": "string",
            "format": ""
        },
        {
            "name": "failureReason",
            "baseName": "failureReason",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "hostname",
            "baseName": "hostname",
            "type": "string",
            "format": ""
        },
        {
            "name": "ipAddress",
            "baseName": "ipAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "logLine",
            "baseName": "logLine",
            "type": "string",
            "format": ""
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": ""
        }
    ];
    return ApiMongoDBAccessLogsView;
}());
exports.ApiMongoDBAccessLogsView = ApiMongoDBAccessLogsView;
//# sourceMappingURL=ApiMongoDBAccessLogsView.js.map

/***/ }),

/***/ 71561:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiNamespaceObjView = void 0;
var ApiNamespaceObjView = (function () {
    function ApiNamespaceObjView() {
    }
    ApiNamespaceObjView.getAttributeTypeMap = function () {
        return ApiNamespaceObjView.attributeTypeMap;
    };
    ApiNamespaceObjView.discriminator = undefined;
    ApiNamespaceObjView.attributeTypeMap = [
        {
            "name": "namespace",
            "baseName": "namespace",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return ApiNamespaceObjView;
}());
exports.ApiNamespaceObjView = ApiNamespaceObjView;
//# sourceMappingURL=ApiNamespaceObjView.js.map

/***/ }),

/***/ 19788:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiNamespacesView = void 0;
var ApiNamespacesView = (function () {
    function ApiNamespacesView() {
    }
    ApiNamespacesView.getAttributeTypeMap = function () {
        return ApiNamespacesView.attributeTypeMap;
    };
    ApiNamespacesView.discriminator = undefined;
    ApiNamespacesView.attributeTypeMap = [
        {
            "name": "namespaces",
            "baseName": "namespaces",
            "type": "Set<ApiNamespaceObjView>",
            "format": ""
        }
    ];
    return ApiNamespacesView;
}());
exports.ApiNamespacesView = ApiNamespacesView;
//# sourceMappingURL=ApiNamespacesView.js.map

/***/ }),

/***/ 37038:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiNewRelicView = void 0;
var ApiNewRelicView = (function () {
    function ApiNewRelicView() {
    }
    ApiNewRelicView.getAttributeTypeMap = function () {
        return ApiNewRelicView.attributeTypeMap;
    };
    ApiNewRelicView.discriminator = undefined;
    ApiNewRelicView.attributeTypeMap = [
        {
            "name": "accountId",
            "baseName": "accountId",
            "type": "string",
            "format": ""
        },
        {
            "name": "licenseKey",
            "baseName": "licenseKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "readToken",
            "baseName": "readToken",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "writeToken",
            "baseName": "writeToken",
            "type": "string",
            "format": ""
        }
    ];
    return ApiNewRelicView;
}());
exports.ApiNewRelicView = ApiNewRelicView;
//# sourceMappingURL=ApiNewRelicView.js.map

/***/ }),

/***/ 73813:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiOpsGenieView = void 0;
var ApiOpsGenieView = (function () {
    function ApiOpsGenieView() {
    }
    ApiOpsGenieView.getAttributeTypeMap = function () {
        return ApiOpsGenieView.attributeTypeMap;
    };
    ApiOpsGenieView.discriminator = undefined;
    ApiOpsGenieView.attributeTypeMap = [
        {
            "name": "apiKey",
            "baseName": "apiKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "region",
            "baseName": "region",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return ApiOpsGenieView;
}());
exports.ApiOpsGenieView = ApiOpsGenieView;
//# sourceMappingURL=ApiOpsGenieView.js.map

/***/ }),

/***/ 89637:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiOrganizationInvitationRequestView = void 0;
var ApiOrganizationInvitationRequestView = (function () {
    function ApiOrganizationInvitationRequestView() {
    }
    ApiOrganizationInvitationRequestView.getAttributeTypeMap = function () {
        return ApiOrganizationInvitationRequestView.attributeTypeMap;
    };
    ApiOrganizationInvitationRequestView.discriminator = undefined;
    ApiOrganizationInvitationRequestView.attributeTypeMap = [
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "teamIds",
            "baseName": "teamIds",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return ApiOrganizationInvitationRequestView;
}());
exports.ApiOrganizationInvitationRequestView = ApiOrganizationInvitationRequestView;
//# sourceMappingURL=ApiOrganizationInvitationRequestView.js.map

/***/ }),

/***/ 36169:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiOrganizationInvitationUpdateRequestView = void 0;
var ApiOrganizationInvitationUpdateRequestView = (function () {
    function ApiOrganizationInvitationUpdateRequestView() {
    }
    ApiOrganizationInvitationUpdateRequestView.getAttributeTypeMap = function () {
        return ApiOrganizationInvitationUpdateRequestView.attributeTypeMap;
    };
    ApiOrganizationInvitationUpdateRequestView.discriminator = undefined;
    ApiOrganizationInvitationUpdateRequestView.attributeTypeMap = [
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "teamIds",
            "baseName": "teamIds",
            "type": "Set<string>",
            "format": ""
        }
    ];
    return ApiOrganizationInvitationUpdateRequestView;
}());
exports.ApiOrganizationInvitationUpdateRequestView = ApiOrganizationInvitationUpdateRequestView;
//# sourceMappingURL=ApiOrganizationInvitationUpdateRequestView.js.map

/***/ }),

/***/ 40241:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiOrganizationInvitationView = void 0;
var ApiOrganizationInvitationView = (function () {
    function ApiOrganizationInvitationView() {
    }
    ApiOrganizationInvitationView.getAttributeTypeMap = function () {
        return ApiOrganizationInvitationView.attributeTypeMap;
    };
    ApiOrganizationInvitationView.discriminator = undefined;
    ApiOrganizationInvitationView.attributeTypeMap = [
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "expiresAt",
            "baseName": "expiresAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "inviterUsername",
            "baseName": "inviterUsername",
            "type": "string",
            "format": "email"
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgName",
            "baseName": "orgName",
            "type": "string",
            "format": ""
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "teamIds",
            "baseName": "teamIds",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return ApiOrganizationInvitationView;
}());
exports.ApiOrganizationInvitationView = ApiOrganizationInvitationView;
//# sourceMappingURL=ApiOrganizationInvitationView.js.map

/***/ }),

/***/ 81694:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiOrganizationView = void 0;
var ApiOrganizationView = (function () {
    function ApiOrganizationView() {
    }
    ApiOrganizationView.getAttributeTypeMap = function () {
        return ApiOrganizationView.attributeTypeMap;
    };
    ApiOrganizationView.discriminator = undefined;
    ApiOrganizationView.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isDeleted",
            "baseName": "isDeleted",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        }
    ];
    return ApiOrganizationView;
}());
exports.ApiOrganizationView = ApiOrganizationView;
//# sourceMappingURL=ApiOrganizationView.js.map

/***/ }),

/***/ 37738:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiPagerDutyView = void 0;
var ApiPagerDutyView = (function () {
    function ApiPagerDutyView() {
    }
    ApiPagerDutyView.getAttributeTypeMap = function () {
        return ApiPagerDutyView.attributeTypeMap;
    };
    ApiPagerDutyView.discriminator = undefined;
    ApiPagerDutyView.attributeTypeMap = [
        {
            "name": "region",
            "baseName": "region",
            "type": "string",
            "format": ""
        },
        {
            "name": "serviceKey",
            "baseName": "serviceKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return ApiPagerDutyView;
}());
exports.ApiPagerDutyView = ApiPagerDutyView;
//# sourceMappingURL=ApiPagerDutyView.js.map

/***/ }),

/***/ 98127:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiPaymentView = void 0;
var ApiPaymentView = (function () {
    function ApiPaymentView() {
    }
    ApiPaymentView.getAttributeTypeMap = function () {
        return ApiPaymentView.attributeTypeMap;
    };
    ApiPaymentView.discriminator = undefined;
    ApiPaymentView.attributeTypeMap = [
        {
            "name": "amountBilledCents",
            "baseName": "amountBilledCents",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "amountPaidCents",
            "baseName": "amountPaidCents",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "salesTaxCents",
            "baseName": "salesTaxCents",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "statusName",
            "baseName": "statusName",
            "type": "string",
            "format": ""
        },
        {
            "name": "subtotalCents",
            "baseName": "subtotalCents",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return ApiPaymentView;
}());
exports.ApiPaymentView = ApiPaymentView;
//# sourceMappingURL=ApiPaymentView.js.map

/***/ }),

/***/ 89797:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiPerformanceAdvisorIndexView = void 0;
var ApiPerformanceAdvisorIndexView = (function () {
    function ApiPerformanceAdvisorIndexView() {
    }
    ApiPerformanceAdvisorIndexView.getAttributeTypeMap = function () {
        return ApiPerformanceAdvisorIndexView.attributeTypeMap;
    };
    ApiPerformanceAdvisorIndexView.discriminator = undefined;
    ApiPerformanceAdvisorIndexView.attributeTypeMap = [
        {
            "name": "avgObjSize",
            "baseName": "avgObjSize",
            "type": "number",
            "format": "double"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "impact",
            "baseName": "impact",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "index",
            "baseName": "index",
            "type": "Array<{ [key: string]: string; }>",
            "format": ""
        },
        {
            "name": "namespace",
            "baseName": "namespace",
            "type": "string",
            "format": ""
        },
        {
            "name": "weight",
            "baseName": "weight",
            "type": "number",
            "format": "double"
        }
    ];
    return ApiPerformanceAdvisorIndexView;
}());
exports.ApiPerformanceAdvisorIndexView = ApiPerformanceAdvisorIndexView;
//# sourceMappingURL=ApiPerformanceAdvisorIndexView.js.map

/***/ }),

/***/ 73361:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiPerformanceAdvisorResponseView = void 0;
var ApiPerformanceAdvisorResponseView = (function () {
    function ApiPerformanceAdvisorResponseView() {
    }
    ApiPerformanceAdvisorResponseView.getAttributeTypeMap = function () {
        return ApiPerformanceAdvisorResponseView.attributeTypeMap;
    };
    ApiPerformanceAdvisorResponseView.discriminator = undefined;
    ApiPerformanceAdvisorResponseView.attributeTypeMap = [
        {
            "name": "shapes",
            "baseName": "shapes",
            "type": "Array<ApiPerformanceAdvisorShapeView>",
            "format": ""
        },
        {
            "name": "suggestedIndexes",
            "baseName": "suggestedIndexes",
            "type": "Array<ApiPerformanceAdvisorIndexView>",
            "format": ""
        }
    ];
    return ApiPerformanceAdvisorResponseView;
}());
exports.ApiPerformanceAdvisorResponseView = ApiPerformanceAdvisorResponseView;
//# sourceMappingURL=ApiPerformanceAdvisorResponseView.js.map

/***/ }),

/***/ 74811:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiPerformanceAdvisorShapeView = void 0;
var ApiPerformanceAdvisorShapeView = (function () {
    function ApiPerformanceAdvisorShapeView() {
    }
    ApiPerformanceAdvisorShapeView.getAttributeTypeMap = function () {
        return ApiPerformanceAdvisorShapeView.attributeTypeMap;
    };
    ApiPerformanceAdvisorShapeView.discriminator = undefined;
    ApiPerformanceAdvisorShapeView.attributeTypeMap = [
        {
            "name": "avgMs",
            "baseName": "avgMs",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "count",
            "baseName": "count",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "inefficiencyScore",
            "baseName": "inefficiencyScore",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "namespace",
            "baseName": "namespace",
            "type": "string",
            "format": ""
        },
        {
            "name": "operations",
            "baseName": "operations",
            "type": "Array<PerformanceAdvisorOperationView>",
            "format": ""
        }
    ];
    return ApiPerformanceAdvisorShapeView;
}());
exports.ApiPerformanceAdvisorShapeView = ApiPerformanceAdvisorShapeView;
//# sourceMappingURL=ApiPerformanceAdvisorShapeView.js.map

/***/ }),

/***/ 87738:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiPerformanceAdvisorSlowQueryListView = void 0;
var ApiPerformanceAdvisorSlowQueryListView = (function () {
    function ApiPerformanceAdvisorSlowQueryListView() {
    }
    ApiPerformanceAdvisorSlowQueryListView.getAttributeTypeMap = function () {
        return ApiPerformanceAdvisorSlowQueryListView.attributeTypeMap;
    };
    ApiPerformanceAdvisorSlowQueryListView.discriminator = undefined;
    ApiPerformanceAdvisorSlowQueryListView.attributeTypeMap = [
        {
            "name": "slowQueries",
            "baseName": "slowQueries",
            "type": "Array<ApiPerformanceAdvisorSlowQueryView>",
            "format": ""
        }
    ];
    return ApiPerformanceAdvisorSlowQueryListView;
}());
exports.ApiPerformanceAdvisorSlowQueryListView = ApiPerformanceAdvisorSlowQueryListView;
//# sourceMappingURL=ApiPerformanceAdvisorSlowQueryListView.js.map

/***/ }),

/***/ 77304:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiPerformanceAdvisorSlowQueryView = void 0;
var ApiPerformanceAdvisorSlowQueryView = (function () {
    function ApiPerformanceAdvisorSlowQueryView() {
    }
    ApiPerformanceAdvisorSlowQueryView.getAttributeTypeMap = function () {
        return ApiPerformanceAdvisorSlowQueryView.attributeTypeMap;
    };
    ApiPerformanceAdvisorSlowQueryView.discriminator = undefined;
    ApiPerformanceAdvisorSlowQueryView.attributeTypeMap = [
        {
            "name": "line",
            "baseName": "line",
            "type": "string",
            "format": ""
        },
        {
            "name": "namespace",
            "baseName": "namespace",
            "type": "string",
            "format": ""
        }
    ];
    return ApiPerformanceAdvisorSlowQueryView;
}());
exports.ApiPerformanceAdvisorSlowQueryView = ApiPerformanceAdvisorSlowQueryView;
//# sourceMappingURL=ApiPerformanceAdvisorSlowQueryView.js.map

/***/ }),

/***/ 19082:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiPolicyItemView = void 0;
var ApiPolicyItemView = (function () {
    function ApiPolicyItemView() {
    }
    ApiPolicyItemView.getAttributeTypeMap = function () {
        return ApiPolicyItemView.attributeTypeMap;
    };
    ApiPolicyItemView.discriminator = undefined;
    ApiPolicyItemView.attributeTypeMap = [
        {
            "name": "frequencyInterval",
            "baseName": "frequencyInterval",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "frequencyType",
            "baseName": "frequencyType",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "retentionUnit",
            "baseName": "retentionUnit",
            "type": "string",
            "format": ""
        },
        {
            "name": "retentionValue",
            "baseName": "retentionValue",
            "type": "number",
            "format": "int32"
        }
    ];
    return ApiPolicyItemView;
}());
exports.ApiPolicyItemView = ApiPolicyItemView;
//# sourceMappingURL=ApiPolicyItemView.js.map

/***/ }),

/***/ 77608:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiPolicyView = void 0;
var ApiPolicyView = (function () {
    function ApiPolicyView() {
    }
    ApiPolicyView.getAttributeTypeMap = function () {
        return ApiPolicyView.attributeTypeMap;
    };
    ApiPolicyView.discriminator = undefined;
    ApiPolicyView.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "policyItems",
            "baseName": "policyItems",
            "type": "Array<ApiPolicyItemView>",
            "format": ""
        }
    ];
    return ApiPolicyView;
}());
exports.ApiPolicyView = ApiPolicyView;
//# sourceMappingURL=ApiPolicyView.js.map

/***/ }),

/***/ 36985:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiPrometheusView = void 0;
var ApiPrometheusView = (function () {
    function ApiPrometheusView() {
    }
    ApiPrometheusView.getAttributeTypeMap = function () {
        return ApiPrometheusView.attributeTypeMap;
    };
    ApiPrometheusView.discriminator = undefined;
    ApiPrometheusView.attributeTypeMap = [
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "listenAddress",
            "baseName": "listenAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string",
            "format": ""
        },
        {
            "name": "rateLimitInterval",
            "baseName": "rateLimitInterval",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "scheme",
            "baseName": "scheme",
            "type": "string",
            "format": ""
        },
        {
            "name": "serviceDiscovery",
            "baseName": "serviceDiscovery",
            "type": "string",
            "format": ""
        },
        {
            "name": "tlsPemPath",
            "baseName": "tlsPemPath",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": ""
        }
    ];
    return ApiPrometheusView;
}());
exports.ApiPrometheusView = ApiPrometheusView;
//# sourceMappingURL=ApiPrometheusView.js.map

/***/ }),

/***/ 37126:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiRefundView = void 0;
var ApiRefundView = (function () {
    function ApiRefundView() {
    }
    ApiRefundView.getAttributeTypeMap = function () {
        return ApiRefundView.attributeTypeMap;
    };
    ApiRefundView.discriminator = undefined;
    ApiRefundView.attributeTypeMap = [
        {
            "name": "amountCents",
            "baseName": "amountCents",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "paymentId",
            "baseName": "paymentId",
            "type": "string",
            "format": ""
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string",
            "format": ""
        }
    ];
    return ApiRefundView;
}());
exports.ApiRefundView = ApiRefundView;
//# sourceMappingURL=ApiRefundView.js.map

/***/ }),

/***/ 22496:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiRestoreJobDeliveryView = void 0;
var ApiRestoreJobDeliveryView = (function () {
    function ApiRestoreJobDeliveryView() {
    }
    ApiRestoreJobDeliveryView.getAttributeTypeMap = function () {
        return ApiRestoreJobDeliveryView.attributeTypeMap;
    };
    ApiRestoreJobDeliveryView.discriminator = undefined;
    ApiRestoreJobDeliveryView.attributeTypeMap = [
        {
            "name": "authHeader",
            "baseName": "authHeader",
            "type": "string",
            "format": ""
        },
        {
            "name": "authValue",
            "baseName": "authValue",
            "type": "string",
            "format": ""
        },
        {
            "name": "expirationHours",
            "baseName": "expirationHours",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "expires",
            "baseName": "expires",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "maxDownloads",
            "baseName": "maxDownloads",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "methodName",
            "baseName": "methodName",
            "type": "string",
            "format": ""
        },
        {
            "name": "statusName",
            "baseName": "statusName",
            "type": "string",
            "format": ""
        },
        {
            "name": "targetClusterId",
            "baseName": "targetClusterId",
            "type": "string",
            "format": ""
        },
        {
            "name": "targetClusterName",
            "baseName": "targetClusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "targetGroupId",
            "baseName": "targetGroupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string",
            "format": ""
        },
        {
            "name": "urlV2",
            "baseName": "urlV2",
            "type": "string",
            "format": ""
        }
    ];
    return ApiRestoreJobDeliveryView;
}());
exports.ApiRestoreJobDeliveryView = ApiRestoreJobDeliveryView;
//# sourceMappingURL=ApiRestoreJobDeliveryView.js.map

/***/ }),

/***/ 74219:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiRestoreJobFileHashView = void 0;
var ApiRestoreJobFileHashView = (function () {
    function ApiRestoreJobFileHashView() {
    }
    ApiRestoreJobFileHashView.getAttributeTypeMap = function () {
        return ApiRestoreJobFileHashView.attributeTypeMap;
    };
    ApiRestoreJobFileHashView.discriminator = undefined;
    ApiRestoreJobFileHashView.attributeTypeMap = [
        {
            "name": "fileName",
            "baseName": "fileName",
            "type": "string",
            "format": ""
        },
        {
            "name": "hash",
            "baseName": "hash",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        }
    ];
    return ApiRestoreJobFileHashView;
}());
exports.ApiRestoreJobFileHashView = ApiRestoreJobFileHashView;
//# sourceMappingURL=ApiRestoreJobFileHashView.js.map

/***/ }),

/***/ 67733:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiRestoreJobView = void 0;
var ApiRestoreJobView = (function () {
    function ApiRestoreJobView() {
    }
    ApiRestoreJobView.getAttributeTypeMap = function () {
        return ApiRestoreJobView.attributeTypeMap;
    };
    ApiRestoreJobView.discriminator = undefined;
    ApiRestoreJobView.attributeTypeMap = [
        {
            "name": "batchId",
            "baseName": "batchId",
            "type": "string",
            "format": ""
        },
        {
            "name": "checkpointId",
            "baseName": "checkpointId",
            "type": "string",
            "format": ""
        },
        {
            "name": "clusterId",
            "baseName": "clusterId",
            "type": "string",
            "format": ""
        },
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "delivery",
            "baseName": "delivery",
            "type": "ApiRestoreJobDeliveryView",
            "format": ""
        },
        {
            "name": "encryptionEnabled",
            "baseName": "encryptionEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "hashes",
            "baseName": "hashes",
            "type": "Array<ApiRestoreJobFileHashView>",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "masterKeyUUID",
            "baseName": "masterKeyUUID",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "oplogInc",
            "baseName": "oplogInc",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "oplogTs",
            "baseName": "oplogTs",
            "type": "string",
            "format": ""
        },
        {
            "name": "pointInTimeUTCMillis",
            "baseName": "pointInTimeUTCMillis",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "snapshotId",
            "baseName": "snapshotId",
            "type": "string",
            "format": ""
        },
        {
            "name": "statusName",
            "baseName": "statusName",
            "type": "string",
            "format": ""
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "ApiBSONTimestampView",
            "format": ""
        }
    ];
    return ApiRestoreJobView;
}());
exports.ApiRestoreJobView = ApiRestoreJobView;
//# sourceMappingURL=ApiRestoreJobView.js.map

/***/ }),

/***/ 16650:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiRoleAssignmentView = void 0;
var ApiRoleAssignmentView = (function () {
    function ApiRoleAssignmentView() {
    }
    ApiRoleAssignmentView.getAttributeTypeMap = function () {
        return ApiRoleAssignmentView.attributeTypeMap;
    };
    ApiRoleAssignmentView.discriminator = undefined;
    ApiRoleAssignmentView.attributeTypeMap = [
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "roleName",
            "baseName": "roleName",
            "type": "string",
            "format": ""
        }
    ];
    return ApiRoleAssignmentView;
}());
exports.ApiRoleAssignmentView = ApiRoleAssignmentView;
//# sourceMappingURL=ApiRoleAssignmentView.js.map

/***/ }),

/***/ 50215:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiSlackView = void 0;
var ApiSlackView = (function () {
    function ApiSlackView() {
    }
    ApiSlackView.getAttributeTypeMap = function () {
        return ApiSlackView.attributeTypeMap;
    };
    ApiSlackView.discriminator = undefined;
    ApiSlackView.attributeTypeMap = [
        {
            "name": "apiToken",
            "baseName": "apiToken",
            "type": "string",
            "format": ""
        },
        {
            "name": "channelName",
            "baseName": "channelName",
            "type": "string",
            "format": ""
        },
        {
            "name": "teamName",
            "baseName": "teamName",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return ApiSlackView;
}());
exports.ApiSlackView = ApiSlackView;
//# sourceMappingURL=ApiSlackView.js.map

/***/ }),

/***/ 6876:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiSnapshotPartView = void 0;
var ApiSnapshotPartView = (function () {
    function ApiSnapshotPartView() {
    }
    ApiSnapshotPartView.getAttributeTypeMap = function () {
        return ApiSnapshotPartView.attributeTypeMap;
    };
    ApiSnapshotPartView.discriminator = undefined;
    ApiSnapshotPartView.attributeTypeMap = [
        {
            "name": "clusterId",
            "baseName": "clusterId",
            "type": "string",
            "format": ""
        },
        {
            "name": "compressionSetting",
            "baseName": "compressionSetting",
            "type": "string",
            "format": ""
        },
        {
            "name": "dataSizeBytes",
            "baseName": "dataSizeBytes",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "encryptionEnabled",
            "baseName": "encryptionEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "fileSizeBytes",
            "baseName": "fileSizeBytes",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "masterKeyUUID",
            "baseName": "masterKeyUUID",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "mongodVersion",
            "baseName": "mongodVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "storageSizeBytes",
            "baseName": "storageSizeBytes",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        }
    ];
    return ApiSnapshotPartView;
}());
exports.ApiSnapshotPartView = ApiSnapshotPartView;
//# sourceMappingURL=ApiSnapshotPartView.js.map

/***/ }),

/***/ 7295:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiSnapshotView = void 0;
var ApiSnapshotView = (function () {
    function ApiSnapshotView() {
    }
    ApiSnapshotView.getAttributeTypeMap = function () {
        return ApiSnapshotView.attributeTypeMap;
    };
    ApiSnapshotView.discriminator = undefined;
    ApiSnapshotView.attributeTypeMap = [
        {
            "name": "clusterId",
            "baseName": "clusterId",
            "type": "string",
            "format": ""
        },
        {
            "name": "complete",
            "baseName": "complete",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "ApiBSONTimestampView",
            "format": ""
        },
        {
            "name": "doNotDelete",
            "baseName": "doNotDelete",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "expires",
            "baseName": "expires",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "lastOplogAppliedTimestamp",
            "baseName": "lastOplogAppliedTimestamp",
            "type": "ApiBSONTimestampView",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "parts",
            "baseName": "parts",
            "type": "Array<ApiSnapshotPartView>",
            "format": ""
        }
    ];
    return ApiSnapshotView;
}());
exports.ApiSnapshotView = ApiSnapshotView;
//# sourceMappingURL=ApiSnapshotView.js.map

/***/ }),

/***/ 51148:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiSystemStatusView = void 0;
var ApiSystemStatusView = (function () {
    function ApiSystemStatusView() {
    }
    ApiSystemStatusView.getAttributeTypeMap = function () {
        return ApiSystemStatusView.attributeTypeMap;
    };
    ApiSystemStatusView.discriminator = undefined;
    ApiSystemStatusView.attributeTypeMap = [
        {
            "name": "apiKey",
            "baseName": "apiKey",
            "type": "ApiKeyView",
            "format": ""
        },
        {
            "name": "appName",
            "baseName": "appName",
            "type": "string",
            "format": ""
        },
        {
            "name": "build",
            "baseName": "build",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "throttling",
            "baseName": "throttling",
            "type": "boolean",
            "format": ""
        }
    ];
    return ApiSystemStatusView;
}());
exports.ApiSystemStatusView = ApiSystemStatusView;
//# sourceMappingURL=ApiSystemStatusView.js.map

/***/ }),

/***/ 96478:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiTeamResponseView = void 0;
var ApiTeamResponseView = (function () {
    function ApiTeamResponseView() {
    }
    ApiTeamResponseView.getAttributeTypeMap = function () {
        return ApiTeamResponseView.attributeTypeMap;
    };
    ApiTeamResponseView.discriminator = undefined;
    ApiTeamResponseView.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        }
    ];
    return ApiTeamResponseView;
}());
exports.ApiTeamResponseView = ApiTeamResponseView;
//# sourceMappingURL=ApiTeamResponseView.js.map

/***/ }),

/***/ 18899:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiTeamRoleView = void 0;
var ApiTeamRoleView = (function () {
    function ApiTeamRoleView() {
    }
    ApiTeamRoleView.getAttributeTypeMap = function () {
        return ApiTeamRoleView.attributeTypeMap;
    };
    ApiTeamRoleView.discriminator = undefined;
    ApiTeamRoleView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "roleNames",
            "baseName": "roleNames",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "teamId",
            "baseName": "teamId",
            "type": "string",
            "format": ""
        }
    ];
    return ApiTeamRoleView;
}());
exports.ApiTeamRoleView = ApiTeamRoleView;
//# sourceMappingURL=ApiTeamRoleView.js.map

/***/ }),

/***/ 23380:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiTeamView = void 0;
var ApiTeamView = (function () {
    function ApiTeamView() {
    }
    ApiTeamView.getAttributeTypeMap = function () {
        return ApiTeamView.attributeTypeMap;
    };
    ApiTeamView.discriminator = undefined;
    ApiTeamView.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "usernames",
            "baseName": "usernames",
            "type": "Set<string>",
            "format": "email"
        }
    ];
    return ApiTeamView;
}());
exports.ApiTeamView = ApiTeamView;
//# sourceMappingURL=ApiTeamView.js.map

/***/ }),

/***/ 99963:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiUserAccessListView = void 0;
var ApiUserAccessListView = (function () {
    function ApiUserAccessListView() {
    }
    ApiUserAccessListView.getAttributeTypeMap = function () {
        return ApiUserAccessListView.attributeTypeMap;
    };
    ApiUserAccessListView.discriminator = undefined;
    ApiUserAccessListView.attributeTypeMap = [
        {
            "name": "cidrBlock",
            "baseName": "cidrBlock",
            "type": "string",
            "format": ""
        },
        {
            "name": "count",
            "baseName": "count",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "ipAddress",
            "baseName": "ipAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "lastUsed",
            "baseName": "lastUsed",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "lastUsedAddress",
            "baseName": "lastUsedAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        }
    ];
    return ApiUserAccessListView;
}());
exports.ApiUserAccessListView = ApiUserAccessListView;
//# sourceMappingURL=ApiUserAccessListView.js.map

/***/ }),

/***/ 22721:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=ApiUserEventTypeViewForNdsGroup.js.map

/***/ }),

/***/ 17126:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=ApiUserEventTypeViewForOrg.js.map

/***/ }),

/***/ 3198:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiUserEventViewForNdsGroup = void 0;
var ApiUserEventViewForNdsGroup = (function () {
    function ApiUserEventViewForNdsGroup() {
    }
    ApiUserEventViewForNdsGroup.getAttributeTypeMap = function () {
        return ApiUserEventViewForNdsGroup.attributeTypeMap;
    };
    ApiUserEventViewForNdsGroup.discriminator = undefined;
    ApiUserEventViewForNdsGroup.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "ApiUserEventTypeViewForNdsGroup",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return ApiUserEventViewForNdsGroup;
}());
exports.ApiUserEventViewForNdsGroup = ApiUserEventViewForNdsGroup;
//# sourceMappingURL=ApiUserEventViewForNdsGroup.js.map

/***/ }),

/***/ 71748:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiUserEventViewForOrg = void 0;
var ApiUserEventViewForOrg = (function () {
    function ApiUserEventViewForOrg() {
    }
    ApiUserEventViewForOrg.getAttributeTypeMap = function () {
        return ApiUserEventViewForOrg.attributeTypeMap;
    };
    ApiUserEventViewForOrg.discriminator = undefined;
    ApiUserEventViewForOrg.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "ApiUserEventTypeViewForOrg",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return ApiUserEventViewForOrg;
}());
exports.ApiUserEventViewForOrg = ApiUserEventViewForOrg;
//# sourceMappingURL=ApiUserEventViewForOrg.js.map

/***/ }),

/***/ 69245:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiUserRoleAssignment = void 0;
var ApiUserRoleAssignment = (function () {
    function ApiUserRoleAssignment() {
    }
    ApiUserRoleAssignment.getAttributeTypeMap = function () {
        return ApiUserRoleAssignment.attributeTypeMap;
    };
    ApiUserRoleAssignment.discriminator = undefined;
    ApiUserRoleAssignment.attributeTypeMap = [
        {
            "name": "apiUserId",
            "baseName": "apiUserId",
            "type": "string",
            "format": ""
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Array<string>",
            "format": ""
        }
    ];
    return ApiUserRoleAssignment;
}());
exports.ApiUserRoleAssignment = ApiUserRoleAssignment;
//# sourceMappingURL=ApiUserRoleAssignment.js.map

/***/ }),

/***/ 7794:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiVictorOpsView = void 0;
var ApiVictorOpsView = (function () {
    function ApiVictorOpsView() {
    }
    ApiVictorOpsView.getAttributeTypeMap = function () {
        return ApiVictorOpsView.attributeTypeMap;
    };
    ApiVictorOpsView.discriminator = undefined;
    ApiVictorOpsView.attributeTypeMap = [
        {
            "name": "apiKey",
            "baseName": "apiKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "routingKey",
            "baseName": "routingKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return ApiVictorOpsView;
}());
exports.ApiVictorOpsView = ApiVictorOpsView;
//# sourceMappingURL=ApiVictorOpsView.js.map

/***/ }),

/***/ 2804:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiWebhookView = void 0;
var ApiWebhookView = (function () {
    function ApiWebhookView() {
    }
    ApiWebhookView.getAttributeTypeMap = function () {
        return ApiWebhookView.attributeTypeMap;
    };
    ApiWebhookView.discriminator = undefined;
    ApiWebhookView.attributeTypeMap = [
        {
            "name": "secret",
            "baseName": "secret",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string",
            "format": ""
        }
    ];
    return ApiWebhookView;
}());
exports.ApiWebhookView = ApiWebhookView;
//# sourceMappingURL=ApiWebhookView.js.map

/***/ }),

/***/ 45676:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AppServiceAlertConfigViewForNdsGroup = void 0;
var AppServiceAlertConfigViewForNdsGroup = (function () {
    function AppServiceAlertConfigViewForNdsGroup() {
    }
    AppServiceAlertConfigViewForNdsGroup.getAttributeTypeMap = function () {
        return AppServiceAlertConfigViewForNdsGroup.attributeTypeMap;
    };
    AppServiceAlertConfigViewForNdsGroup.discriminator = undefined;
    AppServiceAlertConfigViewForNdsGroup.attributeTypeMap = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "AppServiceEventTypeViewAlertableNoThreshold",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "matchers",
            "baseName": "matchers",
            "type": "Array<AppServiceMetricMatcherView>",
            "format": ""
        },
        {
            "name": "notifications",
            "baseName": "notifications",
            "type": "Array<NotificationViewForNdsGroup>",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return AppServiceAlertConfigViewForNdsGroup;
}());
exports.AppServiceAlertConfigViewForNdsGroup = AppServiceAlertConfigViewForNdsGroup;
//# sourceMappingURL=AppServiceAlertConfigViewForNdsGroup.js.map

/***/ }),

/***/ 63243:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AppServiceAlertView = void 0;
var AppServiceAlertView = (function () {
    function AppServiceAlertView() {
    }
    AppServiceAlertView.getAttributeTypeMap = function () {
        return AppServiceAlertView.attributeTypeMap;
    };
    AppServiceAlertView.discriminator = undefined;
    AppServiceAlertView.attributeTypeMap = [
        {
            "name": "acknowledgedUntil",
            "baseName": "acknowledgedUntil",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "acknowledgementComment",
            "baseName": "acknowledgementComment",
            "type": "string",
            "format": ""
        },
        {
            "name": "acknowledgingUsername",
            "baseName": "acknowledgingUsername",
            "type": "string",
            "format": "email"
        },
        {
            "name": "alertConfigId",
            "baseName": "alertConfigId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "AppServiceEventTypeViewAlertable",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "lastNotified",
            "baseName": "lastNotified",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "resolved",
            "baseName": "resolved",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return AppServiceAlertView;
}());
exports.AppServiceAlertView = AppServiceAlertView;
//# sourceMappingURL=AppServiceAlertView.js.map

/***/ }),

/***/ 91241:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=AppServiceEventTypeView.js.map

/***/ }),

/***/ 98818:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=AppServiceEventTypeViewAlertable.js.map

/***/ }),

/***/ 79436:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=AppServiceEventTypeViewAlertableNoThreshold.js.map

/***/ }),

/***/ 43212:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=AppServiceEventTypeViewAlertableWithThreshold.js.map

/***/ }),

/***/ 17109:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AppServiceEventView = void 0;
var AppServiceEventView = (function () {
    function AppServiceEventView() {
    }
    AppServiceEventView.getAttributeTypeMap = function () {
        return AppServiceEventView.attributeTypeMap;
    };
    AppServiceEventView.discriminator = undefined;
    AppServiceEventView.attributeTypeMap = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "AppServiceEventTypeView",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        }
    ];
    return AppServiceEventView;
}());
exports.AppServiceEventView = AppServiceEventView;
//# sourceMappingURL=AppServiceEventView.js.map

/***/ }),

/***/ 65180:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AppServiceMetricAlertConfigViewForNdsGroup = void 0;
var AppServiceMetricAlertConfigViewForNdsGroup = (function () {
    function AppServiceMetricAlertConfigViewForNdsGroup() {
    }
    AppServiceMetricAlertConfigViewForNdsGroup.getAttributeTypeMap = function () {
        return AppServiceMetricAlertConfigViewForNdsGroup.attributeTypeMap;
    };
    AppServiceMetricAlertConfigViewForNdsGroup.discriminator = undefined;
    AppServiceMetricAlertConfigViewForNdsGroup.attributeTypeMap = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "AppServiceEventTypeViewAlertableWithThreshold",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "matchers",
            "baseName": "matchers",
            "type": "Array<AppServiceMetricMatcherView>",
            "format": ""
        },
        {
            "name": "metricThreshold",
            "baseName": "metricThreshold",
            "type": "AppServiceMetricThresholdView",
            "format": ""
        },
        {
            "name": "notifications",
            "baseName": "notifications",
            "type": "Array<NotificationViewForNdsGroup>",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return AppServiceMetricAlertConfigViewForNdsGroup;
}());
exports.AppServiceMetricAlertConfigViewForNdsGroup = AppServiceMetricAlertConfigViewForNdsGroup;
//# sourceMappingURL=AppServiceMetricAlertConfigViewForNdsGroup.js.map

/***/ }),

/***/ 87107:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=AppServiceMetricMatcherField.js.map

/***/ }),

/***/ 33757:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AppServiceMetricMatcherView = void 0;
var AppServiceMetricMatcherView = (function () {
    function AppServiceMetricMatcherView() {
    }
    AppServiceMetricMatcherView.getAttributeTypeMap = function () {
        return AppServiceMetricMatcherView.attributeTypeMap;
    };
    AppServiceMetricMatcherView.discriminator = undefined;
    AppServiceMetricMatcherView.attributeTypeMap = [
        {
            "name": "fieldName",
            "baseName": "fieldName",
            "type": "AppServiceMetricMatcherField",
            "format": ""
        },
        {
            "name": "operator",
            "baseName": "operator",
            "type": "string",
            "format": ""
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string",
            "format": ""
        }
    ];
    return AppServiceMetricMatcherView;
}());
exports.AppServiceMetricMatcherView = AppServiceMetricMatcherView;
//# sourceMappingURL=AppServiceMetricMatcherView.js.map

/***/ }),

/***/ 12468:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AppServiceMetricThresholdView = void 0;
var AppServiceMetricThresholdView = (function () {
    function AppServiceMetricThresholdView() {
    }
    AppServiceMetricThresholdView.getAttributeTypeMap = function () {
        return AppServiceMetricThresholdView.attributeTypeMap;
    };
    AppServiceMetricThresholdView.discriminator = "metricName";
    AppServiceMetricThresholdView.attributeTypeMap = [
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string",
            "format": ""
        },
        {
            "name": "mode",
            "baseName": "mode",
            "type": "string",
            "format": ""
        },
        {
            "name": "operator",
            "baseName": "operator",
            "type": "Operator",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "number",
            "format": "double"
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "DataMetricUnits",
            "format": ""
        }
    ];
    return AppServiceMetricThresholdView;
}());
exports.AppServiceMetricThresholdView = AppServiceMetricThresholdView;
//# sourceMappingURL=AppServiceMetricThresholdView.js.map

/***/ }),

/***/ 58270:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AuditLog = void 0;
var AuditLog = (function () {
    function AuditLog() {
    }
    AuditLog.getAttributeTypeMap = function () {
        return AuditLog.attributeTypeMap;
    };
    AuditLog.discriminator = undefined;
    AuditLog.attributeTypeMap = [
        {
            "name": "auditAuthorizationSuccess",
            "baseName": "auditAuthorizationSuccess",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "auditFilter",
            "baseName": "auditFilter",
            "type": "string",
            "format": ""
        },
        {
            "name": "configurationType",
            "baseName": "configurationType",
            "type": "string",
            "format": ""
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        }
    ];
    return AuditLog;
}());
exports.AuditLog = AuditLog;
//# sourceMappingURL=AuditLog.js.map

/***/ }),

/***/ 76643:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AutoExportPolicyView = void 0;
var AutoExportPolicyView = (function () {
    function AutoExportPolicyView() {
    }
    AutoExportPolicyView.getAttributeTypeMap = function () {
        return AutoExportPolicyView.attributeTypeMap;
    };
    AutoExportPolicyView.discriminator = undefined;
    AutoExportPolicyView.attributeTypeMap = [
        {
            "name": "exportBucketId",
            "baseName": "exportBucketId",
            "type": "string",
            "format": ""
        },
        {
            "name": "frequencyType",
            "baseName": "frequencyType",
            "type": "string",
            "format": ""
        }
    ];
    return AutoExportPolicyView;
}());
exports.AutoExportPolicyView = AutoExportPolicyView;
//# sourceMappingURL=AutoExportPolicyView.js.map

/***/ }),

/***/ 84994:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AutoScaling = void 0;
var AutoScaling = (function () {
    function AutoScaling() {
    }
    AutoScaling.getAttributeTypeMap = function () {
        return AutoScaling.attributeTypeMap;
    };
    AutoScaling.discriminator = undefined;
    AutoScaling.attributeTypeMap = [
        {
            "name": "compute",
            "baseName": "compute",
            "type": "ComputeAutoScaling",
            "format": ""
        },
        {
            "name": "diskGBEnabled",
            "baseName": "diskGBEnabled",
            "type": "boolean",
            "format": ""
        }
    ];
    return AutoScaling;
}());
exports.AutoScaling = AutoScaling;
//# sourceMappingURL=AutoScaling.js.map

/***/ }),

/***/ 74167:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AutoScalingV15 = void 0;
var AutoScalingV15 = (function () {
    function AutoScalingV15() {
    }
    AutoScalingV15.getAttributeTypeMap = function () {
        return AutoScalingV15.attributeTypeMap;
    };
    AutoScalingV15.discriminator = undefined;
    AutoScalingV15.attributeTypeMap = [
        {
            "name": "compute",
            "baseName": "compute",
            "type": "ComputeAutoScalingV15",
            "format": ""
        },
        {
            "name": "diskGB",
            "baseName": "diskGB",
            "type": "DiskGBAutoScaling",
            "format": ""
        }
    ];
    return AutoScalingV15;
}());
exports.AutoScalingV15 = AutoScalingV15;
//# sourceMappingURL=AutoScalingV15.js.map

/***/ }),

/***/ 6992:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=AutomationConfigEventTypeView.js.map

/***/ }),

/***/ 99115:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AutomationConfigEventView = void 0;
var AutomationConfigEventView = (function () {
    function AutomationConfigEventView() {
    }
    AutomationConfigEventView.getAttributeTypeMap = function () {
        return AutomationConfigEventView.attributeTypeMap;
    };
    AutomationConfigEventView.discriminator = undefined;
    AutomationConfigEventView.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "AutomationConfigEventTypeView",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return AutomationConfigEventView;
}());
exports.AutomationConfigEventView = AutomationConfigEventView;
//# sourceMappingURL=AutomationConfigEventView.js.map

/***/ }),

/***/ 99849:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AvailableDeploymentView = void 0;
var AvailableDeploymentView = (function () {
    function AvailableDeploymentView() {
    }
    AvailableDeploymentView.getAttributeTypeMap = function () {
        return AvailableDeploymentView.attributeTypeMap;
    };
    AvailableDeploymentView.discriminator = undefined;
    AvailableDeploymentView.attributeTypeMap = [
        {
            "name": "agentVersion",
            "baseName": "agentVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "clusterId",
            "baseName": "clusterId",
            "type": "string",
            "format": ""
        },
        {
            "name": "dbSizeBytes",
            "baseName": "dbSizeBytes",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "featureCompatibilityVersion",
            "baseName": "featureCompatibilityVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "managed",
            "baseName": "managed",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "mongoDBVersion",
            "baseName": "mongoDBVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "oplogSizeMB",
            "baseName": "oplogSizeMB",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "sharded",
            "baseName": "sharded",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "shardsSize",
            "baseName": "shardsSize",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "tlsEnabled",
            "baseName": "tlsEnabled",
            "type": "boolean",
            "format": ""
        }
    ];
    return AvailableDeploymentView;
}());
exports.AvailableDeploymentView = AvailableDeploymentView;
//# sourceMappingURL=AvailableDeploymentView.js.map

/***/ }),

/***/ 73878:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AvailableProjectView = void 0;
var AvailableProjectView = (function () {
    function AvailableProjectView() {
    }
    AvailableProjectView.getAttributeTypeMap = function () {
        return AvailableProjectView.attributeTypeMap;
    };
    AvailableProjectView.discriminator = undefined;
    AvailableProjectView.attributeTypeMap = [
        {
            "name": "deployments",
            "baseName": "deployments",
            "type": "Array<AvailableDeploymentView>",
            "format": ""
        },
        {
            "name": "migrationHosts",
            "baseName": "migrationHosts",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "projectId",
            "baseName": "projectId",
            "type": "string",
            "format": ""
        }
    ];
    return AvailableProjectView;
}());
exports.AvailableProjectView = AvailableProjectView;
//# sourceMappingURL=AvailableProjectView.js.map

/***/ }),

/***/ 98996:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AzureAutoScaling = void 0;
var AzureAutoScaling = (function () {
    function AzureAutoScaling() {
    }
    AzureAutoScaling.getAttributeTypeMap = function () {
        return AzureAutoScaling.attributeTypeMap;
    };
    AzureAutoScaling.discriminator = undefined;
    AzureAutoScaling.attributeTypeMap = [
        {
            "name": "compute",
            "baseName": "compute",
            "type": "AzureComputeAutoScaling",
            "format": ""
        }
    ];
    return AzureAutoScaling;
}());
exports.AzureAutoScaling = AzureAutoScaling;
//# sourceMappingURL=AzureAutoScaling.js.map

/***/ }),

/***/ 93671:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AzureCloudProviderContainer = void 0;
var AzureCloudProviderContainer = (function () {
    function AzureCloudProviderContainer() {
    }
    AzureCloudProviderContainer.getAttributeTypeMap = function () {
        return AzureCloudProviderContainer.attributeTypeMap;
    };
    AzureCloudProviderContainer.discriminator = undefined;
    AzureCloudProviderContainer.attributeTypeMap = [
        {
            "name": "atlasCidrBlock",
            "baseName": "atlasCidrBlock",
            "type": "string",
            "format": ""
        },
        {
            "name": "azureSubscriptionId",
            "baseName": "azureSubscriptionId",
            "type": "string",
            "format": ""
        },
        {
            "name": "region",
            "baseName": "region",
            "type": "string",
            "format": ""
        },
        {
            "name": "vnetName",
            "baseName": "vnetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "provisioned",
            "baseName": "provisioned",
            "type": "boolean",
            "format": ""
        }
    ];
    return AzureCloudProviderContainer;
}());
exports.AzureCloudProviderContainer = AzureCloudProviderContainer;
//# sourceMappingURL=AzureCloudProviderContainer.js.map

/***/ }),

/***/ 79009:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AzureComputeAutoScaling = void 0;
var AzureComputeAutoScaling = (function () {
    function AzureComputeAutoScaling() {
    }
    AzureComputeAutoScaling.getAttributeTypeMap = function () {
        return AzureComputeAutoScaling.attributeTypeMap;
    };
    AzureComputeAutoScaling.discriminator = undefined;
    AzureComputeAutoScaling.attributeTypeMap = [
        {
            "name": "maxInstanceSize",
            "baseName": "maxInstanceSize",
            "type": "string",
            "format": ""
        },
        {
            "name": "minInstanceSize",
            "baseName": "minInstanceSize",
            "type": "string",
            "format": ""
        }
    ];
    return AzureComputeAutoScaling;
}());
exports.AzureComputeAutoScaling = AzureComputeAutoScaling;
//# sourceMappingURL=AzureComputeAutoScaling.js.map

/***/ }),

/***/ 88122:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AzureHardwareSpec = void 0;
var AzureHardwareSpec = (function () {
    function AzureHardwareSpec() {
    }
    AzureHardwareSpec.getAttributeTypeMap = function () {
        return AzureHardwareSpec.attributeTypeMap;
    };
    AzureHardwareSpec.discriminator = undefined;
    AzureHardwareSpec.attributeTypeMap = [
        {
            "name": "instanceSize",
            "baseName": "instanceSize",
            "type": "string",
            "format": ""
        },
        {
            "name": "nodeCount",
            "baseName": "nodeCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return AzureHardwareSpec;
}());
exports.AzureHardwareSpec = AzureHardwareSpec;
//# sourceMappingURL=AzureHardwareSpec.js.map

/***/ }),

/***/ 37889:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AzureKeyVault = void 0;
var AzureKeyVault = (function () {
    function AzureKeyVault() {
    }
    AzureKeyVault.getAttributeTypeMap = function () {
        return AzureKeyVault.attributeTypeMap;
    };
    AzureKeyVault.discriminator = undefined;
    AzureKeyVault.attributeTypeMap = [
        {
            "name": "azureEnvironment",
            "baseName": "azureEnvironment",
            "type": "string",
            "format": ""
        },
        {
            "name": "clientID",
            "baseName": "clientID",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "keyIdentifier",
            "baseName": "keyIdentifier",
            "type": "string",
            "format": ""
        },
        {
            "name": "keyVaultName",
            "baseName": "keyVaultName",
            "type": "string",
            "format": ""
        },
        {
            "name": "resourceGroupName",
            "baseName": "resourceGroupName",
            "type": "string",
            "format": ""
        },
        {
            "name": "secret",
            "baseName": "secret",
            "type": "string",
            "format": ""
        },
        {
            "name": "subscriptionID",
            "baseName": "subscriptionID",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "tenantID",
            "baseName": "tenantID",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "valid",
            "baseName": "valid",
            "type": "boolean",
            "format": ""
        }
    ];
    return AzureKeyVault;
}());
exports.AzureKeyVault = AzureKeyVault;
//# sourceMappingURL=AzureKeyVault.js.map

/***/ }),

/***/ 8447:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AzurePeerNetwork = void 0;
var AzurePeerNetwork = (function () {
    function AzurePeerNetwork() {
    }
    AzurePeerNetwork.getAttributeTypeMap = function () {
        return AzurePeerNetwork.attributeTypeMap;
    };
    AzurePeerNetwork.discriminator = undefined;
    AzurePeerNetwork.attributeTypeMap = [
        {
            "name": "azureDirectoryId",
            "baseName": "azureDirectoryId",
            "type": "string",
            "format": ""
        },
        {
            "name": "azureSubscriptionId",
            "baseName": "azureSubscriptionId",
            "type": "string",
            "format": ""
        },
        {
            "name": "containerId",
            "baseName": "containerId",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorState",
            "baseName": "errorState",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "resourceGroupName",
            "baseName": "resourceGroupName",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "vnetName",
            "baseName": "vnetName",
            "type": "string",
            "format": ""
        }
    ];
    return AzurePeerNetwork;
}());
exports.AzurePeerNetwork = AzurePeerNetwork;
//# sourceMappingURL=AzurePeerNetwork.js.map

/***/ }),

/***/ 58704:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AzurePeerNetworkRequest = void 0;
var AzurePeerNetworkRequest = (function () {
    function AzurePeerNetworkRequest() {
    }
    AzurePeerNetworkRequest.getAttributeTypeMap = function () {
        return AzurePeerNetworkRequest.attributeTypeMap;
    };
    AzurePeerNetworkRequest.discriminator = undefined;
    AzurePeerNetworkRequest.attributeTypeMap = [
        {
            "name": "containerId",
            "baseName": "containerId",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "azureDirectoryId",
            "baseName": "azureDirectoryId",
            "type": "string",
            "format": ""
        },
        {
            "name": "azureSubscriptionId",
            "baseName": "azureSubscriptionId",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorState",
            "baseName": "errorState",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "resourceGroupName",
            "baseName": "resourceGroupName",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "vnetName",
            "baseName": "vnetName",
            "type": "string",
            "format": ""
        }
    ];
    return AzurePeerNetworkRequest;
}());
exports.AzurePeerNetworkRequest = AzurePeerNetworkRequest;
//# sourceMappingURL=AzurePeerNetworkRequest.js.map

/***/ }),

/***/ 53077:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AzurePrivateEndpoint = void 0;
var AzurePrivateEndpoint = (function () {
    function AzurePrivateEndpoint() {
    }
    AzurePrivateEndpoint.getAttributeTypeMap = function () {
        return AzurePrivateEndpoint.attributeTypeMap;
    };
    AzurePrivateEndpoint.discriminator = undefined;
    AzurePrivateEndpoint.attributeTypeMap = [
        {
            "name": "deleteRequested",
            "baseName": "deleteRequested",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "errorMessage",
            "baseName": "errorMessage",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateEndpointConnectionName",
            "baseName": "privateEndpointConnectionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateEndpointIPAddress",
            "baseName": "privateEndpointIPAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateEndpointResourceId",
            "baseName": "privateEndpointResourceId",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        }
    ];
    return AzurePrivateEndpoint;
}());
exports.AzurePrivateEndpoint = AzurePrivateEndpoint;
//# sourceMappingURL=AzurePrivateEndpoint.js.map

/***/ }),

/***/ 80978:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AzurePrivateLinkConnection = void 0;
var AzurePrivateLinkConnection = (function () {
    function AzurePrivateLinkConnection() {
    }
    AzurePrivateLinkConnection.getAttributeTypeMap = function () {
        return AzurePrivateLinkConnection.attributeTypeMap;
    };
    AzurePrivateLinkConnection.discriminator = undefined;
    AzurePrivateLinkConnection.attributeTypeMap = [
        {
            "name": "errorMessage",
            "baseName": "errorMessage",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateEndpoints",
            "baseName": "privateEndpoints",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "privateLinkServiceName",
            "baseName": "privateLinkServiceName",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateLinkServiceResourceId",
            "baseName": "privateLinkServiceResourceId",
            "type": "string",
            "format": ""
        },
        {
            "name": "regionName",
            "baseName": "regionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        }
    ];
    return AzurePrivateLinkConnection;
}());
exports.AzurePrivateLinkConnection = AzurePrivateLinkConnection;
//# sourceMappingURL=AzurePrivateLinkConnection.js.map

/***/ }),

/***/ 86338:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AzureProviderSettings = void 0;
var AzureProviderSettings = (function () {
    function AzureProviderSettings() {
    }
    AzureProviderSettings.getAttributeTypeMap = function () {
        return AzureProviderSettings.attributeTypeMap;
    };
    AzureProviderSettings.discriminator = undefined;
    AzureProviderSettings.attributeTypeMap = [
        {
            "name": "autoScaling",
            "baseName": "autoScaling",
            "type": "AzureAutoScaling",
            "format": ""
        },
        {
            "name": "diskTypeName",
            "baseName": "diskTypeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "instanceSizeName",
            "baseName": "instanceSizeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "regionName",
            "baseName": "regionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        }
    ];
    return AzureProviderSettings;
}());
exports.AzureProviderSettings = AzureProviderSettings;
//# sourceMappingURL=AzureProviderSettings.js.map

/***/ }),

/***/ 80857:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AzureRegionConfig = void 0;
var AzureRegionConfig = (function () {
    function AzureRegionConfig() {
    }
    AzureRegionConfig.getAttributeTypeMap = function () {
        return AzureRegionConfig.attributeTypeMap;
    };
    AzureRegionConfig.discriminator = undefined;
    AzureRegionConfig.attributeTypeMap = [
        {
            "name": "analyticsAutoScaling",
            "baseName": "analyticsAutoScaling",
            "type": "AutoScalingV15",
            "format": ""
        },
        {
            "name": "analyticsSpecs",
            "baseName": "analyticsSpecs",
            "type": "DedicatedHardwareSpec",
            "format": ""
        },
        {
            "name": "autoScaling",
            "baseName": "autoScaling",
            "type": "AutoScalingV15",
            "format": ""
        },
        {
            "name": "readOnlySpecs",
            "baseName": "readOnlySpecs",
            "type": "DedicatedHardwareSpec",
            "format": ""
        },
        {
            "name": "electableSpecs",
            "baseName": "electableSpecs",
            "type": "HardwareSpec",
            "format": ""
        },
        {
            "name": "priority",
            "baseName": "priority",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "regionName",
            "baseName": "regionName",
            "type": "string",
            "format": ""
        }
    ];
    return AzureRegionConfig;
}());
exports.AzureRegionConfig = AzureRegionConfig;
//# sourceMappingURL=AzureRegionConfig.js.map

/***/ }),

/***/ 50092:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BiConnector = void 0;
var BiConnector = (function () {
    function BiConnector() {
    }
    BiConnector.getAttributeTypeMap = function () {
        return BiConnector.attributeTypeMap;
    };
    BiConnector.discriminator = undefined;
    BiConnector.attributeTypeMap = [
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "readPreference",
            "baseName": "readPreference",
            "type": "string",
            "format": ""
        }
    ];
    return BiConnector;
}());
exports.BiConnector = BiConnector;
//# sourceMappingURL=BiConnector.js.map

/***/ }),

/***/ 98952:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=BillingEventTypeViewAlertableWithThreshold.js.map

/***/ }),

/***/ 4117:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=BillingEventTypeViewForNdsGroup.js.map

/***/ }),

/***/ 54882:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=BillingEventTypeViewForOrg.js.map

/***/ }),

/***/ 36519:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BillingEventViewForNdsGroup = void 0;
var BillingEventViewForNdsGroup = (function () {
    function BillingEventViewForNdsGroup() {
    }
    BillingEventViewForNdsGroup.getAttributeTypeMap = function () {
        return BillingEventViewForNdsGroup.attributeTypeMap;
    };
    BillingEventViewForNdsGroup.discriminator = undefined;
    BillingEventViewForNdsGroup.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "BillingEventTypeViewForNdsGroup",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "invoiceId",
            "baseName": "invoiceId",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "paymentId",
            "baseName": "paymentId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return BillingEventViewForNdsGroup;
}());
exports.BillingEventViewForNdsGroup = BillingEventViewForNdsGroup;
//# sourceMappingURL=BillingEventViewForNdsGroup.js.map

/***/ }),

/***/ 5399:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BillingEventViewForOrg = void 0;
var BillingEventViewForOrg = (function () {
    function BillingEventViewForOrg() {
    }
    BillingEventViewForOrg.getAttributeTypeMap = function () {
        return BillingEventViewForOrg.attributeTypeMap;
    };
    BillingEventViewForOrg.discriminator = undefined;
    BillingEventViewForOrg.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "BillingEventTypeViewForOrg",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "invoiceId",
            "baseName": "invoiceId",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "paymentId",
            "baseName": "paymentId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return BillingEventViewForOrg;
}());
exports.BillingEventViewForOrg = BillingEventViewForOrg;
//# sourceMappingURL=BillingEventViewForOrg.js.map

/***/ }),

/***/ 43087:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BillingThresholdAlertConfigViewForNdsGroup = void 0;
var BillingThresholdAlertConfigViewForNdsGroup = (function () {
    function BillingThresholdAlertConfigViewForNdsGroup() {
    }
    BillingThresholdAlertConfigViewForNdsGroup.getAttributeTypeMap = function () {
        return BillingThresholdAlertConfigViewForNdsGroup.attributeTypeMap;
    };
    BillingThresholdAlertConfigViewForNdsGroup.discriminator = undefined;
    BillingThresholdAlertConfigViewForNdsGroup.attributeTypeMap = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "BillingEventTypeViewAlertableWithThreshold",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "matchers",
            "baseName": "matchers",
            "type": "Array<MatcherView>",
            "format": ""
        },
        {
            "name": "notifications",
            "baseName": "notifications",
            "type": "Array<NotificationViewForNdsGroup>",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "GreaterThanRawThresholdView",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return BillingThresholdAlertConfigViewForNdsGroup;
}());
exports.BillingThresholdAlertConfigViewForNdsGroup = BillingThresholdAlertConfigViewForNdsGroup;
//# sourceMappingURL=BillingThresholdAlertConfigViewForNdsGroup.js.map

/***/ }),

/***/ 62930:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CharFilterhtmlStrip = void 0;
var CharFilterhtmlStrip = (function () {
    function CharFilterhtmlStrip() {
    }
    CharFilterhtmlStrip.getAttributeTypeMap = function () {
        return CharFilterhtmlStrip.attributeTypeMap;
    };
    CharFilterhtmlStrip.discriminator = undefined;
    CharFilterhtmlStrip.attributeTypeMap = [
        {
            "name": "ignoredTags",
            "baseName": "ignoredTags",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return CharFilterhtmlStrip;
}());
exports.CharFilterhtmlStrip = CharFilterhtmlStrip;
//# sourceMappingURL=CharFilterhtmlStrip.js.map

/***/ }),

/***/ 3439:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CharFiltericuNormalize = void 0;
var CharFiltericuNormalize = (function () {
    function CharFiltericuNormalize() {
    }
    CharFiltericuNormalize.getAttributeTypeMap = function () {
        return CharFiltericuNormalize.attributeTypeMap;
    };
    CharFiltericuNormalize.discriminator = undefined;
    CharFiltericuNormalize.attributeTypeMap = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return CharFiltericuNormalize;
}());
exports.CharFiltericuNormalize = CharFiltericuNormalize;
//# sourceMappingURL=CharFiltericuNormalize.js.map

/***/ }),

/***/ 83670:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CharFiltermapping = void 0;
var CharFiltermapping = (function () {
    function CharFiltermapping() {
    }
    CharFiltermapping.getAttributeTypeMap = function () {
        return CharFiltermapping.attributeTypeMap;
    };
    CharFiltermapping.discriminator = undefined;
    CharFiltermapping.attributeTypeMap = [
        {
            "name": "mappings",
            "baseName": "mappings",
            "type": "CharFiltermappingMappings",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return CharFiltermapping;
}());
exports.CharFiltermapping = CharFiltermapping;
//# sourceMappingURL=CharFiltermapping.js.map

/***/ }),

/***/ 72849:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CharFiltermappingMappings = void 0;
var CharFiltermappingMappings = (function () {
    function CharFiltermappingMappings() {
    }
    CharFiltermappingMappings.getAttributeTypeMap = function () {
        return CharFiltermappingMappings.attributeTypeMap;
    };
    CharFiltermappingMappings.discriminator = undefined;
    CharFiltermappingMappings.attributeTypeMap = [
        {
            "name": "additionalProperties",
            "baseName": "additionalProperties",
            "type": "string",
            "format": ""
        }
    ];
    return CharFiltermappingMappings;
}());
exports.CharFiltermappingMappings = CharFiltermappingMappings;
//# sourceMappingURL=CharFiltermappingMappings.js.map

/***/ }),

/***/ 40897:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CharFilterpersian = void 0;
var CharFilterpersian = (function () {
    function CharFilterpersian() {
    }
    CharFilterpersian.getAttributeTypeMap = function () {
        return CharFilterpersian.attributeTypeMap;
    };
    CharFilterpersian.discriminator = undefined;
    CharFilterpersian.attributeTypeMap = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return CharFilterpersian;
}());
exports.CharFilterpersian = CharFilterpersian;
//# sourceMappingURL=CharFilterpersian.js.map

/***/ }),

/***/ 49337:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Checkpoint = void 0;
var Checkpoint = (function () {
    function Checkpoint() {
    }
    Checkpoint.getAttributeTypeMap = function () {
        return Checkpoint.attributeTypeMap;
    };
    Checkpoint.discriminator = undefined;
    Checkpoint.attributeTypeMap = [
        {
            "name": "clusterId",
            "baseName": "clusterId",
            "type": "string",
            "format": ""
        },
        {
            "name": "completed",
            "baseName": "completed",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "parts",
            "baseName": "parts",
            "type": "Array<ApiCheckpointPartView>",
            "format": ""
        },
        {
            "name": "restorable",
            "baseName": "restorable",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "started",
            "baseName": "started",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return Checkpoint;
}());
exports.Checkpoint = Checkpoint;
//# sourceMappingURL=Checkpoint.js.map

/***/ }),

/***/ 52853:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CloudProviderAccess = void 0;
var CloudProviderAccess = (function () {
    function CloudProviderAccess() {
    }
    CloudProviderAccess.getAttributeTypeMap = function () {
        return CloudProviderAccess.attributeTypeMap;
    };
    CloudProviderAccess.discriminator = undefined;
    CloudProviderAccess.attributeTypeMap = [
        {
            "name": "awsIamRoles",
            "baseName": "awsIamRoles",
            "type": "Array<CloudProviderAccessAWSIAMRole>",
            "format": ""
        }
    ];
    return CloudProviderAccess;
}());
exports.CloudProviderAccess = CloudProviderAccess;
//# sourceMappingURL=CloudProviderAccess.js.map

/***/ }),

/***/ 64656:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CloudProviderAccessAWSIAMRole = void 0;
var CloudProviderAccessAWSIAMRole = (function () {
    function CloudProviderAccessAWSIAMRole() {
    }
    CloudProviderAccessAWSIAMRole.getAttributeTypeMap = function () {
        return CloudProviderAccessAWSIAMRole.attributeTypeMap;
    };
    CloudProviderAccessAWSIAMRole.discriminator = undefined;
    CloudProviderAccessAWSIAMRole.attributeTypeMap = [
        {
            "name": "atlasAWSAccountArn",
            "baseName": "atlasAWSAccountArn",
            "type": "string",
            "format": ""
        },
        {
            "name": "atlasAssumedRoleExternalId",
            "baseName": "atlasAssumedRoleExternalId",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "authorizedDate",
            "baseName": "authorizedDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "createdDate",
            "baseName": "createdDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "featureUsages",
            "baseName": "featureUsages",
            "type": "Array<CloudProviderAccessFeatureUsage>",
            "format": ""
        },
        {
            "name": "iamAssumedRoleArn",
            "baseName": "iamAssumedRoleArn",
            "type": "string",
            "format": ""
        },
        {
            "name": "roleId",
            "baseName": "roleId",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        }
    ];
    return CloudProviderAccessAWSIAMRole;
}());
exports.CloudProviderAccessAWSIAMRole = CloudProviderAccessAWSIAMRole;
//# sourceMappingURL=CloudProviderAccessAWSIAMRole.js.map

/***/ }),

/***/ 93713:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CloudProviderAccessDataLakeFeatureUsage = void 0;
var CloudProviderAccessDataLakeFeatureUsage = (function () {
    function CloudProviderAccessDataLakeFeatureUsage() {
    }
    CloudProviderAccessDataLakeFeatureUsage.getAttributeTypeMap = function () {
        return CloudProviderAccessDataLakeFeatureUsage.attributeTypeMap;
    };
    CloudProviderAccessDataLakeFeatureUsage.discriminator = undefined;
    CloudProviderAccessDataLakeFeatureUsage.attributeTypeMap = [
        {
            "name": "featureId",
            "baseName": "featureId",
            "type": "CloudProviderAccessFeatureUsageDataLakeFeatureId",
            "format": ""
        },
        {
            "name": "featureType",
            "baseName": "featureType",
            "type": "string",
            "format": ""
        }
    ];
    return CloudProviderAccessDataLakeFeatureUsage;
}());
exports.CloudProviderAccessDataLakeFeatureUsage = CloudProviderAccessDataLakeFeatureUsage;
//# sourceMappingURL=CloudProviderAccessDataLakeFeatureUsage.js.map

/***/ }),

/***/ 74525:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CloudProviderAccessEncryptionAtRestFeatureUsage = void 0;
var CloudProviderAccessEncryptionAtRestFeatureUsage = (function () {
    function CloudProviderAccessEncryptionAtRestFeatureUsage() {
    }
    CloudProviderAccessEncryptionAtRestFeatureUsage.getAttributeTypeMap = function () {
        return CloudProviderAccessEncryptionAtRestFeatureUsage.attributeTypeMap;
    };
    CloudProviderAccessEncryptionAtRestFeatureUsage.discriminator = undefined;
    CloudProviderAccessEncryptionAtRestFeatureUsage.attributeTypeMap = [
        {
            "name": "featureId",
            "baseName": "featureId",
            "type": "any",
            "format": ""
        },
        {
            "name": "featureType",
            "baseName": "featureType",
            "type": "string",
            "format": ""
        }
    ];
    return CloudProviderAccessEncryptionAtRestFeatureUsage;
}());
exports.CloudProviderAccessEncryptionAtRestFeatureUsage = CloudProviderAccessEncryptionAtRestFeatureUsage;
//# sourceMappingURL=CloudProviderAccessEncryptionAtRestFeatureUsage.js.map

/***/ }),

/***/ 35014:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CloudProviderAccessExportSnapshotFeatureUsage = void 0;
var CloudProviderAccessExportSnapshotFeatureUsage = (function () {
    function CloudProviderAccessExportSnapshotFeatureUsage() {
    }
    CloudProviderAccessExportSnapshotFeatureUsage.getAttributeTypeMap = function () {
        return CloudProviderAccessExportSnapshotFeatureUsage.attributeTypeMap;
    };
    CloudProviderAccessExportSnapshotFeatureUsage.discriminator = undefined;
    CloudProviderAccessExportSnapshotFeatureUsage.attributeTypeMap = [
        {
            "name": "featureId",
            "baseName": "featureId",
            "type": "CloudProviderAccessFeatureUsageExportSnapshotFeatureId",
            "format": ""
        },
        {
            "name": "featureType",
            "baseName": "featureType",
            "type": "string",
            "format": ""
        }
    ];
    return CloudProviderAccessExportSnapshotFeatureUsage;
}());
exports.CloudProviderAccessExportSnapshotFeatureUsage = CloudProviderAccessExportSnapshotFeatureUsage;
//# sourceMappingURL=CloudProviderAccessExportSnapshotFeatureUsage.js.map

/***/ }),

/***/ 17195:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CloudProviderAccessFeatureUsage = void 0;
var CloudProviderAccessFeatureUsage = (function () {
    function CloudProviderAccessFeatureUsage() {
    }
    CloudProviderAccessFeatureUsage.getAttributeTypeMap = function () {
        return CloudProviderAccessFeatureUsage.attributeTypeMap;
    };
    CloudProviderAccessFeatureUsage.discriminator = "featureType";
    CloudProviderAccessFeatureUsage.attributeTypeMap = [
        {
            "name": "featureId",
            "baseName": "featureId",
            "type": "CloudProviderAccessFeatureUsageExportSnapshotFeatureId",
            "format": ""
        },
        {
            "name": "featureType",
            "baseName": "featureType",
            "type": "string",
            "format": ""
        }
    ];
    return CloudProviderAccessFeatureUsage;
}());
exports.CloudProviderAccessFeatureUsage = CloudProviderAccessFeatureUsage;
//# sourceMappingURL=CloudProviderAccessFeatureUsage.js.map

/***/ }),

/***/ 94564:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CloudProviderAccessFeatureUsageDataLakeFeatureId = void 0;
var CloudProviderAccessFeatureUsageDataLakeFeatureId = (function () {
    function CloudProviderAccessFeatureUsageDataLakeFeatureId() {
    }
    CloudProviderAccessFeatureUsageDataLakeFeatureId.getAttributeTypeMap = function () {
        return CloudProviderAccessFeatureUsageDataLakeFeatureId.attributeTypeMap;
    };
    CloudProviderAccessFeatureUsageDataLakeFeatureId.discriminator = undefined;
    CloudProviderAccessFeatureUsageDataLakeFeatureId.attributeTypeMap = [
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        }
    ];
    return CloudProviderAccessFeatureUsageDataLakeFeatureId;
}());
exports.CloudProviderAccessFeatureUsageDataLakeFeatureId = CloudProviderAccessFeatureUsageDataLakeFeatureId;
//# sourceMappingURL=CloudProviderAccessFeatureUsageDataLakeFeatureId.js.map

/***/ }),

/***/ 68027:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CloudProviderAccessFeatureUsageExportSnapshotFeatureId = void 0;
var CloudProviderAccessFeatureUsageExportSnapshotFeatureId = (function () {
    function CloudProviderAccessFeatureUsageExportSnapshotFeatureId() {
    }
    CloudProviderAccessFeatureUsageExportSnapshotFeatureId.getAttributeTypeMap = function () {
        return CloudProviderAccessFeatureUsageExportSnapshotFeatureId.attributeTypeMap;
    };
    CloudProviderAccessFeatureUsageExportSnapshotFeatureId.discriminator = undefined;
    CloudProviderAccessFeatureUsageExportSnapshotFeatureId.attributeTypeMap = [
        {
            "name": "exportBucketId",
            "baseName": "exportBucketId",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        }
    ];
    return CloudProviderAccessFeatureUsageExportSnapshotFeatureId;
}());
exports.CloudProviderAccessFeatureUsageExportSnapshotFeatureId = CloudProviderAccessFeatureUsageExportSnapshotFeatureId;
//# sourceMappingURL=CloudProviderAccessFeatureUsageExportSnapshotFeatureId.js.map

/***/ }),

/***/ 78657:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CloudProviderAccessRole = void 0;
var CloudProviderAccessRole = (function () {
    function CloudProviderAccessRole() {
    }
    CloudProviderAccessRole.getAttributeTypeMap = function () {
        return CloudProviderAccessRole.attributeTypeMap;
    };
    CloudProviderAccessRole.discriminator = "providerName";
    CloudProviderAccessRole.attributeTypeMap = [
        {
            "name": "atlasAWSAccountArn",
            "baseName": "atlasAWSAccountArn",
            "type": "string",
            "format": ""
        },
        {
            "name": "atlasAssumedRoleExternalId",
            "baseName": "atlasAssumedRoleExternalId",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "authorizedDate",
            "baseName": "authorizedDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "createdDate",
            "baseName": "createdDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "featureUsages",
            "baseName": "featureUsages",
            "type": "Array<CloudProviderAccessFeatureUsage>",
            "format": ""
        },
        {
            "name": "iamAssumedRoleArn",
            "baseName": "iamAssumedRoleArn",
            "type": "string",
            "format": ""
        },
        {
            "name": "roleId",
            "baseName": "roleId",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        }
    ];
    return CloudProviderAccessRole;
}());
exports.CloudProviderAccessRole = CloudProviderAccessRole;
//# sourceMappingURL=CloudProviderAccessRole.js.map

/***/ }),

/***/ 98564:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CloudProviderContainer = void 0;
var CloudProviderContainer = (function () {
    function CloudProviderContainer() {
    }
    CloudProviderContainer.getAttributeTypeMap = function () {
        return CloudProviderContainer.attributeTypeMap;
    };
    CloudProviderContainer.discriminator = "providerName";
    CloudProviderContainer.attributeTypeMap = [
        {
            "name": "atlasCidrBlock",
            "baseName": "atlasCidrBlock",
            "type": "string",
            "format": ""
        },
        {
            "name": "azureSubscriptionId",
            "baseName": "azureSubscriptionId",
            "type": "string",
            "format": ""
        },
        {
            "name": "region",
            "baseName": "region",
            "type": "string",
            "format": ""
        },
        {
            "name": "vnetName",
            "baseName": "vnetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "provisioned",
            "baseName": "provisioned",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "gcpProjectId",
            "baseName": "gcpProjectId",
            "type": "string",
            "format": ""
        },
        {
            "name": "networkName",
            "baseName": "networkName",
            "type": "string",
            "format": ""
        },
        {
            "name": "regions",
            "baseName": "regions",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "regionName",
            "baseName": "regionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "vpcId",
            "baseName": "vpcId",
            "type": "string",
            "format": ""
        }
    ];
    return CloudProviderContainer;
}());
exports.CloudProviderContainer = CloudProviderContainer;
//# sourceMappingURL=CloudProviderContainer.js.map

/***/ }),

/***/ 23896:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClusterAlertConfigViewForNdsGroup = void 0;
var ClusterAlertConfigViewForNdsGroup = (function () {
    function ClusterAlertConfigViewForNdsGroup() {
    }
    ClusterAlertConfigViewForNdsGroup.getAttributeTypeMap = function () {
        return ClusterAlertConfigViewForNdsGroup.attributeTypeMap;
    };
    ClusterAlertConfigViewForNdsGroup.discriminator = undefined;
    ClusterAlertConfigViewForNdsGroup.attributeTypeMap = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "ClusterEventTypeViewAlertable",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "matchers",
            "baseName": "matchers",
            "type": "Array<ClusterMatcherView>",
            "format": ""
        },
        {
            "name": "notifications",
            "baseName": "notifications",
            "type": "Array<NotificationViewForNdsGroup>",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return ClusterAlertConfigViewForNdsGroup;
}());
exports.ClusterAlertConfigViewForNdsGroup = ClusterAlertConfigViewForNdsGroup;
//# sourceMappingURL=ClusterAlertConfigViewForNdsGroup.js.map

/***/ }),

/***/ 76200:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClusterAlertView = void 0;
var ClusterAlertView = (function () {
    function ClusterAlertView() {
    }
    ClusterAlertView.getAttributeTypeMap = function () {
        return ClusterAlertView.attributeTypeMap;
    };
    ClusterAlertView.discriminator = undefined;
    ClusterAlertView.attributeTypeMap = [
        {
            "name": "acknowledgedUntil",
            "baseName": "acknowledgedUntil",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "acknowledgementComment",
            "baseName": "acknowledgementComment",
            "type": "string",
            "format": ""
        },
        {
            "name": "acknowledgingUsername",
            "baseName": "acknowledgingUsername",
            "type": "string",
            "format": "email"
        },
        {
            "name": "alertConfigId",
            "baseName": "alertConfigId",
            "type": "string",
            "format": ""
        },
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "ClusterEventTypeViewAlertable",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "lastNotified",
            "baseName": "lastNotified",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "resolved",
            "baseName": "resolved",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return ClusterAlertView;
}());
exports.ClusterAlertView = ClusterAlertView;
//# sourceMappingURL=ClusterAlertView.js.map

/***/ }),

/***/ 65872:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClusterDescriptionConnectionStrings = void 0;
var ClusterDescriptionConnectionStrings = (function () {
    function ClusterDescriptionConnectionStrings() {
    }
    ClusterDescriptionConnectionStrings.getAttributeTypeMap = function () {
        return ClusterDescriptionConnectionStrings.attributeTypeMap;
    };
    ClusterDescriptionConnectionStrings.discriminator = undefined;
    ClusterDescriptionConnectionStrings.attributeTypeMap = [
        {
            "name": "awsPrivateLink",
            "baseName": "awsPrivateLink",
            "type": "{ [key: string]: string; }",
            "format": ""
        },
        {
            "name": "awsPrivateLinkSrv",
            "baseName": "awsPrivateLinkSrv",
            "type": "{ [key: string]: string; }",
            "format": ""
        },
        {
            "name": "_private",
            "baseName": "private",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateEndpoint",
            "baseName": "privateEndpoint",
            "type": "Array<ClusterDescriptionConnectionStringsPrivateEndpoint>",
            "format": ""
        },
        {
            "name": "privateSrv",
            "baseName": "privateSrv",
            "type": "string",
            "format": ""
        },
        {
            "name": "standard",
            "baseName": "standard",
            "type": "string",
            "format": ""
        },
        {
            "name": "standardSrv",
            "baseName": "standardSrv",
            "type": "string",
            "format": ""
        }
    ];
    return ClusterDescriptionConnectionStrings;
}());
exports.ClusterDescriptionConnectionStrings = ClusterDescriptionConnectionStrings;
//# sourceMappingURL=ClusterDescriptionConnectionStrings.js.map

/***/ }),

/***/ 39629:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClusterDescriptionConnectionStringsPrivateEndpoint = void 0;
var ClusterDescriptionConnectionStringsPrivateEndpoint = (function () {
    function ClusterDescriptionConnectionStringsPrivateEndpoint() {
    }
    ClusterDescriptionConnectionStringsPrivateEndpoint.getAttributeTypeMap = function () {
        return ClusterDescriptionConnectionStringsPrivateEndpoint.attributeTypeMap;
    };
    ClusterDescriptionConnectionStringsPrivateEndpoint.discriminator = undefined;
    ClusterDescriptionConnectionStringsPrivateEndpoint.attributeTypeMap = [
        {
            "name": "connectionString",
            "baseName": "connectionString",
            "type": "string",
            "format": ""
        },
        {
            "name": "endpoints",
            "baseName": "endpoints",
            "type": "Array<ClusterDescriptionConnectionStringsPrivateEndpointEndpoint>",
            "format": ""
        },
        {
            "name": "srvConnectionString",
            "baseName": "srvConnectionString",
            "type": "string",
            "format": ""
        },
        {
            "name": "srvShardOptimizedConnectionString",
            "baseName": "srvShardOptimizedConnectionString",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return ClusterDescriptionConnectionStringsPrivateEndpoint;
}());
exports.ClusterDescriptionConnectionStringsPrivateEndpoint = ClusterDescriptionConnectionStringsPrivateEndpoint;
//# sourceMappingURL=ClusterDescriptionConnectionStringsPrivateEndpoint.js.map

/***/ }),

/***/ 31757:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClusterDescriptionConnectionStringsPrivateEndpointEndpoint = void 0;
var ClusterDescriptionConnectionStringsPrivateEndpointEndpoint = (function () {
    function ClusterDescriptionConnectionStringsPrivateEndpointEndpoint() {
    }
    ClusterDescriptionConnectionStringsPrivateEndpointEndpoint.getAttributeTypeMap = function () {
        return ClusterDescriptionConnectionStringsPrivateEndpointEndpoint.attributeTypeMap;
    };
    ClusterDescriptionConnectionStringsPrivateEndpointEndpoint.discriminator = undefined;
    ClusterDescriptionConnectionStringsPrivateEndpointEndpoint.attributeTypeMap = [
        {
            "name": "endpointId",
            "baseName": "endpointId",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "region",
            "baseName": "region",
            "type": "string",
            "format": ""
        }
    ];
    return ClusterDescriptionConnectionStringsPrivateEndpointEndpoint;
}());
exports.ClusterDescriptionConnectionStringsPrivateEndpointEndpoint = ClusterDescriptionConnectionStringsPrivateEndpointEndpoint;
//# sourceMappingURL=ClusterDescriptionConnectionStringsPrivateEndpointEndpoint.js.map

/***/ }),

/***/ 40209:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClusterDescriptionProcessArgs = void 0;
var ClusterDescriptionProcessArgs = (function () {
    function ClusterDescriptionProcessArgs() {
    }
    ClusterDescriptionProcessArgs.getAttributeTypeMap = function () {
        return ClusterDescriptionProcessArgs.attributeTypeMap;
    };
    ClusterDescriptionProcessArgs.discriminator = undefined;
    ClusterDescriptionProcessArgs.attributeTypeMap = [
        {
            "name": "defaultReadConcern",
            "baseName": "defaultReadConcern",
            "type": "string",
            "format": ""
        },
        {
            "name": "defaultWriteConcern",
            "baseName": "defaultWriteConcern",
            "type": "string",
            "format": ""
        },
        {
            "name": "failIndexKeyTooLong",
            "baseName": "failIndexKeyTooLong",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "javascriptEnabled",
            "baseName": "javascriptEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "minimumEnabledTlsProtocol",
            "baseName": "minimumEnabledTlsProtocol",
            "type": "string",
            "format": ""
        },
        {
            "name": "noTableScan",
            "baseName": "noTableScan",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "oplogMinRetentionHours",
            "baseName": "oplogMinRetentionHours",
            "type": "number",
            "format": "double"
        },
        {
            "name": "oplogSizeMB",
            "baseName": "oplogSizeMB",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "sampleRefreshIntervalBIConnector",
            "baseName": "sampleRefreshIntervalBIConnector",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "sampleSizeBIConnector",
            "baseName": "sampleSizeBIConnector",
            "type": "number",
            "format": "int32"
        }
    ];
    return ClusterDescriptionProcessArgs;
}());
exports.ClusterDescriptionProcessArgs = ClusterDescriptionProcessArgs;
//# sourceMappingURL=ClusterDescriptionProcessArgs.js.map

/***/ }),

/***/ 90151:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClusterDescriptionV15 = void 0;
var ClusterDescriptionV15 = (function () {
    function ClusterDescriptionV15() {
    }
    ClusterDescriptionV15.getAttributeTypeMap = function () {
        return ClusterDescriptionV15.attributeTypeMap;
    };
    ClusterDescriptionV15.discriminator = undefined;
    ClusterDescriptionV15.attributeTypeMap = [
        {
            "name": "backupEnabled",
            "baseName": "backupEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "biConnector",
            "baseName": "biConnector",
            "type": "BiConnector",
            "format": ""
        },
        {
            "name": "clusterType",
            "baseName": "clusterType",
            "type": "string",
            "format": ""
        },
        {
            "name": "connectionStrings",
            "baseName": "connectionStrings",
            "type": "ClusterDescriptionConnectionStrings",
            "format": ""
        },
        {
            "name": "createDate",
            "baseName": "createDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "diskSizeGB",
            "baseName": "diskSizeGB",
            "type": "number",
            "format": "double"
        },
        {
            "name": "encryptionAtRestProvider",
            "baseName": "encryptionAtRestProvider",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "labels",
            "baseName": "labels",
            "type": "Array<NDSLabel>",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "mongoDBMajorVersion",
            "baseName": "mongoDBMajorVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "mongoDBVersion",
            "baseName": "mongoDBVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "paused",
            "baseName": "paused",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "pitEnabled",
            "baseName": "pitEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "replicationSpecs",
            "baseName": "replicationSpecs",
            "type": "Array<ReplicationSpec>",
            "format": ""
        },
        {
            "name": "rootCertType",
            "baseName": "rootCertType",
            "type": "string",
            "format": ""
        },
        {
            "name": "stateName",
            "baseName": "stateName",
            "type": "string",
            "format": ""
        },
        {
            "name": "terminationProtectionEnabled",
            "baseName": "terminationProtectionEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "versionReleaseSystem",
            "baseName": "versionReleaseSystem",
            "type": "string",
            "format": ""
        }
    ];
    return ClusterDescriptionV15;
}());
exports.ClusterDescriptionV15 = ClusterDescriptionV15;
//# sourceMappingURL=ClusterDescriptionV15.js.map

/***/ }),

/***/ 14807:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=ClusterEventTypeViewAlertable.js.map

/***/ }),

/***/ 38768:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=ClusterEventTypeViewForNdsGroup.js.map

/***/ }),

/***/ 22587:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClusterEventViewForNdsGroup = void 0;
var ClusterEventViewForNdsGroup = (function () {
    function ClusterEventViewForNdsGroup() {
    }
    ClusterEventViewForNdsGroup.getAttributeTypeMap = function () {
        return ClusterEventViewForNdsGroup.attributeTypeMap;
    };
    ClusterEventViewForNdsGroup.discriminator = undefined;
    ClusterEventViewForNdsGroup.attributeTypeMap = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "ClusterEventTypeViewForNdsGroup",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "shardName",
            "baseName": "shardName",
            "type": "string",
            "format": ""
        }
    ];
    return ClusterEventViewForNdsGroup;
}());
exports.ClusterEventViewForNdsGroup = ClusterEventViewForNdsGroup;
//# sourceMappingURL=ClusterEventViewForNdsGroup.js.map

/***/ }),

/***/ 7665:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=ClusterMatcherField.js.map

/***/ }),

/***/ 2188:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClusterMatcherView = void 0;
var ClusterMatcherView = (function () {
    function ClusterMatcherView() {
    }
    ClusterMatcherView.getAttributeTypeMap = function () {
        return ClusterMatcherView.attributeTypeMap;
    };
    ClusterMatcherView.discriminator = undefined;
    ClusterMatcherView.attributeTypeMap = [
        {
            "name": "fieldName",
            "baseName": "fieldName",
            "type": "ClusterMatcherField",
            "format": ""
        },
        {
            "name": "operator",
            "baseName": "operator",
            "type": "string",
            "format": ""
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string",
            "format": ""
        }
    ];
    return ClusterMatcherView;
}());
exports.ClusterMatcherView = ClusterMatcherView;
//# sourceMappingURL=ClusterMatcherView.js.map

/***/ }),

/***/ 44511:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClusterOutageSimulation = void 0;
var ClusterOutageSimulation = (function () {
    function ClusterOutageSimulation() {
    }
    ClusterOutageSimulation.getAttributeTypeMap = function () {
        return ClusterOutageSimulation.attributeTypeMap;
    };
    ClusterOutageSimulation.discriminator = undefined;
    ClusterOutageSimulation.attributeTypeMap = [
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "outageFilters",
            "baseName": "outageFilters",
            "type": "Array<ClusterOutageSimulationOutageFilter>",
            "format": ""
        },
        {
            "name": "startRequestDate",
            "baseName": "startRequestDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string",
            "format": ""
        }
    ];
    return ClusterOutageSimulation;
}());
exports.ClusterOutageSimulation = ClusterOutageSimulation;
//# sourceMappingURL=ClusterOutageSimulation.js.map

/***/ }),

/***/ 48253:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClusterOutageSimulationOutageFilter = void 0;
var ClusterOutageSimulationOutageFilter = (function () {
    function ClusterOutageSimulationOutageFilter() {
    }
    ClusterOutageSimulationOutageFilter.getAttributeTypeMap = function () {
        return ClusterOutageSimulationOutageFilter.attributeTypeMap;
    };
    ClusterOutageSimulationOutageFilter.discriminator = undefined;
    ClusterOutageSimulationOutageFilter.attributeTypeMap = [
        {
            "name": "cloudProvider",
            "baseName": "cloudProvider",
            "type": "string",
            "format": ""
        },
        {
            "name": "regionName",
            "baseName": "regionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return ClusterOutageSimulationOutageFilter;
}());
exports.ClusterOutageSimulationOutageFilter = ClusterOutageSimulationOutageFilter;
//# sourceMappingURL=ClusterOutageSimulationOutageFilter.js.map

/***/ }),

/***/ 73257:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClusterProviderSettings = void 0;
var ClusterProviderSettings = (function () {
    function ClusterProviderSettings() {
    }
    ClusterProviderSettings.getAttributeTypeMap = function () {
        return ClusterProviderSettings.attributeTypeMap;
    };
    ClusterProviderSettings.discriminator = "providerName";
    ClusterProviderSettings.attributeTypeMap = [
        {
            "name": "autoScaling",
            "baseName": "autoScaling",
            "type": "FreeAutoScaling",
            "format": ""
        },
        {
            "name": "diskIOPS",
            "baseName": "diskIOPS",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "encryptEBSVolume",
            "baseName": "encryptEBSVolume",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "instanceSizeName",
            "baseName": "instanceSizeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "regionName",
            "baseName": "regionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "volumeType",
            "baseName": "volumeType",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "diskTypeName",
            "baseName": "diskTypeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "backingProviderName",
            "baseName": "backingProviderName",
            "type": "string",
            "format": ""
        }
    ];
    return ClusterProviderSettings;
}());
exports.ClusterProviderSettings = ClusterProviderSettings;
//# sourceMappingURL=ClusterProviderSettings.js.map

/***/ }),

/***/ 79261:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClusterStatus = void 0;
var ClusterStatus = (function () {
    function ClusterStatus() {
    }
    ClusterStatus.getAttributeTypeMap = function () {
        return ClusterStatus.attributeTypeMap;
    };
    ClusterStatus.discriminator = undefined;
    ClusterStatus.attributeTypeMap = [
        {
            "name": "changeStatus",
            "baseName": "changeStatus",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        }
    ];
    return ClusterStatus;
}());
exports.ClusterStatus = ClusterStatus;
//# sourceMappingURL=ClusterStatus.js.map

/***/ }),

/***/ 87407:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClusterView = void 0;
var ClusterView = (function () {
    function ClusterView() {
    }
    ClusterView.getAttributeTypeMap = function () {
        return ClusterView.attributeTypeMap;
    };
    ClusterView.discriminator = undefined;
    ClusterView.attributeTypeMap = [
        {
            "name": "alertCount",
            "baseName": "alertCount",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "authEnabled",
            "baseName": "authEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "availability",
            "baseName": "availability",
            "type": "string",
            "format": ""
        },
        {
            "name": "backupEnabled",
            "baseName": "backupEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "clusterId",
            "baseName": "clusterId",
            "type": "string",
            "format": ""
        },
        {
            "name": "dataSizeBytes",
            "baseName": "dataSizeBytes",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "nodeCount",
            "baseName": "nodeCount",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "sslEnabled",
            "baseName": "sslEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "versions",
            "baseName": "versions",
            "type": "Set<string>",
            "format": ""
        }
    ];
    return ClusterView;
}());
exports.ClusterView = ClusterView;
//# sourceMappingURL=ClusterView.js.map

/***/ }),

/***/ 36021:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Collation = void 0;
var Collation = (function () {
    function Collation() {
    }
    Collation.getAttributeTypeMap = function () {
        return Collation.attributeTypeMap;
    };
    Collation.discriminator = undefined;
    Collation.attributeTypeMap = [
        {
            "name": "alternate",
            "baseName": "alternate",
            "type": "string",
            "format": ""
        },
        {
            "name": "backwards",
            "baseName": "backwards",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "caseFirst",
            "baseName": "caseFirst",
            "type": "string",
            "format": ""
        },
        {
            "name": "caseLevel",
            "baseName": "caseLevel",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "locale",
            "baseName": "locale",
            "type": "string",
            "format": ""
        },
        {
            "name": "maxVariable",
            "baseName": "maxVariable",
            "type": "string",
            "format": ""
        },
        {
            "name": "normalization",
            "baseName": "normalization",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "numericOrdering",
            "baseName": "numericOrdering",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "strength",
            "baseName": "strength",
            "type": "number",
            "format": "int32"
        }
    ];
    return Collation;
}());
exports.Collation = Collation;
//# sourceMappingURL=Collation.js.map

/***/ }),

/***/ 93977:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ComputeAutoScaling = void 0;
var ComputeAutoScaling = (function () {
    function ComputeAutoScaling() {
    }
    ComputeAutoScaling.getAttributeTypeMap = function () {
        return ComputeAutoScaling.attributeTypeMap;
    };
    ComputeAutoScaling.discriminator = undefined;
    ComputeAutoScaling.attributeTypeMap = [
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "scaleDownEnabled",
            "baseName": "scaleDownEnabled",
            "type": "boolean",
            "format": ""
        }
    ];
    return ComputeAutoScaling;
}());
exports.ComputeAutoScaling = ComputeAutoScaling;
//# sourceMappingURL=ComputeAutoScaling.js.map

/***/ }),

/***/ 56345:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ComputeAutoScalingV15 = void 0;
var ComputeAutoScalingV15 = (function () {
    function ComputeAutoScalingV15() {
    }
    ComputeAutoScalingV15.getAttributeTypeMap = function () {
        return ComputeAutoScalingV15.attributeTypeMap;
    };
    ComputeAutoScalingV15.discriminator = undefined;
    ComputeAutoScalingV15.attributeTypeMap = [
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "maxInstanceSize",
            "baseName": "maxInstanceSize",
            "type": "InstanceSize",
            "format": ""
        },
        {
            "name": "minInstanceSize",
            "baseName": "minInstanceSize",
            "type": "InstanceSize",
            "format": ""
        },
        {
            "name": "scaleDownEnabled",
            "baseName": "scaleDownEnabled",
            "type": "boolean",
            "format": ""
        }
    ];
    return ComputeAutoScalingV15;
}());
exports.ComputeAutoScalingV15 = ComputeAutoScalingV15;
//# sourceMappingURL=ComputeAutoScalingV15.js.map

/***/ }),

/***/ 60556:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConnectedOrgConfigView = void 0;
var ConnectedOrgConfigView = (function () {
    function ConnectedOrgConfigView() {
    }
    ConnectedOrgConfigView.getAttributeTypeMap = function () {
        return ConnectedOrgConfigView.attributeTypeMap;
    };
    ConnectedOrgConfigView.discriminator = undefined;
    ConnectedOrgConfigView.attributeTypeMap = [
        {
            "name": "domainAllowList",
            "baseName": "domainAllowList",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "domainRestrictionEnabled",
            "baseName": "domainRestrictionEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "identityProviderId",
            "baseName": "identityProviderId",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "postAuthRoleGrants",
            "baseName": "postAuthRoleGrants",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "roleMappings",
            "baseName": "roleMappings",
            "type": "Set<RoleMappingView>",
            "format": ""
        },
        {
            "name": "userConflicts",
            "baseName": "userConflicts",
            "type": "Array<FederatedUserView>",
            "format": ""
        }
    ];
    return ConnectedOrgConfigView;
}());
exports.ConnectedOrgConfigView = ConnectedOrgConfigView;
//# sourceMappingURL=ConnectedOrgConfigView.js.map

/***/ }),

/***/ 53390:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContainerPeer = void 0;
var ContainerPeer = (function () {
    function ContainerPeer() {
    }
    ContainerPeer.getAttributeTypeMap = function () {
        return ContainerPeer.attributeTypeMap;
    };
    ContainerPeer.discriminator = undefined;
    ContainerPeer.attributeTypeMap = [
        {
            "name": "containerId",
            "baseName": "containerId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        }
    ];
    return ContainerPeer;
}());
exports.ContainerPeer = ContainerPeer;
//# sourceMappingURL=ContainerPeer.js.map

/***/ }),

/***/ 84468:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=CpsBackupEventTypeViewForNdsGroupAlertableWithThreshold.js.map

/***/ }),

/***/ 7632:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CpsBackupThresholdAlertConfigViewForNdsGroup = void 0;
var CpsBackupThresholdAlertConfigViewForNdsGroup = (function () {
    function CpsBackupThresholdAlertConfigViewForNdsGroup() {
    }
    CpsBackupThresholdAlertConfigViewForNdsGroup.getAttributeTypeMap = function () {
        return CpsBackupThresholdAlertConfigViewForNdsGroup.attributeTypeMap;
    };
    CpsBackupThresholdAlertConfigViewForNdsGroup.discriminator = undefined;
    CpsBackupThresholdAlertConfigViewForNdsGroup.attributeTypeMap = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "CpsBackupEventTypeViewForNdsGroupAlertableWithThreshold",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "matchers",
            "baseName": "matchers",
            "type": "Array<MatcherView>",
            "format": ""
        },
        {
            "name": "notifications",
            "baseName": "notifications",
            "type": "Array<NotificationViewForNdsGroup>",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "GreaterThanTimeThresholdView",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return CpsBackupThresholdAlertConfigViewForNdsGroup;
}());
exports.CpsBackupThresholdAlertConfigViewForNdsGroup = CpsBackupThresholdAlertConfigViewForNdsGroup;
//# sourceMappingURL=CpsBackupThresholdAlertConfigViewForNdsGroup.js.map

/***/ }),

/***/ 54155:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateAWSEndpointRequest = void 0;
var CreateAWSEndpointRequest = (function () {
    function CreateAWSEndpointRequest() {
    }
    CreateAWSEndpointRequest.getAttributeTypeMap = function () {
        return CreateAWSEndpointRequest.attributeTypeMap;
    };
    CreateAWSEndpointRequest.discriminator = undefined;
    CreateAWSEndpointRequest.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        }
    ];
    return CreateAWSEndpointRequest;
}());
exports.CreateAWSEndpointRequest = CreateAWSEndpointRequest;
//# sourceMappingURL=CreateAWSEndpointRequest.js.map

/***/ }),

/***/ 71414:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateAWSEndpointRequestAllOf = void 0;
var CreateAWSEndpointRequestAllOf = (function () {
    function CreateAWSEndpointRequestAllOf() {
    }
    CreateAWSEndpointRequestAllOf.getAttributeTypeMap = function () {
        return CreateAWSEndpointRequestAllOf.attributeTypeMap;
    };
    CreateAWSEndpointRequestAllOf.discriminator = undefined;
    CreateAWSEndpointRequestAllOf.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        }
    ];
    return CreateAWSEndpointRequestAllOf;
}());
exports.CreateAWSEndpointRequestAllOf = CreateAWSEndpointRequestAllOf;
//# sourceMappingURL=CreateAWSEndpointRequestAllOf.js.map

/***/ }),

/***/ 9389:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateAzureEndpointRequest = void 0;
var CreateAzureEndpointRequest = (function () {
    function CreateAzureEndpointRequest() {
    }
    CreateAzureEndpointRequest.getAttributeTypeMap = function () {
        return CreateAzureEndpointRequest.attributeTypeMap;
    };
    CreateAzureEndpointRequest.discriminator = undefined;
    CreateAzureEndpointRequest.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateEndpointIPAddress",
            "baseName": "privateEndpointIPAddress",
            "type": "string",
            "format": ""
        }
    ];
    return CreateAzureEndpointRequest;
}());
exports.CreateAzureEndpointRequest = CreateAzureEndpointRequest;
//# sourceMappingURL=CreateAzureEndpointRequest.js.map

/***/ }),

/***/ 51538:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateAzureEndpointRequestAllOf = void 0;
var CreateAzureEndpointRequestAllOf = (function () {
    function CreateAzureEndpointRequestAllOf() {
    }
    CreateAzureEndpointRequestAllOf.getAttributeTypeMap = function () {
        return CreateAzureEndpointRequestAllOf.attributeTypeMap;
    };
    CreateAzureEndpointRequestAllOf.discriminator = undefined;
    CreateAzureEndpointRequestAllOf.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateEndpointIPAddress",
            "baseName": "privateEndpointIPAddress",
            "type": "string",
            "format": ""
        }
    ];
    return CreateAzureEndpointRequestAllOf;
}());
exports.CreateAzureEndpointRequestAllOf = CreateAzureEndpointRequestAllOf;
//# sourceMappingURL=CreateAzureEndpointRequestAllOf.js.map

/***/ }),

/***/ 81168:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateEndpointServiceRequest = void 0;
var CreateEndpointServiceRequest = (function () {
    function CreateEndpointServiceRequest() {
    }
    CreateEndpointServiceRequest.getAttributeTypeMap = function () {
        return CreateEndpointServiceRequest.attributeTypeMap;
    };
    CreateEndpointServiceRequest.discriminator = undefined;
    CreateEndpointServiceRequest.attributeTypeMap = [
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "region",
            "baseName": "region",
            "type": "string",
            "format": ""
        }
    ];
    return CreateEndpointServiceRequest;
}());
exports.CreateEndpointServiceRequest = CreateEndpointServiceRequest;
//# sourceMappingURL=CreateEndpointServiceRequest.js.map

/***/ }),

/***/ 16936:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateGCPEndpointGroupRequest = void 0;
var CreateGCPEndpointGroupRequest = (function () {
    function CreateGCPEndpointGroupRequest() {
    }
    CreateGCPEndpointGroupRequest.getAttributeTypeMap = function () {
        return CreateGCPEndpointGroupRequest.attributeTypeMap;
    };
    CreateGCPEndpointGroupRequest.discriminator = undefined;
    CreateGCPEndpointGroupRequest.attributeTypeMap = [
        {
            "name": "endpointGroupName",
            "baseName": "endpointGroupName",
            "type": "string",
            "format": ""
        },
        {
            "name": "endpoints",
            "baseName": "endpoints",
            "type": "Array<CreateGCPForwardingRuleRequest>",
            "format": ""
        },
        {
            "name": "gcpProjectId",
            "baseName": "gcpProjectId",
            "type": "string",
            "format": ""
        }
    ];
    return CreateGCPEndpointGroupRequest;
}());
exports.CreateGCPEndpointGroupRequest = CreateGCPEndpointGroupRequest;
//# sourceMappingURL=CreateGCPEndpointGroupRequest.js.map

/***/ }),

/***/ 15587:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateGCPEndpointGroupRequestAllOf = void 0;
var CreateGCPEndpointGroupRequestAllOf = (function () {
    function CreateGCPEndpointGroupRequestAllOf() {
    }
    CreateGCPEndpointGroupRequestAllOf.getAttributeTypeMap = function () {
        return CreateGCPEndpointGroupRequestAllOf.attributeTypeMap;
    };
    CreateGCPEndpointGroupRequestAllOf.discriminator = undefined;
    CreateGCPEndpointGroupRequestAllOf.attributeTypeMap = [
        {
            "name": "endpointGroupName",
            "baseName": "endpointGroupName",
            "type": "string",
            "format": ""
        },
        {
            "name": "endpoints",
            "baseName": "endpoints",
            "type": "Array<CreateGCPForwardingRuleRequest>",
            "format": ""
        },
        {
            "name": "gcpProjectId",
            "baseName": "gcpProjectId",
            "type": "string",
            "format": ""
        }
    ];
    return CreateGCPEndpointGroupRequestAllOf;
}());
exports.CreateGCPEndpointGroupRequestAllOf = CreateGCPEndpointGroupRequestAllOf;
//# sourceMappingURL=CreateGCPEndpointGroupRequestAllOf.js.map

/***/ }),

/***/ 89073:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateGCPForwardingRuleRequest = void 0;
var CreateGCPForwardingRuleRequest = (function () {
    function CreateGCPForwardingRuleRequest() {
    }
    CreateGCPForwardingRuleRequest.getAttributeTypeMap = function () {
        return CreateGCPForwardingRuleRequest.attributeTypeMap;
    };
    CreateGCPForwardingRuleRequest.discriminator = undefined;
    CreateGCPForwardingRuleRequest.attributeTypeMap = [
        {
            "name": "endpointName",
            "baseName": "endpointName",
            "type": "string",
            "format": ""
        },
        {
            "name": "ipAddress",
            "baseName": "ipAddress",
            "type": "string",
            "format": ""
        }
    ];
    return CreateGCPForwardingRuleRequest;
}());
exports.CreateGCPForwardingRuleRequest = CreateGCPForwardingRuleRequest;
//# sourceMappingURL=CreateGCPForwardingRuleRequest.js.map

/***/ }),

/***/ 60686:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateOrganizationRequest = void 0;
var CreateOrganizationRequest = (function () {
    function CreateOrganizationRequest() {
    }
    CreateOrganizationRequest.getAttributeTypeMap = function () {
        return CreateOrganizationRequest.attributeTypeMap;
    };
    CreateOrganizationRequest.discriminator = undefined;
    CreateOrganizationRequest.attributeTypeMap = [
        {
            "name": "apiKey",
            "baseName": "apiKey",
            "type": "ApiCreateApiKeyView",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgOwnerId",
            "baseName": "orgOwnerId",
            "type": "string",
            "format": ""
        }
    ];
    return CreateOrganizationRequest;
}());
exports.CreateOrganizationRequest = CreateOrganizationRequest;
//# sourceMappingURL=CreateOrganizationRequest.js.map

/***/ }),

/***/ 21649:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateOrganizationResponse = void 0;
var CreateOrganizationResponse = (function () {
    function CreateOrganizationResponse() {
    }
    CreateOrganizationResponse.getAttributeTypeMap = function () {
        return CreateOrganizationResponse.attributeTypeMap;
    };
    CreateOrganizationResponse.discriminator = undefined;
    CreateOrganizationResponse.attributeTypeMap = [
        {
            "name": "apiKey",
            "baseName": "apiKey",
            "type": "ApiApiUserView",
            "format": ""
        },
        {
            "name": "orgOwnerId",
            "baseName": "orgOwnerId",
            "type": "string",
            "format": ""
        },
        {
            "name": "organization",
            "baseName": "organization",
            "type": "ApiOrganizationView",
            "format": ""
        }
    ];
    return CreateOrganizationResponse;
}());
exports.CreateOrganizationResponse = CreateOrganizationResponse;
//# sourceMappingURL=CreateOrganizationResponse.js.map

/***/ }),

/***/ 65774:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreatePeeringConnection200Response = void 0;
var CreatePeeringConnection200Response = (function () {
    function CreatePeeringConnection200Response() {
    }
    CreatePeeringConnection200Response.getAttributeTypeMap = function () {
        return CreatePeeringConnection200Response.attributeTypeMap;
    };
    CreatePeeringConnection200Response.discriminator = undefined;
    CreatePeeringConnection200Response.attributeTypeMap = [
        {
            "name": "accepterRegionName",
            "baseName": "accepterRegionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "awsAccountId",
            "baseName": "awsAccountId",
            "type": "string",
            "format": ""
        },
        {
            "name": "connectionId",
            "baseName": "connectionId",
            "type": "string",
            "format": ""
        },
        {
            "name": "containerId",
            "baseName": "containerId",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorStateName",
            "baseName": "errorStateName",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "routeTableCidrBlock",
            "baseName": "routeTableCidrBlock",
            "type": "string",
            "format": ""
        },
        {
            "name": "statusName",
            "baseName": "statusName",
            "type": "string",
            "format": ""
        },
        {
            "name": "vpcId",
            "baseName": "vpcId",
            "type": "string",
            "format": ""
        },
        {
            "name": "azureDirectoryId",
            "baseName": "azureDirectoryId",
            "type": "string",
            "format": ""
        },
        {
            "name": "azureSubscriptionId",
            "baseName": "azureSubscriptionId",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorState",
            "baseName": "errorState",
            "type": "string",
            "format": ""
        },
        {
            "name": "resourceGroupName",
            "baseName": "resourceGroupName",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "vnetName",
            "baseName": "vnetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorMessage",
            "baseName": "errorMessage",
            "type": "string",
            "format": ""
        },
        {
            "name": "gcpProjectId",
            "baseName": "gcpProjectId",
            "type": "string",
            "format": ""
        },
        {
            "name": "networkName",
            "baseName": "networkName",
            "type": "string",
            "format": ""
        }
    ];
    return CreatePeeringConnection200Response;
}());
exports.CreatePeeringConnection200Response = CreatePeeringConnection200Response;
//# sourceMappingURL=CreatePeeringConnection200Response.js.map

/***/ }),

/***/ 28733:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreatePrivateEndpointRequest = void 0;
var CreatePrivateEndpointRequest = (function () {
    function CreatePrivateEndpointRequest() {
    }
    CreatePrivateEndpointRequest.getAttributeTypeMap = function () {
        return CreatePrivateEndpointRequest.attributeTypeMap;
    };
    CreatePrivateEndpointRequest.discriminator = undefined;
    CreatePrivateEndpointRequest.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateEndpointIPAddress",
            "baseName": "privateEndpointIPAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "endpointGroupName",
            "baseName": "endpointGroupName",
            "type": "string",
            "format": ""
        },
        {
            "name": "endpoints",
            "baseName": "endpoints",
            "type": "Array<CreateGCPForwardingRuleRequest>",
            "format": ""
        },
        {
            "name": "gcpProjectId",
            "baseName": "gcpProjectId",
            "type": "string",
            "format": ""
        }
    ];
    return CreatePrivateEndpointRequest;
}());
exports.CreatePrivateEndpointRequest = CreatePrivateEndpointRequest;
//# sourceMappingURL=CreatePrivateEndpointRequest.js.map

/***/ }),

/***/ 66335:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CriteriaView = void 0;
var CriteriaView = (function () {
    function CriteriaView() {
    }
    CriteriaView.getAttributeTypeMap = function () {
        return CriteriaView.attributeTypeMap;
    };
    CriteriaView.discriminator = "type";
    CriteriaView.attributeTypeMap = [
        {
            "name": "query",
            "baseName": "query",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "dateField",
            "baseName": "dateField",
            "type": "string",
            "format": ""
        },
        {
            "name": "dateFormat",
            "baseName": "dateFormat",
            "type": "string",
            "format": ""
        },
        {
            "name": "expireAfterDays",
            "baseName": "expireAfterDays",
            "type": "number",
            "format": "int32"
        }
    ];
    return CriteriaView;
}());
exports.CriteriaView = CriteriaView;
//# sourceMappingURL=CriteriaView.js.map

/***/ }),

/***/ 34198:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomCriteriaView = void 0;
var CustomCriteriaView = (function () {
    function CustomCriteriaView() {
    }
    CustomCriteriaView.getAttributeTypeMap = function () {
        return CustomCriteriaView.attributeTypeMap;
    };
    CustomCriteriaView.discriminator = undefined;
    CustomCriteriaView.attributeTypeMap = [
        {
            "name": "query",
            "baseName": "query",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return CustomCriteriaView;
}());
exports.CustomCriteriaView = CustomCriteriaView;
//# sourceMappingURL=CustomCriteriaView.js.map

/***/ }),

/***/ 43184:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomDBRole = void 0;
var CustomDBRole = (function () {
    function CustomDBRole() {
    }
    CustomDBRole.getAttributeTypeMap = function () {
        return CustomDBRole.attributeTypeMap;
    };
    CustomDBRole.discriminator = undefined;
    CustomDBRole.attributeTypeMap = [
        {
            "name": "actions",
            "baseName": "actions",
            "type": "Array<DBAction>",
            "format": ""
        },
        {
            "name": "inheritedRoles",
            "baseName": "inheritedRoles",
            "type": "Set<InheritedRole>",
            "format": ""
        },
        {
            "name": "roleName",
            "baseName": "roleName",
            "type": "string",
            "format": ""
        }
    ];
    return CustomDBRole;
}());
exports.CustomDBRole = CustomDBRole;
//# sourceMappingURL=CustomDBRole.js.map

/***/ }),

/***/ 15139:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomZoneMappings = void 0;
var CustomZoneMappings = (function () {
    function CustomZoneMappings() {
    }
    CustomZoneMappings.getAttributeTypeMap = function () {
        return CustomZoneMappings.attributeTypeMap;
    };
    CustomZoneMappings.discriminator = undefined;
    CustomZoneMappings.attributeTypeMap = [
        {
            "name": "customZoneMappings",
            "baseName": "customZoneMappings",
            "type": "Array<ZoneMapping>",
            "format": ""
        }
    ];
    return CustomZoneMappings;
}());
exports.CustomZoneMappings = CustomZoneMappings;
//# sourceMappingURL=CustomZoneMappings.js.map

/***/ }),

/***/ 55784:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomerX509 = void 0;
var CustomerX509 = (function () {
    function CustomerX509() {
    }
    CustomerX509.getAttributeTypeMap = function () {
        return CustomerX509.attributeTypeMap;
    };
    CustomerX509.discriminator = undefined;
    CustomerX509.attributeTypeMap = [
        {
            "name": "cas",
            "baseName": "cas",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        }
    ];
    return CustomerX509;
}());
exports.CustomerX509 = CustomerX509;
//# sourceMappingURL=CustomerX509.js.map

/***/ }),

/***/ 12241:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DBAction = void 0;
var DBAction = (function () {
    function DBAction() {
    }
    DBAction.getAttributeTypeMap = function () {
        return DBAction.attributeTypeMap;
    };
    DBAction.discriminator = undefined;
    DBAction.attributeTypeMap = [
        {
            "name": "action",
            "baseName": "action",
            "type": "string",
            "format": ""
        },
        {
            "name": "resources",
            "baseName": "resources",
            "type": "Array<DBResource>",
            "format": ""
        }
    ];
    return DBAction;
}());
exports.DBAction = DBAction;
//# sourceMappingURL=DBAction.js.map

/***/ }),

/***/ 55955:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DBResource = void 0;
var DBResource = (function () {
    function DBResource() {
    }
    DBResource.getAttributeTypeMap = function () {
        return DBResource.attributeTypeMap;
    };
    DBResource.discriminator = undefined;
    DBResource.attributeTypeMap = [
        {
            "name": "cluster",
            "baseName": "cluster",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "collection",
            "baseName": "collection",
            "type": "string",
            "format": ""
        },
        {
            "name": "db",
            "baseName": "db",
            "type": "string",
            "format": ""
        }
    ];
    return DBResource;
}());
exports.DBResource = DBResource;
//# sourceMappingURL=DBResource.js.map

/***/ }),

/***/ 98706:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DLSIngestionSink = void 0;
var DLSIngestionSink = (function () {
    function DLSIngestionSink() {
    }
    DLSIngestionSink.getAttributeTypeMap = function () {
        return DLSIngestionSink.attributeTypeMap;
    };
    DLSIngestionSink.discriminator = undefined;
    DLSIngestionSink.attributeTypeMap = [
        {
            "name": "metadataProvider",
            "baseName": "metadataProvider",
            "type": "string",
            "format": ""
        },
        {
            "name": "metadataRegion",
            "baseName": "metadataRegion",
            "type": "string",
            "format": ""
        },
        {
            "name": "partitionFields",
            "baseName": "partitionFields",
            "type": "Array<PartitionField>",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return DLSIngestionSink;
}());
exports.DLSIngestionSink = DLSIngestionSink;
//# sourceMappingURL=DLSIngestionSink.js.map

/***/ }),

/***/ 90644:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DailyScheduleView = void 0;
var DailyScheduleView = (function () {
    function DailyScheduleView() {
    }
    DailyScheduleView.getAttributeTypeMap = function () {
        return DailyScheduleView.attributeTypeMap;
    };
    DailyScheduleView.discriminator = undefined;
    DailyScheduleView.attributeTypeMap = [
        {
            "name": "endHour",
            "baseName": "endHour",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "endMinute",
            "baseName": "endMinute",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "startHour",
            "baseName": "startHour",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "startMinute",
            "baseName": "startMinute",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return DailyScheduleView;
}());
exports.DailyScheduleView = DailyScheduleView;
//# sourceMappingURL=DailyScheduleView.js.map

/***/ }),

/***/ 82589:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=DataExplorerAccessedEventTypeView.js.map

/***/ }),

/***/ 99441:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataExplorerAccessedEventView = void 0;
var DataExplorerAccessedEventView = (function () {
    function DataExplorerAccessedEventView() {
    }
    DataExplorerAccessedEventView.getAttributeTypeMap = function () {
        return DataExplorerAccessedEventView.attributeTypeMap;
    };
    DataExplorerAccessedEventView.discriminator = undefined;
    DataExplorerAccessedEventView.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "collection",
            "baseName": "collection",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "database",
            "baseName": "database",
            "type": "string",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "DataExplorerAccessedEventTypeView",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "opType",
            "baseName": "opType",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return DataExplorerAccessedEventView;
}());
exports.DataExplorerAccessedEventView = DataExplorerAccessedEventView;
//# sourceMappingURL=DataExplorerAccessedEventView.js.map

/***/ }),

/***/ 65290:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataFederationQueryLimit = void 0;
var DataFederationQueryLimit = (function () {
    function DataFederationQueryLimit() {
    }
    DataFederationQueryLimit.getAttributeTypeMap = function () {
        return DataFederationQueryLimit.attributeTypeMap;
    };
    DataFederationQueryLimit.discriminator = undefined;
    DataFederationQueryLimit.attributeTypeMap = [
        {
            "name": "currentUsage",
            "baseName": "currentUsage",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "defaultLimit",
            "baseName": "defaultLimit",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "lastModifiedDate",
            "baseName": "lastModifiedDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "maximumLimit",
            "baseName": "maximumLimit",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "overrunPolicy",
            "baseName": "overrunPolicy",
            "type": "string",
            "format": ""
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "number",
            "format": "int64"
        }
    ];
    return DataFederationQueryLimit;
}());
exports.DataFederationQueryLimit = DataFederationQueryLimit;
//# sourceMappingURL=DataFederationQueryLimit.js.map

/***/ }),

/***/ 76371:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataFederationTenantQueryLimit = void 0;
var DataFederationTenantQueryLimit = (function () {
    function DataFederationTenantQueryLimit() {
    }
    DataFederationTenantQueryLimit.getAttributeTypeMap = function () {
        return DataFederationTenantQueryLimit.attributeTypeMap;
    };
    DataFederationTenantQueryLimit.discriminator = undefined;
    DataFederationTenantQueryLimit.attributeTypeMap = [
        {
            "name": "currentUsage",
            "baseName": "currentUsage",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "defaultLimit",
            "baseName": "defaultLimit",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "lastModifiedDate",
            "baseName": "lastModifiedDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "maximumLimit",
            "baseName": "maximumLimit",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "overrunPolicy",
            "baseName": "overrunPolicy",
            "type": "string",
            "format": ""
        },
        {
            "name": "tenantName",
            "baseName": "tenantName",
            "type": "string",
            "format": ""
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "number",
            "format": "int64"
        }
    ];
    return DataFederationTenantQueryLimit;
}());
exports.DataFederationTenantQueryLimit = DataFederationTenantQueryLimit;
//# sourceMappingURL=DataFederationTenantQueryLimit.js.map

/***/ }),

/***/ 77619:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataLakeAWSCloudProviderConfig = void 0;
var DataLakeAWSCloudProviderConfig = (function () {
    function DataLakeAWSCloudProviderConfig() {
    }
    DataLakeAWSCloudProviderConfig.getAttributeTypeMap = function () {
        return DataLakeAWSCloudProviderConfig.attributeTypeMap;
    };
    DataLakeAWSCloudProviderConfig.discriminator = undefined;
    DataLakeAWSCloudProviderConfig.attributeTypeMap = [
        {
            "name": "externalId",
            "baseName": "externalId",
            "type": "string",
            "format": ""
        },
        {
            "name": "iamAssumedRoleARN",
            "baseName": "iamAssumedRoleARN",
            "type": "string",
            "format": ""
        },
        {
            "name": "iamUserARN",
            "baseName": "iamUserARN",
            "type": "string",
            "format": ""
        },
        {
            "name": "roleId",
            "baseName": "roleId",
            "type": "string",
            "format": ""
        },
        {
            "name": "testS3Bucket",
            "baseName": "testS3Bucket",
            "type": "string",
            "format": ""
        }
    ];
    return DataLakeAWSCloudProviderConfig;
}());
exports.DataLakeAWSCloudProviderConfig = DataLakeAWSCloudProviderConfig;
//# sourceMappingURL=DataLakeAWSCloudProviderConfig.js.map

/***/ }),

/***/ 6667:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataLakeAtlasStore = void 0;
var DataLakeAtlasStore = (function () {
    function DataLakeAtlasStore() {
    }
    DataLakeAtlasStore.getAttributeTypeMap = function () {
        return DataLakeAtlasStore.attributeTypeMap;
    };
    DataLakeAtlasStore.discriminator = undefined;
    DataLakeAtlasStore.attributeTypeMap = [
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "projectId",
            "baseName": "projectId",
            "type": "string",
            "format": ""
        },
        {
            "name": "readPreference",
            "baseName": "readPreference",
            "type": "DataLakeAtlasStoreReadPreference",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "provider",
            "baseName": "provider",
            "type": "string",
            "format": ""
        }
    ];
    return DataLakeAtlasStore;
}());
exports.DataLakeAtlasStore = DataLakeAtlasStore;
//# sourceMappingURL=DataLakeAtlasStore.js.map

/***/ }),

/***/ 37671:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataLakeAtlasStoreReadPreference = void 0;
var DataLakeAtlasStoreReadPreference = (function () {
    function DataLakeAtlasStoreReadPreference() {
    }
    DataLakeAtlasStoreReadPreference.getAttributeTypeMap = function () {
        return DataLakeAtlasStoreReadPreference.attributeTypeMap;
    };
    DataLakeAtlasStoreReadPreference.discriminator = undefined;
    DataLakeAtlasStoreReadPreference.attributeTypeMap = [
        {
            "name": "maxStalenessSeconds",
            "baseName": "maxStalenessSeconds",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "mode",
            "baseName": "mode",
            "type": "string",
            "format": ""
        },
        {
            "name": "tagSets",
            "baseName": "tagSets",
            "type": "Array<Array<DataLakeAtlasStoreReadPreferenceTag>>",
            "format": ""
        }
    ];
    return DataLakeAtlasStoreReadPreference;
}());
exports.DataLakeAtlasStoreReadPreference = DataLakeAtlasStoreReadPreference;
//# sourceMappingURL=DataLakeAtlasStoreReadPreference.js.map

/***/ }),

/***/ 29277:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataLakeAtlasStoreReadPreferenceTag = void 0;
var DataLakeAtlasStoreReadPreferenceTag = (function () {
    function DataLakeAtlasStoreReadPreferenceTag() {
    }
    DataLakeAtlasStoreReadPreferenceTag.getAttributeTypeMap = function () {
        return DataLakeAtlasStoreReadPreferenceTag.attributeTypeMap;
    };
    DataLakeAtlasStoreReadPreferenceTag.discriminator = undefined;
    DataLakeAtlasStoreReadPreferenceTag.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string",
            "format": ""
        }
    ];
    return DataLakeAtlasStoreReadPreferenceTag;
}());
exports.DataLakeAtlasStoreReadPreferenceTag = DataLakeAtlasStoreReadPreferenceTag;
//# sourceMappingURL=DataLakeAtlasStoreReadPreferenceTag.js.map

/***/ }),

/***/ 14557:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataLakeCloudProviderConfig = void 0;
var DataLakeCloudProviderConfig = (function () {
    function DataLakeCloudProviderConfig() {
    }
    DataLakeCloudProviderConfig.getAttributeTypeMap = function () {
        return DataLakeCloudProviderConfig.attributeTypeMap;
    };
    DataLakeCloudProviderConfig.discriminator = undefined;
    DataLakeCloudProviderConfig.attributeTypeMap = [
        {
            "name": "aws",
            "baseName": "aws",
            "type": "DataLakeAWSCloudProviderConfig",
            "format": ""
        }
    ];
    return DataLakeCloudProviderConfig;
}());
exports.DataLakeCloudProviderConfig = DataLakeCloudProviderConfig;
//# sourceMappingURL=DataLakeCloudProviderConfig.js.map

/***/ }),

/***/ 11148:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataLakeDataProcessRegion = void 0;
var DataLakeDataProcessRegion = (function () {
    function DataLakeDataProcessRegion() {
    }
    DataLakeDataProcessRegion.getAttributeTypeMap = function () {
        return DataLakeDataProcessRegion.attributeTypeMap;
    };
    DataLakeDataProcessRegion.discriminator = undefined;
    DataLakeDataProcessRegion.attributeTypeMap = [
        {
            "name": "cloudProvider",
            "baseName": "cloudProvider",
            "type": "string",
            "format": ""
        },
        {
            "name": "region",
            "baseName": "region",
            "type": "DataLakeRegion",
            "format": ""
        }
    ];
    return DataLakeDataProcessRegion;
}());
exports.DataLakeDataProcessRegion = DataLakeDataProcessRegion;
//# sourceMappingURL=DataLakeDataProcessRegion.js.map

/***/ }),

/***/ 24506:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataLakeDatabase = void 0;
var DataLakeDatabase = (function () {
    function DataLakeDatabase() {
    }
    DataLakeDatabase.getAttributeTypeMap = function () {
        return DataLakeDatabase.attributeTypeMap;
    };
    DataLakeDatabase.discriminator = undefined;
    DataLakeDatabase.attributeTypeMap = [
        {
            "name": "collections",
            "baseName": "collections",
            "type": "Array<DataLakeDatabaseCollection>",
            "format": ""
        },
        {
            "name": "maxWildcardCollections",
            "baseName": "maxWildcardCollections",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "views",
            "baseName": "views",
            "type": "Array<DataLakeView>",
            "format": ""
        }
    ];
    return DataLakeDatabase;
}());
exports.DataLakeDatabase = DataLakeDatabase;
//# sourceMappingURL=DataLakeDatabase.js.map

/***/ }),

/***/ 81131:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataLakeDatabaseCollection = void 0;
var DataLakeDatabaseCollection = (function () {
    function DataLakeDatabaseCollection() {
    }
    DataLakeDatabaseCollection.getAttributeTypeMap = function () {
        return DataLakeDatabaseCollection.attributeTypeMap;
    };
    DataLakeDatabaseCollection.discriminator = undefined;
    DataLakeDatabaseCollection.attributeTypeMap = [
        {
            "name": "dataSources",
            "baseName": "dataSources",
            "type": "Array<DataLakeDatabaseDataSource>",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        }
    ];
    return DataLakeDatabaseCollection;
}());
exports.DataLakeDatabaseCollection = DataLakeDatabaseCollection;
//# sourceMappingURL=DataLakeDatabaseCollection.js.map

/***/ }),

/***/ 24264:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataLakeDatabaseDataSource = void 0;
var DataLakeDatabaseDataSource = (function () {
    function DataLakeDatabaseDataSource() {
    }
    DataLakeDatabaseDataSource.getAttributeTypeMap = function () {
        return DataLakeDatabaseDataSource.attributeTypeMap;
    };
    DataLakeDatabaseDataSource.discriminator = undefined;
    DataLakeDatabaseDataSource.attributeTypeMap = [
        {
            "name": "allowInsecure",
            "baseName": "allowInsecure",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "collection",
            "baseName": "collection",
            "type": "string",
            "format": ""
        },
        {
            "name": "collectionRegex",
            "baseName": "collectionRegex",
            "type": "string",
            "format": ""
        },
        {
            "name": "database",
            "baseName": "database",
            "type": "string",
            "format": ""
        },
        {
            "name": "databaseRegex",
            "baseName": "databaseRegex",
            "type": "string",
            "format": ""
        },
        {
            "name": "defaultFormat",
            "baseName": "defaultFormat",
            "type": "string",
            "format": ""
        },
        {
            "name": "path",
            "baseName": "path",
            "type": "string",
            "format": ""
        },
        {
            "name": "provenanceFieldName",
            "baseName": "provenanceFieldName",
            "type": "string",
            "format": ""
        },
        {
            "name": "storeName",
            "baseName": "storeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "urls",
            "baseName": "urls",
            "type": "Array<string>",
            "format": ""
        }
    ];
    return DataLakeDatabaseDataSource;
}());
exports.DataLakeDatabaseDataSource = DataLakeDatabaseDataSource;
//# sourceMappingURL=DataLakeDatabaseDataSource.js.map

/***/ }),

/***/ 38273:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataLakeHTTPStore = void 0;
var DataLakeHTTPStore = (function () {
    function DataLakeHTTPStore() {
    }
    DataLakeHTTPStore.getAttributeTypeMap = function () {
        return DataLakeHTTPStore.attributeTypeMap;
    };
    DataLakeHTTPStore.discriminator = undefined;
    DataLakeHTTPStore.attributeTypeMap = [
        {
            "name": "allowInsecure",
            "baseName": "allowInsecure",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "defaultFormat",
            "baseName": "defaultFormat",
            "type": "string",
            "format": ""
        },
        {
            "name": "urls",
            "baseName": "urls",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "provider",
            "baseName": "provider",
            "type": "string",
            "format": ""
        }
    ];
    return DataLakeHTTPStore;
}());
exports.DataLakeHTTPStore = DataLakeHTTPStore;
//# sourceMappingURL=DataLakeHTTPStore.js.map

/***/ }),

/***/ 90868:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataLakeOnlineArchiveStore = void 0;
var DataLakeOnlineArchiveStore = (function () {
    function DataLakeOnlineArchiveStore() {
    }
    DataLakeOnlineArchiveStore.getAttributeTypeMap = function () {
        return DataLakeOnlineArchiveStore.attributeTypeMap;
    };
    DataLakeOnlineArchiveStore.discriminator = undefined;
    DataLakeOnlineArchiveStore.attributeTypeMap = [
        {
            "name": "clusterId",
            "baseName": "clusterId",
            "type": "string",
            "format": ""
        },
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "projectId",
            "baseName": "projectId",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "provider",
            "baseName": "provider",
            "type": "string",
            "format": ""
        }
    ];
    return DataLakeOnlineArchiveStore;
}());
exports.DataLakeOnlineArchiveStore = DataLakeOnlineArchiveStore;
//# sourceMappingURL=DataLakeOnlineArchiveStore.js.map

/***/ }),

/***/ 29363:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=DataLakeRegion.js.map

/***/ }),

/***/ 45985:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataLakeS3Store = void 0;
var DataLakeS3Store = (function () {
    function DataLakeS3Store() {
    }
    DataLakeS3Store.getAttributeTypeMap = function () {
        return DataLakeS3Store.attributeTypeMap;
    };
    DataLakeS3Store.discriminator = undefined;
    DataLakeS3Store.attributeTypeMap = [
        {
            "name": "additionalStorageClasses",
            "baseName": "additionalStorageClasses",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "bucket",
            "baseName": "bucket",
            "type": "string",
            "format": ""
        },
        {
            "name": "delimiter",
            "baseName": "delimiter",
            "type": "string",
            "format": ""
        },
        {
            "name": "includeTags",
            "baseName": "includeTags",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "prefix",
            "baseName": "prefix",
            "type": "string",
            "format": ""
        },
        {
            "name": "_public",
            "baseName": "public",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "region",
            "baseName": "region",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "provider",
            "baseName": "provider",
            "type": "string",
            "format": ""
        }
    ];
    return DataLakeS3Store;
}());
exports.DataLakeS3Store = DataLakeS3Store;
//# sourceMappingURL=DataLakeS3Store.js.map

/***/ }),

/***/ 75383:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataLakeStorage = void 0;
var DataLakeStorage = (function () {
    function DataLakeStorage() {
    }
    DataLakeStorage.getAttributeTypeMap = function () {
        return DataLakeStorage.attributeTypeMap;
    };
    DataLakeStorage.discriminator = undefined;
    DataLakeStorage.attributeTypeMap = [
        {
            "name": "databases",
            "baseName": "databases",
            "type": "Array<DataLakeDatabase>",
            "format": ""
        },
        {
            "name": "stores",
            "baseName": "stores",
            "type": "Array<DataLakeStore>",
            "format": ""
        }
    ];
    return DataLakeStorage;
}());
exports.DataLakeStorage = DataLakeStorage;
//# sourceMappingURL=DataLakeStorage.js.map

/***/ }),

/***/ 65384:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataLakeStore = void 0;
var DataLakeStore = (function () {
    function DataLakeStore() {
    }
    DataLakeStore.getAttributeTypeMap = function () {
        return DataLakeStore.attributeTypeMap;
    };
    DataLakeStore.discriminator = "provider";
    DataLakeStore.attributeTypeMap = [
        {
            "name": "additionalStorageClasses",
            "baseName": "additionalStorageClasses",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "bucket",
            "baseName": "bucket",
            "type": "string",
            "format": ""
        },
        {
            "name": "delimiter",
            "baseName": "delimiter",
            "type": "string",
            "format": ""
        },
        {
            "name": "includeTags",
            "baseName": "includeTags",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "prefix",
            "baseName": "prefix",
            "type": "string",
            "format": ""
        },
        {
            "name": "_public",
            "baseName": "public",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "region",
            "baseName": "region",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "provider",
            "baseName": "provider",
            "type": "string",
            "format": ""
        },
        {
            "name": "clusterId",
            "baseName": "clusterId",
            "type": "string",
            "format": ""
        },
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "projectId",
            "baseName": "projectId",
            "type": "string",
            "format": ""
        },
        {
            "name": "readPreference",
            "baseName": "readPreference",
            "type": "DataLakeAtlasStoreReadPreference",
            "format": ""
        },
        {
            "name": "allowInsecure",
            "baseName": "allowInsecure",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "defaultFormat",
            "baseName": "defaultFormat",
            "type": "string",
            "format": ""
        },
        {
            "name": "urls",
            "baseName": "urls",
            "type": "Array<string>",
            "format": ""
        }
    ];
    return DataLakeStore;
}());
exports.DataLakeStore = DataLakeStore;
//# sourceMappingURL=DataLakeStore.js.map

/***/ }),

/***/ 61963:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataLakeTenant = void 0;
var DataLakeTenant = (function () {
    function DataLakeTenant() {
    }
    DataLakeTenant.getAttributeTypeMap = function () {
        return DataLakeTenant.attributeTypeMap;
    };
    DataLakeTenant.discriminator = undefined;
    DataLakeTenant.attributeTypeMap = [
        {
            "name": "cloudProviderConfig",
            "baseName": "cloudProviderConfig",
            "type": "DataLakeCloudProviderConfig",
            "format": ""
        },
        {
            "name": "dataProcessRegion",
            "baseName": "dataProcessRegion",
            "type": "DataLakeDataProcessRegion",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "storage",
            "baseName": "storage",
            "type": "DataLakeStorage",
            "format": ""
        }
    ];
    return DataLakeTenant;
}());
exports.DataLakeTenant = DataLakeTenant;
//# sourceMappingURL=DataLakeTenant.js.map

/***/ }),

/***/ 45503:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataLakeView = void 0;
var DataLakeView = (function () {
    function DataLakeView() {
    }
    DataLakeView.getAttributeTypeMap = function () {
        return DataLakeView.attributeTypeMap;
    };
    DataLakeView.discriminator = undefined;
    DataLakeView.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "pipeline",
            "baseName": "pipeline",
            "type": "string",
            "format": ""
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "string",
            "format": ""
        }
    ];
    return DataLakeView;
}());
exports.DataLakeView = DataLakeView;
//# sourceMappingURL=DataLakeView.js.map

/***/ }),

/***/ 96750:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataMetricAlertView = void 0;
var DataMetricAlertView = (function () {
    function DataMetricAlertView() {
    }
    DataMetricAlertView.getAttributeTypeMap = function () {
        return DataMetricAlertView.attributeTypeMap;
    };
    DataMetricAlertView.discriminator = undefined;
    DataMetricAlertView.attributeTypeMap = [
        {
            "name": "acknowledgedUntil",
            "baseName": "acknowledgedUntil",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "acknowledgementComment",
            "baseName": "acknowledgementComment",
            "type": "string",
            "format": ""
        },
        {
            "name": "acknowledgingUsername",
            "baseName": "acknowledgingUsername",
            "type": "string",
            "format": "email"
        },
        {
            "name": "alertConfigId",
            "baseName": "alertConfigId",
            "type": "string",
            "format": ""
        },
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "currentValue",
            "baseName": "currentValue",
            "type": "DataMetricValueView",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "HostMetricEventTypeViewAlertable",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "hostnameAndPort",
            "baseName": "hostnameAndPort",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "lastNotified",
            "baseName": "lastNotified",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "resolved",
            "baseName": "resolved",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return DataMetricAlertView;
}());
exports.DataMetricAlertView = DataMetricAlertView;
//# sourceMappingURL=DataMetricAlertView.js.map

/***/ }),

/***/ 77559:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataMetricEventView = void 0;
var DataMetricEventView = (function () {
    function DataMetricEventView() {
    }
    DataMetricEventView.getAttributeTypeMap = function () {
        return DataMetricEventView.attributeTypeMap;
    };
    DataMetricEventView.discriminator = undefined;
    DataMetricEventView.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "currentValue",
            "baseName": "currentValue",
            "type": "DataMetricValueView",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "HostMetricEventTypeView",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "port",
            "baseName": "port",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "shardName",
            "baseName": "shardName",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return DataMetricEventView;
}());
exports.DataMetricEventView = DataMetricEventView;
//# sourceMappingURL=DataMetricEventView.js.map

/***/ }),

/***/ 53820:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataMetricThresholdView = void 0;
var DataMetricThresholdView = (function () {
    function DataMetricThresholdView() {
    }
    DataMetricThresholdView.getAttributeTypeMap = function () {
        return DataMetricThresholdView.attributeTypeMap;
    };
    DataMetricThresholdView.discriminator = undefined;
    DataMetricThresholdView.attributeTypeMap = [
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string",
            "format": ""
        },
        {
            "name": "mode",
            "baseName": "mode",
            "type": "string",
            "format": ""
        },
        {
            "name": "operator",
            "baseName": "operator",
            "type": "Operator",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "number",
            "format": "double"
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "DataMetricUnits",
            "format": ""
        }
    ];
    return DataMetricThresholdView;
}());
exports.DataMetricThresholdView = DataMetricThresholdView;
//# sourceMappingURL=DataMetricThresholdView.js.map

/***/ }),

/***/ 24634:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=DataMetricUnits.js.map

/***/ }),

/***/ 88589:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataMetricValueView = void 0;
var DataMetricValueView = (function () {
    function DataMetricValueView() {
    }
    DataMetricValueView.getAttributeTypeMap = function () {
        return DataMetricValueView.attributeTypeMap;
    };
    DataMetricValueView.discriminator = undefined;
    DataMetricValueView.attributeTypeMap = [
        {
            "name": "number",
            "baseName": "number",
            "type": "number",
            "format": "double"
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "DataMetricUnits",
            "format": ""
        }
    ];
    return DataMetricValueView;
}());
exports.DataMetricValueView = DataMetricValueView;
//# sourceMappingURL=DataMetricValueView.js.map

/***/ }),

/***/ 10010:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataProtectionSettings = void 0;
var DataProtectionSettings = (function () {
    function DataProtectionSettings() {
    }
    DataProtectionSettings.getAttributeTypeMap = function () {
        return DataProtectionSettings.attributeTypeMap;
    };
    DataProtectionSettings.discriminator = undefined;
    DataProtectionSettings.attributeTypeMap = [
        {
            "name": "copyProtectionEnabled",
            "baseName": "copyProtectionEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "encryptionAtRestEnabled",
            "baseName": "encryptionAtRestEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "onDemandPolicyItem",
            "baseName": "onDemandPolicyItem",
            "type": "ApiPolicyItemView",
            "format": ""
        },
        {
            "name": "pitEnabled",
            "baseName": "pitEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "projectId",
            "baseName": "projectId",
            "type": "string",
            "format": ""
        },
        {
            "name": "restoreWindowDays",
            "baseName": "restoreWindowDays",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "scheduledPolicyItems",
            "baseName": "scheduledPolicyItems",
            "type": "Array<ApiPolicyItemView>",
            "format": ""
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string",
            "format": ""
        },
        {
            "name": "updatedDate",
            "baseName": "updatedDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "updatedUser",
            "baseName": "updatedUser",
            "type": "string",
            "format": "email"
        }
    ];
    return DataProtectionSettings;
}());
exports.DataProtectionSettings = DataProtectionSettings;
//# sourceMappingURL=DataProtectionSettings.js.map

/***/ }),

/***/ 27171:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DatabaseUser = void 0;
var DatabaseUser = (function () {
    function DatabaseUser() {
    }
    DatabaseUser.getAttributeTypeMap = function () {
        return DatabaseUser.attributeTypeMap;
    };
    DatabaseUser.discriminator = undefined;
    DatabaseUser.attributeTypeMap = [
        {
            "name": "awsIAMType",
            "baseName": "awsIAMType",
            "type": "string",
            "format": ""
        },
        {
            "name": "databaseName",
            "baseName": "databaseName",
            "type": "string",
            "format": ""
        },
        {
            "name": "deleteAfterDate",
            "baseName": "deleteAfterDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "labels",
            "baseName": "labels",
            "type": "Array<NDSLabel>",
            "format": ""
        },
        {
            "name": "ldapAuthType",
            "baseName": "ldapAuthType",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string",
            "format": ""
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Array<Role>",
            "format": ""
        },
        {
            "name": "scopes",
            "baseName": "scopes",
            "type": "Array<UserScope>",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": ""
        },
        {
            "name": "x509Type",
            "baseName": "x509Type",
            "type": "string",
            "format": ""
        }
    ];
    return DatabaseUser;
}());
exports.DatabaseUser = DatabaseUser;
//# sourceMappingURL=DatabaseUser.js.map

/***/ }),

/***/ 91757:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DatadogNotificationView = void 0;
var DatadogNotificationView = (function () {
    function DatadogNotificationView() {
    }
    DatadogNotificationView.getAttributeTypeMap = function () {
        return DatadogNotificationView.attributeTypeMap;
    };
    DatadogNotificationView.discriminator = undefined;
    DatadogNotificationView.attributeTypeMap = [
        {
            "name": "datadogApiKey",
            "baseName": "datadogApiKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "datadogRegion",
            "baseName": "datadogRegion",
            "type": "string",
            "format": ""
        },
        {
            "name": "delayMin",
            "baseName": "delayMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "intervalMin",
            "baseName": "intervalMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        }
    ];
    return DatadogNotificationView;
}());
exports.DatadogNotificationView = DatadogNotificationView;
//# sourceMappingURL=DatadogNotificationView.js.map

/***/ }),

/***/ 6227:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DateCriteriaView = void 0;
var DateCriteriaView = (function () {
    function DateCriteriaView() {
    }
    DateCriteriaView.getAttributeTypeMap = function () {
        return DateCriteriaView.attributeTypeMap;
    };
    DateCriteriaView.discriminator = undefined;
    DateCriteriaView.attributeTypeMap = [
        {
            "name": "dateField",
            "baseName": "dateField",
            "type": "string",
            "format": ""
        },
        {
            "name": "dateFormat",
            "baseName": "dateFormat",
            "type": "string",
            "format": ""
        },
        {
            "name": "expireAfterDays",
            "baseName": "expireAfterDays",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return DateCriteriaView;
}());
exports.DateCriteriaView = DateCriteriaView;
//# sourceMappingURL=DateCriteriaView.js.map

/***/ }),

/***/ 83767:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DedicatedHardwareSpec = void 0;
var DedicatedHardwareSpec = (function () {
    function DedicatedHardwareSpec() {
    }
    DedicatedHardwareSpec.getAttributeTypeMap = function () {
        return DedicatedHardwareSpec.attributeTypeMap;
    };
    DedicatedHardwareSpec.discriminator = undefined;
    DedicatedHardwareSpec.attributeTypeMap = [
        {
            "name": "nodeCount",
            "baseName": "nodeCount",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "diskIOPS",
            "baseName": "diskIOPS",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "ebsVolumeType",
            "baseName": "ebsVolumeType",
            "type": "string",
            "format": ""
        },
        {
            "name": "instanceSize",
            "baseName": "instanceSize",
            "type": "string",
            "format": ""
        }
    ];
    return DedicatedHardwareSpec;
}());
exports.DedicatedHardwareSpec = DedicatedHardwareSpec;
//# sourceMappingURL=DedicatedHardwareSpec.js.map

/***/ }),

/***/ 25223:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultAlertConfigViewForNdsGroup = void 0;
var DefaultAlertConfigViewForNdsGroup = (function () {
    function DefaultAlertConfigViewForNdsGroup() {
    }
    DefaultAlertConfigViewForNdsGroup.getAttributeTypeMap = function () {
        return DefaultAlertConfigViewForNdsGroup.attributeTypeMap;
    };
    DefaultAlertConfigViewForNdsGroup.discriminator = undefined;
    DefaultAlertConfigViewForNdsGroup.attributeTypeMap = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "matchers",
            "baseName": "matchers",
            "type": "Array<MatcherView>",
            "format": ""
        },
        {
            "name": "notifications",
            "baseName": "notifications",
            "type": "Array<NotificationViewForNdsGroup>",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return DefaultAlertConfigViewForNdsGroup;
}());
exports.DefaultAlertConfigViewForNdsGroup = DefaultAlertConfigViewForNdsGroup;
//# sourceMappingURL=DefaultAlertConfigViewForNdsGroup.js.map

/***/ }),

/***/ 55464:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultAlertViewForNdsGroup = void 0;
var DefaultAlertViewForNdsGroup = (function () {
    function DefaultAlertViewForNdsGroup() {
    }
    DefaultAlertViewForNdsGroup.getAttributeTypeMap = function () {
        return DefaultAlertViewForNdsGroup.attributeTypeMap;
    };
    DefaultAlertViewForNdsGroup.discriminator = undefined;
    DefaultAlertViewForNdsGroup.attributeTypeMap = [
        {
            "name": "acknowledgedUntil",
            "baseName": "acknowledgedUntil",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "acknowledgementComment",
            "baseName": "acknowledgementComment",
            "type": "string",
            "format": ""
        },
        {
            "name": "acknowledgingUsername",
            "baseName": "acknowledgingUsername",
            "type": "string",
            "format": "email"
        },
        {
            "name": "alertConfigId",
            "baseName": "alertConfigId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "lastNotified",
            "baseName": "lastNotified",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "resolved",
            "baseName": "resolved",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return DefaultAlertViewForNdsGroup;
}());
exports.DefaultAlertViewForNdsGroup = DefaultAlertViewForNdsGroup;
//# sourceMappingURL=DefaultAlertViewForNdsGroup.js.map

/***/ }),

/***/ 22509:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultEventViewForNdsGroup = void 0;
var DefaultEventViewForNdsGroup = (function () {
    function DefaultEventViewForNdsGroup() {
    }
    DefaultEventViewForNdsGroup.getAttributeTypeMap = function () {
        return DefaultEventViewForNdsGroup.attributeTypeMap;
    };
    DefaultEventViewForNdsGroup.discriminator = undefined;
    DefaultEventViewForNdsGroup.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return DefaultEventViewForNdsGroup;
}());
exports.DefaultEventViewForNdsGroup = DefaultEventViewForNdsGroup;
//# sourceMappingURL=DefaultEventViewForNdsGroup.js.map

/***/ }),

/***/ 55830:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultEventViewForOrg = void 0;
var DefaultEventViewForOrg = (function () {
    function DefaultEventViewForOrg() {
    }
    DefaultEventViewForOrg.getAttributeTypeMap = function () {
        return DefaultEventViewForOrg.attributeTypeMap;
    };
    DefaultEventViewForOrg.discriminator = undefined;
    DefaultEventViewForOrg.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return DefaultEventViewForOrg;
}());
exports.DefaultEventViewForOrg = DefaultEventViewForOrg;
//# sourceMappingURL=DefaultEventViewForOrg.js.map

/***/ }),

/***/ 26449:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultScheduleView = void 0;
var DefaultScheduleView = (function () {
    function DefaultScheduleView() {
    }
    DefaultScheduleView.getAttributeTypeMap = function () {
        return DefaultScheduleView.attributeTypeMap;
    };
    DefaultScheduleView.discriminator = undefined;
    DefaultScheduleView.attributeTypeMap = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return DefaultScheduleView;
}());
exports.DefaultScheduleView = DefaultScheduleView;
//# sourceMappingURL=DefaultScheduleView.js.map

/***/ }),

/***/ 33523:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Destination = void 0;
var Destination = (function () {
    function Destination() {
    }
    Destination.getAttributeTypeMap = function () {
        return Destination.attributeTypeMap;
    };
    Destination.discriminator = undefined;
    Destination.attributeTypeMap = [
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "hostnameSchemaType",
            "baseName": "hostnameSchemaType",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateLinkId",
            "baseName": "privateLinkId",
            "type": "string",
            "format": ""
        }
    ];
    return Destination;
}());
exports.Destination = Destination;
//# sourceMappingURL=Destination.js.map

/***/ }),

/***/ 40499:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiskBackupBaseRestoreMember = void 0;
var DiskBackupBaseRestoreMember = (function () {
    function DiskBackupBaseRestoreMember() {
    }
    DiskBackupBaseRestoreMember.getAttributeTypeMap = function () {
        return DiskBackupBaseRestoreMember.attributeTypeMap;
    };
    DiskBackupBaseRestoreMember.discriminator = undefined;
    DiskBackupBaseRestoreMember.attributeTypeMap = [
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        }
    ];
    return DiskBackupBaseRestoreMember;
}());
exports.DiskBackupBaseRestoreMember = DiskBackupBaseRestoreMember;
//# sourceMappingURL=DiskBackupBaseRestoreMember.js.map

/***/ }),

/***/ 78548:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiskBackupCopySetting = void 0;
var DiskBackupCopySetting = (function () {
    function DiskBackupCopySetting() {
    }
    DiskBackupCopySetting.getAttributeTypeMap = function () {
        return DiskBackupCopySetting.attributeTypeMap;
    };
    DiskBackupCopySetting.discriminator = undefined;
    DiskBackupCopySetting.attributeTypeMap = [
        {
            "name": "cloudProvider",
            "baseName": "cloudProvider",
            "type": "string",
            "format": ""
        },
        {
            "name": "frequencies",
            "baseName": "frequencies",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "regionName",
            "baseName": "regionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "replicationSpecId",
            "baseName": "replicationSpecId",
            "type": "string",
            "format": ""
        },
        {
            "name": "shouldCopyOplogs",
            "baseName": "shouldCopyOplogs",
            "type": "boolean",
            "format": ""
        }
    ];
    return DiskBackupCopySetting;
}());
exports.DiskBackupCopySetting = DiskBackupCopySetting;
//# sourceMappingURL=DiskBackupCopySetting.js.map

/***/ }),

/***/ 90031:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiskBackupExportJob = void 0;
var DiskBackupExportJob = (function () {
    function DiskBackupExportJob() {
    }
    DiskBackupExportJob.getAttributeTypeMap = function () {
        return DiskBackupExportJob.attributeTypeMap;
    };
    DiskBackupExportJob.discriminator = undefined;
    DiskBackupExportJob.attributeTypeMap = [
        {
            "name": "components",
            "baseName": "components",
            "type": "Array<DiskBackupBaseRestoreMember>",
            "format": ""
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "customData",
            "baseName": "customData",
            "type": "Array<Label>",
            "format": ""
        },
        {
            "name": "deliveryUrl",
            "baseName": "deliveryUrl",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "exportBucketId",
            "baseName": "exportBucketId",
            "type": "string",
            "format": ""
        },
        {
            "name": "exportStatus",
            "baseName": "exportStatus",
            "type": "ApiExportStatusView",
            "format": ""
        },
        {
            "name": "finishedAt",
            "baseName": "finishedAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "prefix",
            "baseName": "prefix",
            "type": "string",
            "format": ""
        },
        {
            "name": "snapshotId",
            "baseName": "snapshotId",
            "type": "string",
            "format": ""
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string",
            "format": ""
        }
    ];
    return DiskBackupExportJob;
}());
exports.DiskBackupExportJob = DiskBackupExportJob;
//# sourceMappingURL=DiskBackupExportJob.js.map

/***/ }),

/***/ 90187:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiskBackupExportJobRequest = void 0;
var DiskBackupExportJobRequest = (function () {
    function DiskBackupExportJobRequest() {
    }
    DiskBackupExportJobRequest.getAttributeTypeMap = function () {
        return DiskBackupExportJobRequest.attributeTypeMap;
    };
    DiskBackupExportJobRequest.discriminator = undefined;
    DiskBackupExportJobRequest.attributeTypeMap = [
        {
            "name": "customData",
            "baseName": "customData",
            "type": "Array<Label>",
            "format": ""
        },
        {
            "name": "exportBucketId",
            "baseName": "exportBucketId",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "snapshotId",
            "baseName": "snapshotId",
            "type": "string",
            "format": ""
        }
    ];
    return DiskBackupExportJobRequest;
}());
exports.DiskBackupExportJobRequest = DiskBackupExportJobRequest;
//# sourceMappingURL=DiskBackupExportJobRequest.js.map

/***/ }),

/***/ 17250:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiskBackupOnDemandSnapshotRequest = void 0;
var DiskBackupOnDemandSnapshotRequest = (function () {
    function DiskBackupOnDemandSnapshotRequest() {
    }
    DiskBackupOnDemandSnapshotRequest.getAttributeTypeMap = function () {
        return DiskBackupOnDemandSnapshotRequest.attributeTypeMap;
    };
    DiskBackupOnDemandSnapshotRequest.discriminator = undefined;
    DiskBackupOnDemandSnapshotRequest.attributeTypeMap = [
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "retentionInDays",
            "baseName": "retentionInDays",
            "type": "number",
            "format": "int32"
        }
    ];
    return DiskBackupOnDemandSnapshotRequest;
}());
exports.DiskBackupOnDemandSnapshotRequest = DiskBackupOnDemandSnapshotRequest;
//# sourceMappingURL=DiskBackupOnDemandSnapshotRequest.js.map

/***/ }),

/***/ 25064:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiskBackupReplicaSet = void 0;
var DiskBackupReplicaSet = (function () {
    function DiskBackupReplicaSet() {
    }
    DiskBackupReplicaSet.getAttributeTypeMap = function () {
        return DiskBackupReplicaSet.attributeTypeMap;
    };
    DiskBackupReplicaSet.discriminator = undefined;
    DiskBackupReplicaSet.attributeTypeMap = [
        {
            "name": "cloudProvider",
            "baseName": "cloudProvider",
            "type": "string",
            "format": ""
        },
        {
            "name": "copyRegions",
            "baseName": "copyRegions",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "expiresAt",
            "baseName": "expiresAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "frequencyType",
            "baseName": "frequencyType",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "masterKeyUUID",
            "baseName": "masterKeyUUID",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "mongodVersion",
            "baseName": "mongodVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "policyItems",
            "baseName": "policyItems",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "snapshotType",
            "baseName": "snapshotType",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "storageSizeBytes",
            "baseName": "storageSizeBytes",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return DiskBackupReplicaSet;
}());
exports.DiskBackupReplicaSet = DiskBackupReplicaSet;
//# sourceMappingURL=DiskBackupReplicaSet.js.map

/***/ }),

/***/ 40869:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiskBackupRestoreJob = void 0;
var DiskBackupRestoreJob = (function () {
    function DiskBackupRestoreJob() {
    }
    DiskBackupRestoreJob.getAttributeTypeMap = function () {
        return DiskBackupRestoreJob.attributeTypeMap;
    };
    DiskBackupRestoreJob.discriminator = undefined;
    DiskBackupRestoreJob.attributeTypeMap = [
        {
            "name": "cancelled",
            "baseName": "cancelled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "components",
            "baseName": "components",
            "type": "Array<DiskBackupBaseRestoreMember>",
            "format": ""
        },
        {
            "name": "deliveryType",
            "baseName": "deliveryType",
            "type": "string",
            "format": ""
        },
        {
            "name": "deliveryUrl",
            "baseName": "deliveryUrl",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "desiredTimestamp",
            "baseName": "desiredTimestamp",
            "type": "ApiBSONTimestampView",
            "format": ""
        },
        {
            "name": "expired",
            "baseName": "expired",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "expiresAt",
            "baseName": "expiresAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "failed",
            "baseName": "failed",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "finishedAt",
            "baseName": "finishedAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "oplogInc",
            "baseName": "oplogInc",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "oplogTs",
            "baseName": "oplogTs",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "pointInTimeUTCSeconds",
            "baseName": "pointInTimeUTCSeconds",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "snapshotId",
            "baseName": "snapshotId",
            "type": "string",
            "format": ""
        },
        {
            "name": "targetClusterName",
            "baseName": "targetClusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "targetGroupId",
            "baseName": "targetGroupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return DiskBackupRestoreJob;
}());
exports.DiskBackupRestoreJob = DiskBackupRestoreJob;
//# sourceMappingURL=DiskBackupRestoreJob.js.map

/***/ }),

/***/ 71856:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiskBackupShardedClusterSnapshot = void 0;
var DiskBackupShardedClusterSnapshot = (function () {
    function DiskBackupShardedClusterSnapshot() {
    }
    DiskBackupShardedClusterSnapshot.getAttributeTypeMap = function () {
        return DiskBackupShardedClusterSnapshot.attributeTypeMap;
    };
    DiskBackupShardedClusterSnapshot.discriminator = undefined;
    DiskBackupShardedClusterSnapshot.attributeTypeMap = [
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "expiresAt",
            "baseName": "expiresAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "frequencyType",
            "baseName": "frequencyType",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "masterKeyUUID",
            "baseName": "masterKeyUUID",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "members",
            "baseName": "members",
            "type": "Array<DiskBackupShardedClusterSnapshotMember>",
            "format": ""
        },
        {
            "name": "mongodVersion",
            "baseName": "mongodVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "policyItems",
            "baseName": "policyItems",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "snapshotIds",
            "baseName": "snapshotIds",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "snapshotType",
            "baseName": "snapshotType",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "storageSizeBytes",
            "baseName": "storageSizeBytes",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return DiskBackupShardedClusterSnapshot;
}());
exports.DiskBackupShardedClusterSnapshot = DiskBackupShardedClusterSnapshot;
//# sourceMappingURL=DiskBackupShardedClusterSnapshot.js.map

/***/ }),

/***/ 79870:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiskBackupShardedClusterSnapshotMember = void 0;
var DiskBackupShardedClusterSnapshotMember = (function () {
    function DiskBackupShardedClusterSnapshotMember() {
    }
    DiskBackupShardedClusterSnapshotMember.getAttributeTypeMap = function () {
        return DiskBackupShardedClusterSnapshotMember.attributeTypeMap;
    };
    DiskBackupShardedClusterSnapshotMember.discriminator = undefined;
    DiskBackupShardedClusterSnapshotMember.attributeTypeMap = [
        {
            "name": "cloudProvider",
            "baseName": "cloudProvider",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        }
    ];
    return DiskBackupShardedClusterSnapshotMember;
}());
exports.DiskBackupShardedClusterSnapshotMember = DiskBackupShardedClusterSnapshotMember;
//# sourceMappingURL=DiskBackupShardedClusterSnapshotMember.js.map

/***/ }),

/***/ 2346:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiskBackupSnapshot = void 0;
var DiskBackupSnapshot = (function () {
    function DiskBackupSnapshot() {
    }
    DiskBackupSnapshot.getAttributeTypeMap = function () {
        return DiskBackupSnapshot.attributeTypeMap;
    };
    DiskBackupSnapshot.discriminator = "type";
    DiskBackupSnapshot.attributeTypeMap = [
        {
            "name": "cloudProvider",
            "baseName": "cloudProvider",
            "type": "string",
            "format": ""
        },
        {
            "name": "copyRegions",
            "baseName": "copyRegions",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "expiresAt",
            "baseName": "expiresAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "frequencyType",
            "baseName": "frequencyType",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "masterKeyUUID",
            "baseName": "masterKeyUUID",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "mongodVersion",
            "baseName": "mongodVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "policyItems",
            "baseName": "policyItems",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "snapshotType",
            "baseName": "snapshotType",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "storageSizeBytes",
            "baseName": "storageSizeBytes",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "members",
            "baseName": "members",
            "type": "Array<DiskBackupShardedClusterSnapshotMember>",
            "format": ""
        },
        {
            "name": "snapshotIds",
            "baseName": "snapshotIds",
            "type": "Array<string>",
            "format": ""
        }
    ];
    return DiskBackupSnapshot;
}());
exports.DiskBackupSnapshot = DiskBackupSnapshot;
//# sourceMappingURL=DiskBackupSnapshot.js.map

/***/ }),

/***/ 14877:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiskBackupSnapshotAWSExportBucket = void 0;
var DiskBackupSnapshotAWSExportBucket = (function () {
    function DiskBackupSnapshotAWSExportBucket() {
    }
    DiskBackupSnapshotAWSExportBucket.getAttributeTypeMap = function () {
        return DiskBackupSnapshotAWSExportBucket.attributeTypeMap;
    };
    DiskBackupSnapshotAWSExportBucket.discriminator = undefined;
    DiskBackupSnapshotAWSExportBucket.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "bucketName",
            "baseName": "bucketName",
            "type": "string",
            "format": ""
        },
        {
            "name": "cloudProvider",
            "baseName": "cloudProvider",
            "type": "string",
            "format": ""
        },
        {
            "name": "iamRoleId",
            "baseName": "iamRoleId",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        }
    ];
    return DiskBackupSnapshotAWSExportBucket;
}());
exports.DiskBackupSnapshotAWSExportBucket = DiskBackupSnapshotAWSExportBucket;
//# sourceMappingURL=DiskBackupSnapshotAWSExportBucket.js.map

/***/ }),

/***/ 75642:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiskBackupSnapshotSchedule = void 0;
var DiskBackupSnapshotSchedule = (function () {
    function DiskBackupSnapshotSchedule() {
    }
    DiskBackupSnapshotSchedule.getAttributeTypeMap = function () {
        return DiskBackupSnapshotSchedule.attributeTypeMap;
    };
    DiskBackupSnapshotSchedule.discriminator = undefined;
    DiskBackupSnapshotSchedule.attributeTypeMap = [
        {
            "name": "autoExportEnabled",
            "baseName": "autoExportEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "clusterId",
            "baseName": "clusterId",
            "type": "string",
            "format": ""
        },
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "copySettings",
            "baseName": "copySettings",
            "type": "Array<DiskBackupCopySetting>",
            "format": ""
        },
        {
            "name": "deleteCopiedBackups",
            "baseName": "deleteCopiedBackups",
            "type": "Array<ApiDeleteCopiedBackupsView>",
            "format": ""
        },
        {
            "name": "_export",
            "baseName": "export",
            "type": "AutoExportPolicyView",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "nextSnapshot",
            "baseName": "nextSnapshot",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "policies",
            "baseName": "policies",
            "type": "Array<ApiPolicyView>",
            "format": ""
        },
        {
            "name": "referenceHourOfDay",
            "baseName": "referenceHourOfDay",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "referenceMinuteOfHour",
            "baseName": "referenceMinuteOfHour",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "restoreWindowDays",
            "baseName": "restoreWindowDays",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "updateSnapshots",
            "baseName": "updateSnapshots",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "useOrgAndGroupNamesInExportPrefix",
            "baseName": "useOrgAndGroupNamesInExportPrefix",
            "type": "boolean",
            "format": ""
        }
    ];
    return DiskBackupSnapshotSchedule;
}());
exports.DiskBackupSnapshotSchedule = DiskBackupSnapshotSchedule;
//# sourceMappingURL=DiskBackupSnapshotSchedule.js.map

/***/ }),

/***/ 26653:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiskGBAutoScaling = void 0;
var DiskGBAutoScaling = (function () {
    function DiskGBAutoScaling() {
    }
    DiskGBAutoScaling.getAttributeTypeMap = function () {
        return DiskGBAutoScaling.attributeTypeMap;
    };
    DiskGBAutoScaling.discriminator = undefined;
    DiskGBAutoScaling.attributeTypeMap = [
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        }
    ];
    return DiskGBAutoScaling;
}());
exports.DiskGBAutoScaling = DiskGBAutoScaling;
//# sourceMappingURL=DiskGBAutoScaling.js.map

/***/ }),

/***/ 97120:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EmailNotificationView = void 0;
var EmailNotificationView = (function () {
    function EmailNotificationView() {
    }
    EmailNotificationView.getAttributeTypeMap = function () {
        return EmailNotificationView.attributeTypeMap;
    };
    EmailNotificationView.discriminator = undefined;
    EmailNotificationView.attributeTypeMap = [
        {
            "name": "delayMin",
            "baseName": "delayMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "emailAddress",
            "baseName": "emailAddress",
            "type": "string",
            "format": "email"
        },
        {
            "name": "intervalMin",
            "baseName": "intervalMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        }
    ];
    return EmailNotificationView;
}());
exports.EmailNotificationView = EmailNotificationView;
//# sourceMappingURL=EmailNotificationView.js.map

/***/ }),

/***/ 4728:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EncryptionAtRest = void 0;
var EncryptionAtRest = (function () {
    function EncryptionAtRest() {
    }
    EncryptionAtRest.getAttributeTypeMap = function () {
        return EncryptionAtRest.attributeTypeMap;
    };
    EncryptionAtRest.discriminator = undefined;
    EncryptionAtRest.attributeTypeMap = [
        {
            "name": "awsKms",
            "baseName": "awsKms",
            "type": "AWSKMS",
            "format": ""
        },
        {
            "name": "azureKeyVault",
            "baseName": "azureKeyVault",
            "type": "AzureKeyVault",
            "format": ""
        },
        {
            "name": "googleCloudKms",
            "baseName": "googleCloudKms",
            "type": "GoogleCloudKMS",
            "format": ""
        }
    ];
    return EncryptionAtRest;
}());
exports.EncryptionAtRest = EncryptionAtRest;
//# sourceMappingURL=EncryptionAtRest.js.map

/***/ }),

/***/ 25383:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EncryptionKeyAlertConfigViewForNdsGroup = void 0;
var EncryptionKeyAlertConfigViewForNdsGroup = (function () {
    function EncryptionKeyAlertConfigViewForNdsGroup() {
    }
    EncryptionKeyAlertConfigViewForNdsGroup.getAttributeTypeMap = function () {
        return EncryptionKeyAlertConfigViewForNdsGroup.attributeTypeMap;
    };
    EncryptionKeyAlertConfigViewForNdsGroup.discriminator = undefined;
    EncryptionKeyAlertConfigViewForNdsGroup.attributeTypeMap = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "EncryptionKeyEventTypeViewAlertable",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "matchers",
            "baseName": "matchers",
            "type": "Array<MatcherView>",
            "format": ""
        },
        {
            "name": "notifications",
            "baseName": "notifications",
            "type": "Array<NotificationViewForNdsGroup>",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "GreaterThanDaysThresholdView",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return EncryptionKeyAlertConfigViewForNdsGroup;
}());
exports.EncryptionKeyAlertConfigViewForNdsGroup = EncryptionKeyAlertConfigViewForNdsGroup;
//# sourceMappingURL=EncryptionKeyAlertConfigViewForNdsGroup.js.map

/***/ }),

/***/ 49682:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=EncryptionKeyEventTypeViewAlertable.js.map

/***/ }),

/***/ 44134:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Endpoint = void 0;
var Endpoint = (function () {
    function Endpoint() {
    }
    Endpoint.getAttributeTypeMap = function () {
        return Endpoint.attributeTypeMap;
    };
    Endpoint.discriminator = undefined;
    Endpoint.attributeTypeMap = [
        {
            "name": "connectionStatus",
            "baseName": "connectionStatus",
            "type": "string",
            "format": ""
        },
        {
            "name": "deleteRequested",
            "baseName": "deleteRequested",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "errorMessage",
            "baseName": "errorMessage",
            "type": "string",
            "format": ""
        },
        {
            "name": "interfaceEndpointId",
            "baseName": "interfaceEndpointId",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateEndpointConnectionName",
            "baseName": "privateEndpointConnectionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateEndpointIPAddress",
            "baseName": "privateEndpointIPAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateEndpointResourceId",
            "baseName": "privateEndpointResourceId",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "endpointGroupName",
            "baseName": "endpointGroupName",
            "type": "string",
            "format": ""
        },
        {
            "name": "endpoints",
            "baseName": "endpoints",
            "type": "Array<GCPConsumerForwardingRule>",
            "format": ""
        }
    ];
    return Endpoint;
}());
exports.Endpoint = Endpoint;
//# sourceMappingURL=Endpoint.js.map

/***/ }),

/***/ 87684:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EndpointService = void 0;
var EndpointService = (function () {
    function EndpointService() {
    }
    EndpointService.getAttributeTypeMap = function () {
        return EndpointService.attributeTypeMap;
    };
    EndpointService.discriminator = undefined;
    EndpointService.attributeTypeMap = [
        {
            "name": "endpointServiceName",
            "baseName": "endpointServiceName",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorMessage",
            "baseName": "errorMessage",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "interfaceEndpoints",
            "baseName": "interfaceEndpoints",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "regionName",
            "baseName": "regionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateEndpoints",
            "baseName": "privateEndpoints",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "privateLinkServiceName",
            "baseName": "privateLinkServiceName",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateLinkServiceResourceId",
            "baseName": "privateLinkServiceResourceId",
            "type": "string",
            "format": ""
        },
        {
            "name": "endpointGroupNames",
            "baseName": "endpointGroupNames",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "serviceAttachmentNames",
            "baseName": "serviceAttachmentNames",
            "type": "Array<string>",
            "format": ""
        }
    ];
    return EndpointService;
}());
exports.EndpointService = EndpointService;
//# sourceMappingURL=EndpointService.js.map

/***/ }),

/***/ 14994:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=EventTypeForNdsGroup.js.map

/***/ }),

/***/ 93002:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=EventTypeForOrg.js.map

/***/ }),

/***/ 89398:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EventViewForNdsGroup = void 0;
var EventViewForNdsGroup = (function () {
    function EventViewForNdsGroup() {
    }
    EventViewForNdsGroup.getAttributeTypeMap = function () {
        return EventViewForNdsGroup.attributeTypeMap;
    };
    EventViewForNdsGroup.discriminator = undefined;
    EventViewForNdsGroup.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "UserEventTypeViewForNdsGroup",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        },
        {
            "name": "alertId",
            "baseName": "alertId",
            "type": "string",
            "format": ""
        },
        {
            "name": "alertConfigId",
            "baseName": "alertConfigId",
            "type": "string",
            "format": ""
        },
        {
            "name": "invoiceId",
            "baseName": "invoiceId",
            "type": "string",
            "format": ""
        },
        {
            "name": "paymentId",
            "baseName": "paymentId",
            "type": "string",
            "format": ""
        },
        {
            "name": "shardName",
            "baseName": "shardName",
            "type": "string",
            "format": ""
        },
        {
            "name": "collection",
            "baseName": "collection",
            "type": "string",
            "format": ""
        },
        {
            "name": "database",
            "baseName": "database",
            "type": "string",
            "format": ""
        },
        {
            "name": "opType",
            "baseName": "opType",
            "type": "string",
            "format": ""
        },
        {
            "name": "port",
            "baseName": "port",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "currentValue",
            "baseName": "currentValue",
            "type": "HostMetricValueView",
            "format": ""
        },
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string",
            "format": ""
        },
        {
            "name": "whitelistEntry",
            "baseName": "whitelistEntry",
            "type": "string",
            "format": ""
        },
        {
            "name": "endpointId",
            "baseName": "endpointId",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerEndpointId",
            "baseName": "providerEndpointId",
            "type": "string",
            "format": ""
        },
        {
            "name": "teamId",
            "baseName": "teamId",
            "type": "string",
            "format": ""
        },
        {
            "name": "targetUsername",
            "baseName": "targetUsername",
            "type": "string",
            "format": "email"
        }
    ];
    return EventViewForNdsGroup;
}());
exports.EventViewForNdsGroup = EventViewForNdsGroup;
//# sourceMappingURL=EventViewForNdsGroup.js.map

/***/ }),

/***/ 9256:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EventViewForOrg = void 0;
var EventViewForOrg = (function () {
    function EventViewForOrg() {
    }
    EventViewForOrg.getAttributeTypeMap = function () {
        return EventViewForOrg.attributeTypeMap;
    };
    EventViewForOrg.discriminator = undefined;
    EventViewForOrg.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "UserEventTypeViewForOrg",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        },
        {
            "name": "alertId",
            "baseName": "alertId",
            "type": "string",
            "format": ""
        },
        {
            "name": "alertConfigId",
            "baseName": "alertConfigId",
            "type": "string",
            "format": ""
        },
        {
            "name": "invoiceId",
            "baseName": "invoiceId",
            "type": "string",
            "format": ""
        },
        {
            "name": "paymentId",
            "baseName": "paymentId",
            "type": "string",
            "format": ""
        },
        {
            "name": "whitelistEntry",
            "baseName": "whitelistEntry",
            "type": "string",
            "format": ""
        },
        {
            "name": "teamId",
            "baseName": "teamId",
            "type": "string",
            "format": ""
        },
        {
            "name": "targetUsername",
            "baseName": "targetUsername",
            "type": "string",
            "format": "email"
        }
    ];
    return EventViewForOrg;
}());
exports.EventViewForOrg = EventViewForOrg;
//# sourceMappingURL=EventViewForOrg.js.map

/***/ }),

/***/ 42882:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExampleResourceResponseView20230101 = void 0;
var ExampleResourceResponseView20230101 = (function () {
    function ExampleResourceResponseView20230101() {
    }
    ExampleResourceResponseView20230101.getAttributeTypeMap = function () {
        return ExampleResourceResponseView20230101.attributeTypeMap;
    };
    ExampleResourceResponseView20230101.discriminator = undefined;
    ExampleResourceResponseView20230101.attributeTypeMap = [
        {
            "name": "data",
            "baseName": "data",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        }
    ];
    return ExampleResourceResponseView20230101;
}());
exports.ExampleResourceResponseView20230101 = ExampleResourceResponseView20230101;
//# sourceMappingURL=ExampleResourceResponseView20230101.js.map

/***/ }),

/***/ 70765:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExampleResourceResponseView20230201 = void 0;
var ExampleResourceResponseView20230201 = (function () {
    function ExampleResourceResponseView20230201() {
    }
    ExampleResourceResponseView20230201.getAttributeTypeMap = function () {
        return ExampleResourceResponseView20230201.attributeTypeMap;
    };
    ExampleResourceResponseView20230201.discriminator = undefined;
    ExampleResourceResponseView20230201.attributeTypeMap = [
        {
            "name": "additionalInfo",
            "baseName": "additionalInfo",
            "type": "string",
            "format": ""
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        }
    ];
    return ExampleResourceResponseView20230201;
}());
exports.ExampleResourceResponseView20230201 = ExampleResourceResponseView20230201;
//# sourceMappingURL=ExampleResourceResponseView20230201.js.map

/***/ }),

/***/ 89400:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FTSIndex = void 0;
var FTSIndex = (function () {
    function FTSIndex() {
    }
    FTSIndex.getAttributeTypeMap = function () {
        return FTSIndex.attributeTypeMap;
    };
    FTSIndex.discriminator = undefined;
    FTSIndex.attributeTypeMap = [
        {
            "name": "analyzer",
            "baseName": "analyzer",
            "type": "string",
            "format": ""
        },
        {
            "name": "analyzers",
            "baseName": "analyzers",
            "type": "Array<ApiAtlasFTSAnalyzersViewManual>",
            "format": ""
        },
        {
            "name": "collectionName",
            "baseName": "collectionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "database",
            "baseName": "database",
            "type": "string",
            "format": ""
        },
        {
            "name": "indexID",
            "baseName": "indexID",
            "type": "string",
            "format": ""
        },
        {
            "name": "mappings",
            "baseName": "mappings",
            "type": "ApiAtlasFTSMappingsViewManual",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "searchAnalyzer",
            "baseName": "searchAnalyzer",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "synonyms",
            "baseName": "synonyms",
            "type": "Array<FTSSynonymMappingDefinition>",
            "format": ""
        }
    ];
    return FTSIndex;
}());
exports.FTSIndex = FTSIndex;
//# sourceMappingURL=FTSIndex.js.map

/***/ }),

/***/ 25896:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=FTSIndexAuditTypeView.js.map

/***/ }),

/***/ 22974:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FTSIndexAuditView = void 0;
var FTSIndexAuditView = (function () {
    function FTSIndexAuditView() {
    }
    FTSIndexAuditView.getAttributeTypeMap = function () {
        return FTSIndexAuditView.attributeTypeMap;
    };
    FTSIndexAuditView.discriminator = undefined;
    FTSIndexAuditView.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "FTSIndexAuditTypeView",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return FTSIndexAuditView;
}());
exports.FTSIndexAuditView = FTSIndexAuditView;
//# sourceMappingURL=FTSIndexAuditView.js.map

/***/ }),

/***/ 22500:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FTSSynonymMappingDefinition = void 0;
var FTSSynonymMappingDefinition = (function () {
    function FTSSynonymMappingDefinition() {
    }
    FTSSynonymMappingDefinition.getAttributeTypeMap = function () {
        return FTSSynonymMappingDefinition.attributeTypeMap;
    };
    FTSSynonymMappingDefinition.discriminator = undefined;
    FTSSynonymMappingDefinition.attributeTypeMap = [
        {
            "name": "analyzer",
            "baseName": "analyzer",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "SynonymSource",
            "format": ""
        }
    ];
    return FTSSynonymMappingDefinition;
}());
exports.FTSSynonymMappingDefinition = FTSSynonymMappingDefinition;
//# sourceMappingURL=FTSSynonymMappingDefinition.js.map

/***/ }),

/***/ 28099:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FederatedUserView = void 0;
var FederatedUserView = (function () {
    function FederatedUserView() {
    }
    FederatedUserView.getAttributeTypeMap = function () {
        return FederatedUserView.attributeTypeMap;
    };
    FederatedUserView.discriminator = undefined;
    FederatedUserView.attributeTypeMap = [
        {
            "name": "emailAddress",
            "baseName": "emailAddress",
            "type": "string",
            "format": "email"
        },
        {
            "name": "federationSettingsId",
            "baseName": "federationSettingsId",
            "type": "string",
            "format": ""
        },
        {
            "name": "firstName",
            "baseName": "firstName",
            "type": "string",
            "format": ""
        },
        {
            "name": "lastName",
            "baseName": "lastName",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        }
    ];
    return FederatedUserView;
}());
exports.FederatedUserView = FederatedUserView;
//# sourceMappingURL=FederatedUserView.js.map

/***/ }),

/***/ 49309:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FieldTransformation = void 0;
var FieldTransformation = (function () {
    function FieldTransformation() {
    }
    FieldTransformation.getAttributeTypeMap = function () {
        return FieldTransformation.attributeTypeMap;
    };
    FieldTransformation.discriminator = undefined;
    FieldTransformation.attributeTypeMap = [
        {
            "name": "field",
            "baseName": "field",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return FieldTransformation;
}());
exports.FieldTransformation = FieldTransformation;
//# sourceMappingURL=FieldTransformation.js.map

/***/ }),

/***/ 65426:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ForNdsGroup = void 0;
var ForNdsGroup = (function () {
    function ForNdsGroup() {
    }
    ForNdsGroup.getAttributeTypeMap = function () {
        return ForNdsGroup.attributeTypeMap;
    };
    ForNdsGroup.discriminator = undefined;
    ForNdsGroup.attributeTypeMap = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "ReplicaSetEventTypeViewForNdsGroup",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "port",
            "baseName": "port",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "shardName",
            "baseName": "shardName",
            "type": "string",
            "format": ""
        }
    ];
    return ForNdsGroup;
}());
exports.ForNdsGroup = ForNdsGroup;
//# sourceMappingURL=ForNdsGroup.js.map

/***/ }),

/***/ 6512:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FreeAutoScaling = void 0;
var FreeAutoScaling = (function () {
    function FreeAutoScaling() {
    }
    FreeAutoScaling.getAttributeTypeMap = function () {
        return FreeAutoScaling.attributeTypeMap;
    };
    FreeAutoScaling.discriminator = undefined;
    FreeAutoScaling.attributeTypeMap = [
        {
            "name": "compute",
            "baseName": "compute",
            "type": "string",
            "format": ""
        }
    ];
    return FreeAutoScaling;
}());
exports.FreeAutoScaling = FreeAutoScaling;
//# sourceMappingURL=FreeAutoScaling.js.map

/***/ }),

/***/ 78948:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FreeProviderSettings = void 0;
var FreeProviderSettings = (function () {
    function FreeProviderSettings() {
    }
    FreeProviderSettings.getAttributeTypeMap = function () {
        return FreeProviderSettings.attributeTypeMap;
    };
    FreeProviderSettings.discriminator = undefined;
    FreeProviderSettings.attributeTypeMap = [
        {
            "name": "autoScaling",
            "baseName": "autoScaling",
            "type": "FreeAutoScaling",
            "format": ""
        },
        {
            "name": "backingProviderName",
            "baseName": "backingProviderName",
            "type": "string",
            "format": ""
        },
        {
            "name": "instanceSizeName",
            "baseName": "instanceSizeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "regionName",
            "baseName": "regionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        }
    ];
    return FreeProviderSettings;
}());
exports.FreeProviderSettings = FreeProviderSettings;
//# sourceMappingURL=FreeProviderSettings.js.map

/***/ }),

/***/ 66506:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GCPAutoScaling = void 0;
var GCPAutoScaling = (function () {
    function GCPAutoScaling() {
    }
    GCPAutoScaling.getAttributeTypeMap = function () {
        return GCPAutoScaling.attributeTypeMap;
    };
    GCPAutoScaling.discriminator = undefined;
    GCPAutoScaling.attributeTypeMap = [
        {
            "name": "compute",
            "baseName": "compute",
            "type": "GCPComputeAutoScaling",
            "format": ""
        }
    ];
    return GCPAutoScaling;
}());
exports.GCPAutoScaling = GCPAutoScaling;
//# sourceMappingURL=GCPAutoScaling.js.map

/***/ }),

/***/ 86394:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GCPCloudProviderContainer = void 0;
var GCPCloudProviderContainer = (function () {
    function GCPCloudProviderContainer() {
    }
    GCPCloudProviderContainer.getAttributeTypeMap = function () {
        return GCPCloudProviderContainer.attributeTypeMap;
    };
    GCPCloudProviderContainer.discriminator = undefined;
    GCPCloudProviderContainer.attributeTypeMap = [
        {
            "name": "atlasCidrBlock",
            "baseName": "atlasCidrBlock",
            "type": "string",
            "format": ""
        },
        {
            "name": "gcpProjectId",
            "baseName": "gcpProjectId",
            "type": "string",
            "format": ""
        },
        {
            "name": "networkName",
            "baseName": "networkName",
            "type": "string",
            "format": ""
        },
        {
            "name": "regions",
            "baseName": "regions",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "provisioned",
            "baseName": "provisioned",
            "type": "boolean",
            "format": ""
        }
    ];
    return GCPCloudProviderContainer;
}());
exports.GCPCloudProviderContainer = GCPCloudProviderContainer;
//# sourceMappingURL=GCPCloudProviderContainer.js.map

/***/ }),

/***/ 45143:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GCPComputeAutoScaling = void 0;
var GCPComputeAutoScaling = (function () {
    function GCPComputeAutoScaling() {
    }
    GCPComputeAutoScaling.getAttributeTypeMap = function () {
        return GCPComputeAutoScaling.attributeTypeMap;
    };
    GCPComputeAutoScaling.discriminator = undefined;
    GCPComputeAutoScaling.attributeTypeMap = [
        {
            "name": "maxInstanceSize",
            "baseName": "maxInstanceSize",
            "type": "string",
            "format": ""
        },
        {
            "name": "minInstanceSize",
            "baseName": "minInstanceSize",
            "type": "string",
            "format": ""
        }
    ];
    return GCPComputeAutoScaling;
}());
exports.GCPComputeAutoScaling = GCPComputeAutoScaling;
//# sourceMappingURL=GCPComputeAutoScaling.js.map

/***/ }),

/***/ 982:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GCPConsumerForwardingRule = void 0;
var GCPConsumerForwardingRule = (function () {
    function GCPConsumerForwardingRule() {
    }
    GCPConsumerForwardingRule.getAttributeTypeMap = function () {
        return GCPConsumerForwardingRule.attributeTypeMap;
    };
    GCPConsumerForwardingRule.discriminator = undefined;
    GCPConsumerForwardingRule.attributeTypeMap = [
        {
            "name": "endpointName",
            "baseName": "endpointName",
            "type": "string",
            "format": ""
        },
        {
            "name": "ipAddress",
            "baseName": "ipAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        }
    ];
    return GCPConsumerForwardingRule;
}());
exports.GCPConsumerForwardingRule = GCPConsumerForwardingRule;
//# sourceMappingURL=GCPConsumerForwardingRule.js.map

/***/ }),

/***/ 2052:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GCPEndpointGroup = void 0;
var GCPEndpointGroup = (function () {
    function GCPEndpointGroup() {
    }
    GCPEndpointGroup.getAttributeTypeMap = function () {
        return GCPEndpointGroup.attributeTypeMap;
    };
    GCPEndpointGroup.discriminator = undefined;
    GCPEndpointGroup.attributeTypeMap = [
        {
            "name": "deleteRequested",
            "baseName": "deleteRequested",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "endpointGroupName",
            "baseName": "endpointGroupName",
            "type": "string",
            "format": ""
        },
        {
            "name": "endpoints",
            "baseName": "endpoints",
            "type": "Array<GCPConsumerForwardingRule>",
            "format": ""
        },
        {
            "name": "errorMessage",
            "baseName": "errorMessage",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        }
    ];
    return GCPEndpointGroup;
}());
exports.GCPEndpointGroup = GCPEndpointGroup;
//# sourceMappingURL=GCPEndpointGroup.js.map

/***/ }),

/***/ 46486:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GCPEndpointService = void 0;
var GCPEndpointService = (function () {
    function GCPEndpointService() {
    }
    GCPEndpointService.getAttributeTypeMap = function () {
        return GCPEndpointService.attributeTypeMap;
    };
    GCPEndpointService.discriminator = undefined;
    GCPEndpointService.attributeTypeMap = [
        {
            "name": "endpointGroupNames",
            "baseName": "endpointGroupNames",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "errorMessage",
            "baseName": "errorMessage",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "regionName",
            "baseName": "regionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "serviceAttachmentNames",
            "baseName": "serviceAttachmentNames",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        }
    ];
    return GCPEndpointService;
}());
exports.GCPEndpointService = GCPEndpointService;
//# sourceMappingURL=GCPEndpointService.js.map

/***/ }),

/***/ 82485:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GCPHardwareSpec = void 0;
var GCPHardwareSpec = (function () {
    function GCPHardwareSpec() {
    }
    GCPHardwareSpec.getAttributeTypeMap = function () {
        return GCPHardwareSpec.attributeTypeMap;
    };
    GCPHardwareSpec.discriminator = undefined;
    GCPHardwareSpec.attributeTypeMap = [
        {
            "name": "instanceSize",
            "baseName": "instanceSize",
            "type": "string",
            "format": ""
        },
        {
            "name": "nodeCount",
            "baseName": "nodeCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return GCPHardwareSpec;
}());
exports.GCPHardwareSpec = GCPHardwareSpec;
//# sourceMappingURL=GCPHardwareSpec.js.map

/***/ }),

/***/ 89790:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GCPPeerVpc = void 0;
var GCPPeerVpc = (function () {
    function GCPPeerVpc() {
    }
    GCPPeerVpc.getAttributeTypeMap = function () {
        return GCPPeerVpc.attributeTypeMap;
    };
    GCPPeerVpc.discriminator = undefined;
    GCPPeerVpc.attributeTypeMap = [
        {
            "name": "containerId",
            "baseName": "containerId",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorMessage",
            "baseName": "errorMessage",
            "type": "string",
            "format": ""
        },
        {
            "name": "gcpProjectId",
            "baseName": "gcpProjectId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "networkName",
            "baseName": "networkName",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        }
    ];
    return GCPPeerVpc;
}());
exports.GCPPeerVpc = GCPPeerVpc;
//# sourceMappingURL=GCPPeerVpc.js.map

/***/ }),

/***/ 87101:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GCPPeerVpcRequest = void 0;
var GCPPeerVpcRequest = (function () {
    function GCPPeerVpcRequest() {
    }
    GCPPeerVpcRequest.getAttributeTypeMap = function () {
        return GCPPeerVpcRequest.attributeTypeMap;
    };
    GCPPeerVpcRequest.discriminator = undefined;
    GCPPeerVpcRequest.attributeTypeMap = [
        {
            "name": "containerId",
            "baseName": "containerId",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorMessage",
            "baseName": "errorMessage",
            "type": "string",
            "format": ""
        },
        {
            "name": "gcpProjectId",
            "baseName": "gcpProjectId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "networkName",
            "baseName": "networkName",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        }
    ];
    return GCPPeerVpcRequest;
}());
exports.GCPPeerVpcRequest = GCPPeerVpcRequest;
//# sourceMappingURL=GCPPeerVpcRequest.js.map

/***/ }),

/***/ 11900:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GCPProviderSettings = void 0;
var GCPProviderSettings = (function () {
    function GCPProviderSettings() {
    }
    GCPProviderSettings.getAttributeTypeMap = function () {
        return GCPProviderSettings.attributeTypeMap;
    };
    GCPProviderSettings.discriminator = undefined;
    GCPProviderSettings.attributeTypeMap = [
        {
            "name": "autoScaling",
            "baseName": "autoScaling",
            "type": "GCPAutoScaling",
            "format": ""
        },
        {
            "name": "instanceSizeName",
            "baseName": "instanceSizeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "regionName",
            "baseName": "regionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        }
    ];
    return GCPProviderSettings;
}());
exports.GCPProviderSettings = GCPProviderSettings;
//# sourceMappingURL=GCPProviderSettings.js.map

/***/ }),

/***/ 3809:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GCPRegionConfig = void 0;
var GCPRegionConfig = (function () {
    function GCPRegionConfig() {
    }
    GCPRegionConfig.getAttributeTypeMap = function () {
        return GCPRegionConfig.attributeTypeMap;
    };
    GCPRegionConfig.discriminator = undefined;
    GCPRegionConfig.attributeTypeMap = [
        {
            "name": "analyticsAutoScaling",
            "baseName": "analyticsAutoScaling",
            "type": "AutoScalingV15",
            "format": ""
        },
        {
            "name": "analyticsSpecs",
            "baseName": "analyticsSpecs",
            "type": "DedicatedHardwareSpec",
            "format": ""
        },
        {
            "name": "autoScaling",
            "baseName": "autoScaling",
            "type": "AutoScalingV15",
            "format": ""
        },
        {
            "name": "readOnlySpecs",
            "baseName": "readOnlySpecs",
            "type": "DedicatedHardwareSpec",
            "format": ""
        },
        {
            "name": "electableSpecs",
            "baseName": "electableSpecs",
            "type": "HardwareSpec",
            "format": ""
        },
        {
            "name": "priority",
            "baseName": "priority",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "regionName",
            "baseName": "regionName",
            "type": "string",
            "format": ""
        }
    ];
    return GCPRegionConfig;
}());
exports.GCPRegionConfig = GCPRegionConfig;
//# sourceMappingURL=GCPRegionConfig.js.map

/***/ }),

/***/ 9449:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GeoSharding = void 0;
var GeoSharding = (function () {
    function GeoSharding() {
    }
    GeoSharding.getAttributeTypeMap = function () {
        return GeoSharding.attributeTypeMap;
    };
    GeoSharding.discriminator = undefined;
    GeoSharding.attributeTypeMap = [
        {
            "name": "customZoneMapping",
            "baseName": "customZoneMapping",
            "type": "{ [key: string]: string; }",
            "format": ""
        },
        {
            "name": "managedNamespaces",
            "baseName": "managedNamespaces",
            "type": "Array<ManagedNamespaces>",
            "format": ""
        }
    ];
    return GeoSharding;
}());
exports.GeoSharding = GeoSharding;
//# sourceMappingURL=GeoSharding.js.map

/***/ }),

/***/ 36082:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GetPeeringConnection200Response = void 0;
var GetPeeringConnection200Response = (function () {
    function GetPeeringConnection200Response() {
    }
    GetPeeringConnection200Response.getAttributeTypeMap = function () {
        return GetPeeringConnection200Response.attributeTypeMap;
    };
    GetPeeringConnection200Response.discriminator = undefined;
    GetPeeringConnection200Response.attributeTypeMap = [
        {
            "name": "accepterRegionName",
            "baseName": "accepterRegionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "awsAccountId",
            "baseName": "awsAccountId",
            "type": "string",
            "format": ""
        },
        {
            "name": "connectionId",
            "baseName": "connectionId",
            "type": "string",
            "format": ""
        },
        {
            "name": "containerId",
            "baseName": "containerId",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorStateName",
            "baseName": "errorStateName",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "routeTableCidrBlock",
            "baseName": "routeTableCidrBlock",
            "type": "string",
            "format": ""
        },
        {
            "name": "statusName",
            "baseName": "statusName",
            "type": "string",
            "format": ""
        },
        {
            "name": "vpcId",
            "baseName": "vpcId",
            "type": "string",
            "format": ""
        },
        {
            "name": "azureDirectoryId",
            "baseName": "azureDirectoryId",
            "type": "string",
            "format": ""
        },
        {
            "name": "azureSubscriptionId",
            "baseName": "azureSubscriptionId",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorState",
            "baseName": "errorState",
            "type": "string",
            "format": ""
        },
        {
            "name": "resourceGroupName",
            "baseName": "resourceGroupName",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "vnetName",
            "baseName": "vnetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorMessage",
            "baseName": "errorMessage",
            "type": "string",
            "format": ""
        },
        {
            "name": "gcpProjectId",
            "baseName": "gcpProjectId",
            "type": "string",
            "format": ""
        },
        {
            "name": "networkName",
            "baseName": "networkName",
            "type": "string",
            "format": ""
        }
    ];
    return GetPeeringConnection200Response;
}());
exports.GetPeeringConnection200Response = GetPeeringConnection200Response;
//# sourceMappingURL=GetPeeringConnection200Response.js.map

/***/ }),

/***/ 96428:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GoogleCloudKMS = void 0;
var GoogleCloudKMS = (function () {
    function GoogleCloudKMS() {
    }
    GoogleCloudKMS.getAttributeTypeMap = function () {
        return GoogleCloudKMS.attributeTypeMap;
    };
    GoogleCloudKMS.discriminator = undefined;
    GoogleCloudKMS.attributeTypeMap = [
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "keyVersionResourceID",
            "baseName": "keyVersionResourceID",
            "type": "string",
            "format": ""
        },
        {
            "name": "serviceAccountKey",
            "baseName": "serviceAccountKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "valid",
            "baseName": "valid",
            "type": "boolean",
            "format": ""
        }
    ];
    return GoogleCloudKMS;
}());
exports.GoogleCloudKMS = GoogleCloudKMS;
//# sourceMappingURL=GoogleCloudKMS.js.map

/***/ }),

/***/ 6917:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GreaterThanDaysThresholdView = void 0;
var GreaterThanDaysThresholdView = (function () {
    function GreaterThanDaysThresholdView() {
    }
    GreaterThanDaysThresholdView.getAttributeTypeMap = function () {
        return GreaterThanDaysThresholdView.attributeTypeMap;
    };
    GreaterThanDaysThresholdView.discriminator = undefined;
    GreaterThanDaysThresholdView.attributeTypeMap = [
        {
            "name": "operator",
            "baseName": "operator",
            "type": "string",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "string",
            "format": ""
        }
    ];
    return GreaterThanDaysThresholdView;
}());
exports.GreaterThanDaysThresholdView = GreaterThanDaysThresholdView;
//# sourceMappingURL=GreaterThanDaysThresholdView.js.map

/***/ }),

/***/ 50080:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GreaterThanRawThresholdAlertConfigViewForNdsGroup = void 0;
var GreaterThanRawThresholdAlertConfigViewForNdsGroup = (function () {
    function GreaterThanRawThresholdAlertConfigViewForNdsGroup() {
    }
    GreaterThanRawThresholdAlertConfigViewForNdsGroup.getAttributeTypeMap = function () {
        return GreaterThanRawThresholdAlertConfigViewForNdsGroup.attributeTypeMap;
    };
    GreaterThanRawThresholdAlertConfigViewForNdsGroup.discriminator = undefined;
    GreaterThanRawThresholdAlertConfigViewForNdsGroup.attributeTypeMap = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "ReplicaSetEventTypeViewForNdsGroupAlertableWithThreshold",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "matchers",
            "baseName": "matchers",
            "type": "Array<ReplicaSetMatcherView>",
            "format": ""
        },
        {
            "name": "notifications",
            "baseName": "notifications",
            "type": "Array<NotificationViewForNdsGroup>",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "GreaterThanRawThresholdView",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return GreaterThanRawThresholdAlertConfigViewForNdsGroup;
}());
exports.GreaterThanRawThresholdAlertConfigViewForNdsGroup = GreaterThanRawThresholdAlertConfigViewForNdsGroup;
//# sourceMappingURL=GreaterThanRawThresholdAlertConfigViewForNdsGroup.js.map

/***/ }),

/***/ 16557:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GreaterThanRawThresholdView = void 0;
var GreaterThanRawThresholdView = (function () {
    function GreaterThanRawThresholdView() {
    }
    GreaterThanRawThresholdView.getAttributeTypeMap = function () {
        return GreaterThanRawThresholdView.attributeTypeMap;
    };
    GreaterThanRawThresholdView.discriminator = undefined;
    GreaterThanRawThresholdView.attributeTypeMap = [
        {
            "name": "operator",
            "baseName": "operator",
            "type": "string",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "RawMetricUnits",
            "format": ""
        }
    ];
    return GreaterThanRawThresholdView;
}());
exports.GreaterThanRawThresholdView = GreaterThanRawThresholdView;
//# sourceMappingURL=GreaterThanRawThresholdView.js.map

/***/ }),

/***/ 96310:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GreaterThanTimeThresholdView = void 0;
var GreaterThanTimeThresholdView = (function () {
    function GreaterThanTimeThresholdView() {
    }
    GreaterThanTimeThresholdView.getAttributeTypeMap = function () {
        return GreaterThanTimeThresholdView.attributeTypeMap;
    };
    GreaterThanTimeThresholdView.discriminator = undefined;
    GreaterThanTimeThresholdView.attributeTypeMap = [
        {
            "name": "operator",
            "baseName": "operator",
            "type": "string",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "TimeMetricUnits",
            "format": ""
        }
    ];
    return GreaterThanTimeThresholdView;
}());
exports.GreaterThanTimeThresholdView = GreaterThanTimeThresholdView;
//# sourceMappingURL=GreaterThanTimeThresholdView.js.map

/***/ }),

/***/ 4550:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Group = void 0;
var Group = (function () {
    function Group() {
    }
    Group.getAttributeTypeMap = function () {
        return Group.attributeTypeMap;
    };
    Group.discriminator = undefined;
    Group.attributeTypeMap = [
        {
            "name": "clusterCount",
            "baseName": "clusterCount",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "withDefaultAlertsSettings",
            "baseName": "withDefaultAlertsSettings",
            "type": "boolean",
            "format": ""
        }
    ];
    return Group;
}());
exports.Group = Group;
//# sourceMappingURL=Group.js.map

/***/ }),

/***/ 53666:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GroupMaintenanceWindow = void 0;
var GroupMaintenanceWindow = (function () {
    function GroupMaintenanceWindow() {
    }
    GroupMaintenanceWindow.getAttributeTypeMap = function () {
        return GroupMaintenanceWindow.attributeTypeMap;
    };
    GroupMaintenanceWindow.discriminator = undefined;
    GroupMaintenanceWindow.attributeTypeMap = [
        {
            "name": "autoDeferOnceEnabled",
            "baseName": "autoDeferOnceEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "dayOfWeek",
            "baseName": "dayOfWeek",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "hourOfDay",
            "baseName": "hourOfDay",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "startASAP",
            "baseName": "startASAP",
            "type": "boolean",
            "format": ""
        }
    ];
    return GroupMaintenanceWindow;
}());
exports.GroupMaintenanceWindow = GroupMaintenanceWindow;
//# sourceMappingURL=GroupMaintenanceWindow.js.map

/***/ }),

/***/ 66106:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GroupName = void 0;
var GroupName = (function () {
    function GroupName() {
    }
    GroupName.getAttributeTypeMap = function () {
        return GroupName.attributeTypeMap;
    };
    GroupName.discriminator = undefined;
    GroupName.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        }
    ];
    return GroupName;
}());
exports.GroupName = GroupName;
//# sourceMappingURL=GroupName.js.map

/***/ }),

/***/ 9205:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GroupNotificationView = void 0;
var GroupNotificationView = (function () {
    function GroupNotificationView() {
    }
    GroupNotificationView.getAttributeTypeMap = function () {
        return GroupNotificationView.attributeTypeMap;
    };
    GroupNotificationView.discriminator = undefined;
    GroupNotificationView.attributeTypeMap = [
        {
            "name": "delayMin",
            "baseName": "delayMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "emailEnabled",
            "baseName": "emailEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "intervalMin",
            "baseName": "intervalMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "smsEnabled",
            "baseName": "smsEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        }
    ];
    return GroupNotificationView;
}());
exports.GroupNotificationView = GroupNotificationView;
//# sourceMappingURL=GroupNotificationView.js.map

/***/ }),

/***/ 97096:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GroupPaginatedEventView = void 0;
var GroupPaginatedEventView = (function () {
    function GroupPaginatedEventView() {
    }
    GroupPaginatedEventView.getAttributeTypeMap = function () {
        return GroupPaginatedEventView.attributeTypeMap;
    };
    GroupPaginatedEventView.discriminator = undefined;
    GroupPaginatedEventView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<EventViewForNdsGroup>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return GroupPaginatedEventView;
}());
exports.GroupPaginatedEventView = GroupPaginatedEventView;
//# sourceMappingURL=GroupPaginatedEventView.js.map

/***/ }),

/***/ 31898:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GroupPaginatedIntegrationView = void 0;
var GroupPaginatedIntegrationView = (function () {
    function GroupPaginatedIntegrationView() {
    }
    GroupPaginatedIntegrationView.getAttributeTypeMap = function () {
        return GroupPaginatedIntegrationView.attributeTypeMap;
    };
    GroupPaginatedIntegrationView.discriminator = undefined;
    GroupPaginatedIntegrationView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<IntegrationViewForNdsGroup>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return GroupPaginatedIntegrationView;
}());
exports.GroupPaginatedIntegrationView = GroupPaginatedIntegrationView;
//# sourceMappingURL=GroupPaginatedIntegrationView.js.map

/***/ }),

/***/ 56566:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GroupSettings = void 0;
var GroupSettings = (function () {
    function GroupSettings() {
    }
    GroupSettings.getAttributeTypeMap = function () {
        return GroupSettings.attributeTypeMap;
    };
    GroupSettings.discriminator = undefined;
    GroupSettings.attributeTypeMap = [
        {
            "name": "isCollectDatabaseSpecificsStatisticsEnabled",
            "baseName": "isCollectDatabaseSpecificsStatisticsEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isDataExplorerEnabled",
            "baseName": "isDataExplorerEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isExtendedStorageSizesEnabled",
            "baseName": "isExtendedStorageSizesEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isPerformanceAdvisorEnabled",
            "baseName": "isPerformanceAdvisorEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isRealtimePerformancePanelEnabled",
            "baseName": "isRealtimePerformancePanelEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isSchemaAdvisorEnabled",
            "baseName": "isSchemaAdvisorEnabled",
            "type": "boolean",
            "format": ""
        }
    ];
    return GroupSettings;
}());
exports.GroupSettings = GroupSettings;
//# sourceMappingURL=GroupSettings.js.map

/***/ }),

/***/ 94850:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HardwareSpec = void 0;
var HardwareSpec = (function () {
    function HardwareSpec() {
    }
    HardwareSpec.getAttributeTypeMap = function () {
        return HardwareSpec.attributeTypeMap;
    };
    HardwareSpec.discriminator = undefined;
    HardwareSpec.attributeTypeMap = [
        {
            "name": "diskIOPS",
            "baseName": "diskIOPS",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "ebsVolumeType",
            "baseName": "ebsVolumeType",
            "type": "string",
            "format": ""
        },
        {
            "name": "instanceSize",
            "baseName": "instanceSize",
            "type": "string",
            "format": ""
        },
        {
            "name": "nodeCount",
            "baseName": "nodeCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return HardwareSpec;
}());
exports.HardwareSpec = HardwareSpec;
//# sourceMappingURL=HardwareSpec.js.map

/***/ }),

/***/ 62633:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HipChatNotificationView = void 0;
var HipChatNotificationView = (function () {
    function HipChatNotificationView() {
    }
    HipChatNotificationView.getAttributeTypeMap = function () {
        return HipChatNotificationView.attributeTypeMap;
    };
    HipChatNotificationView.discriminator = undefined;
    HipChatNotificationView.attributeTypeMap = [
        {
            "name": "delayMin",
            "baseName": "delayMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "intervalMin",
            "baseName": "intervalMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "notificationToken",
            "baseName": "notificationToken",
            "type": "string",
            "format": ""
        },
        {
            "name": "roomName",
            "baseName": "roomName",
            "type": "string",
            "format": ""
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        }
    ];
    return HipChatNotificationView;
}());
exports.HipChatNotificationView = HipChatNotificationView;
//# sourceMappingURL=HipChatNotificationView.js.map

/***/ }),

/***/ 76383:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HostAlertConfigViewForNdsGroup = void 0;
var HostAlertConfigViewForNdsGroup = (function () {
    function HostAlertConfigViewForNdsGroup() {
    }
    HostAlertConfigViewForNdsGroup.getAttributeTypeMap = function () {
        return HostAlertConfigViewForNdsGroup.attributeTypeMap;
    };
    HostAlertConfigViewForNdsGroup.discriminator = undefined;
    HostAlertConfigViewForNdsGroup.attributeTypeMap = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "HostEventTypeViewForNdsGroupAlertable",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "matchers",
            "baseName": "matchers",
            "type": "Array<HostMatcherView>",
            "format": ""
        },
        {
            "name": "notifications",
            "baseName": "notifications",
            "type": "Array<NotificationViewForNdsGroup>",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return HostAlertConfigViewForNdsGroup;
}());
exports.HostAlertConfigViewForNdsGroup = HostAlertConfigViewForNdsGroup;
//# sourceMappingURL=HostAlertConfigViewForNdsGroup.js.map

/***/ }),

/***/ 7918:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HostAlertViewForNdsGroup = void 0;
var HostAlertViewForNdsGroup = (function () {
    function HostAlertViewForNdsGroup() {
    }
    HostAlertViewForNdsGroup.getAttributeTypeMap = function () {
        return HostAlertViewForNdsGroup.attributeTypeMap;
    };
    HostAlertViewForNdsGroup.discriminator = undefined;
    HostAlertViewForNdsGroup.attributeTypeMap = [
        {
            "name": "acknowledgedUntil",
            "baseName": "acknowledgedUntil",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "acknowledgementComment",
            "baseName": "acknowledgementComment",
            "type": "string",
            "format": ""
        },
        {
            "name": "acknowledgingUsername",
            "baseName": "acknowledgingUsername",
            "type": "string",
            "format": "email"
        },
        {
            "name": "alertConfigId",
            "baseName": "alertConfigId",
            "type": "string",
            "format": ""
        },
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "HostEventTypeViewForNdsGroupAlertable",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "hostnameAndPort",
            "baseName": "hostnameAndPort",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "lastNotified",
            "baseName": "lastNotified",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "resolved",
            "baseName": "resolved",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return HostAlertViewForNdsGroup;
}());
exports.HostAlertViewForNdsGroup = HostAlertViewForNdsGroup;
//# sourceMappingURL=HostAlertViewForNdsGroup.js.map

/***/ }),

/***/ 13873:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=HostEventTypeViewForNdsGroup.js.map

/***/ }),

/***/ 77289:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=HostEventTypeViewForNdsGroupAlertable.js.map

/***/ }),

/***/ 81220:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HostEventViewForNdsGroup = void 0;
var HostEventViewForNdsGroup = (function () {
    function HostEventViewForNdsGroup() {
    }
    HostEventViewForNdsGroup.getAttributeTypeMap = function () {
        return HostEventViewForNdsGroup.attributeTypeMap;
    };
    HostEventViewForNdsGroup.discriminator = undefined;
    HostEventViewForNdsGroup.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "HostEventTypeViewForNdsGroup",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "port",
            "baseName": "port",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "shardName",
            "baseName": "shardName",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return HostEventViewForNdsGroup;
}());
exports.HostEventViewForNdsGroup = HostEventViewForNdsGroup;
//# sourceMappingURL=HostEventViewForNdsGroup.js.map

/***/ }),

/***/ 80573:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=HostMatcherField.js.map

/***/ }),

/***/ 62435:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HostMatcherView = void 0;
var HostMatcherView = (function () {
    function HostMatcherView() {
    }
    HostMatcherView.getAttributeTypeMap = function () {
        return HostMatcherView.attributeTypeMap;
    };
    HostMatcherView.discriminator = undefined;
    HostMatcherView.attributeTypeMap = [
        {
            "name": "fieldName",
            "baseName": "fieldName",
            "type": "HostMatcherField",
            "format": ""
        },
        {
            "name": "operator",
            "baseName": "operator",
            "type": "string",
            "format": ""
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "MatcherHostType",
            "format": ""
        }
    ];
    return HostMatcherView;
}());
exports.HostMatcherView = HostMatcherView;
//# sourceMappingURL=HostMatcherView.js.map

/***/ }),

/***/ 43167:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HostMetricAlertConfigViewForNdsGroup = void 0;
var HostMetricAlertConfigViewForNdsGroup = (function () {
    function HostMetricAlertConfigViewForNdsGroup() {
    }
    HostMetricAlertConfigViewForNdsGroup.getAttributeTypeMap = function () {
        return HostMetricAlertConfigViewForNdsGroup.attributeTypeMap;
    };
    HostMetricAlertConfigViewForNdsGroup.discriminator = undefined;
    HostMetricAlertConfigViewForNdsGroup.attributeTypeMap = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "HostMetricEventTypeViewAlertable",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "matchers",
            "baseName": "matchers",
            "type": "Array<HostMatcherView>",
            "format": ""
        },
        {
            "name": "metricThreshold",
            "baseName": "metricThreshold",
            "type": "HostMetricThresholdView",
            "format": ""
        },
        {
            "name": "notifications",
            "baseName": "notifications",
            "type": "Array<NotificationViewForNdsGroup>",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return HostMetricAlertConfigViewForNdsGroup;
}());
exports.HostMetricAlertConfigViewForNdsGroup = HostMetricAlertConfigViewForNdsGroup;
//# sourceMappingURL=HostMetricAlertConfigViewForNdsGroup.js.map

/***/ }),

/***/ 55034:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HostMetricAlertView = void 0;
var HostMetricAlertView = (function () {
    function HostMetricAlertView() {
    }
    HostMetricAlertView.getAttributeTypeMap = function () {
        return HostMetricAlertView.attributeTypeMap;
    };
    HostMetricAlertView.discriminator = "metricName";
    HostMetricAlertView.attributeTypeMap = [
        {
            "name": "acknowledgedUntil",
            "baseName": "acknowledgedUntil",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "acknowledgementComment",
            "baseName": "acknowledgementComment",
            "type": "string",
            "format": ""
        },
        {
            "name": "acknowledgingUsername",
            "baseName": "acknowledgingUsername",
            "type": "string",
            "format": "email"
        },
        {
            "name": "alertConfigId",
            "baseName": "alertConfigId",
            "type": "string",
            "format": ""
        },
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "currentValue",
            "baseName": "currentValue",
            "type": "NumberMetricValueView",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "HostMetricEventTypeViewAlertable",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "hostnameAndPort",
            "baseName": "hostnameAndPort",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "lastNotified",
            "baseName": "lastNotified",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "resolved",
            "baseName": "resolved",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return HostMetricAlertView;
}());
exports.HostMetricAlertView = HostMetricAlertView;
//# sourceMappingURL=HostMetricAlertView.js.map

/***/ }),

/***/ 11742:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=HostMetricEventTypeView.js.map

/***/ }),

/***/ 17830:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=HostMetricEventTypeViewAlertable.js.map

/***/ }),

/***/ 84700:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HostMetricEventView = void 0;
var HostMetricEventView = (function () {
    function HostMetricEventView() {
    }
    HostMetricEventView.getAttributeTypeMap = function () {
        return HostMetricEventView.attributeTypeMap;
    };
    HostMetricEventView.discriminator = "metricName";
    HostMetricEventView.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "currentValue",
            "baseName": "currentValue",
            "type": "NumberMetricValueView",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "HostMetricEventTypeView",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "port",
            "baseName": "port",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "shardName",
            "baseName": "shardName",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return HostMetricEventView;
}());
exports.HostMetricEventView = HostMetricEventView;
//# sourceMappingURL=HostMetricEventView.js.map

/***/ }),

/***/ 40076:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HostMetricThresholdView = void 0;
var HostMetricThresholdView = (function () {
    function HostMetricThresholdView() {
    }
    HostMetricThresholdView.getAttributeTypeMap = function () {
        return HostMetricThresholdView.attributeTypeMap;
    };
    HostMetricThresholdView.discriminator = "metricName";
    HostMetricThresholdView.attributeTypeMap = [
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string",
            "format": ""
        },
        {
            "name": "mode",
            "baseName": "mode",
            "type": "string",
            "format": ""
        },
        {
            "name": "operator",
            "baseName": "operator",
            "type": "Operator",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "number",
            "format": "double"
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "NumberMetricUnits",
            "format": ""
        }
    ];
    return HostMetricThresholdView;
}());
exports.HostMetricThresholdView = HostMetricThresholdView;
//# sourceMappingURL=HostMetricThresholdView.js.map

/***/ }),

/***/ 38647:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HostMetricValueView = void 0;
var HostMetricValueView = (function () {
    function HostMetricValueView() {
    }
    HostMetricValueView.getAttributeTypeMap = function () {
        return HostMetricValueView.attributeTypeMap;
    };
    HostMetricValueView.discriminator = undefined;
    HostMetricValueView.attributeTypeMap = [
        {
            "name": "number",
            "baseName": "number",
            "type": "number",
            "format": "double"
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "string",
            "format": ""
        }
    ];
    return HostMetricValueView;
}());
exports.HostMetricValueView = HostMetricValueView;
//# sourceMappingURL=HostMetricValueView.js.map

/***/ }),

/***/ 1260:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IdentityProviderUpdate = void 0;
var IdentityProviderUpdate = (function () {
    function IdentityProviderUpdate() {
    }
    IdentityProviderUpdate.getAttributeTypeMap = function () {
        return IdentityProviderUpdate.attributeTypeMap;
    };
    IdentityProviderUpdate.discriminator = undefined;
    IdentityProviderUpdate.attributeTypeMap = [
        {
            "name": "associatedDomains",
            "baseName": "associatedDomains",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "displayName",
            "baseName": "displayName",
            "type": "string",
            "format": ""
        },
        {
            "name": "issuerUri",
            "baseName": "issuerUri",
            "type": "string",
            "format": ""
        },
        {
            "name": "pemFileInfo",
            "baseName": "pemFileInfo",
            "type": "PemFileInfo",
            "format": ""
        },
        {
            "name": "requestBinding",
            "baseName": "requestBinding",
            "type": "string",
            "format": ""
        },
        {
            "name": "responseSignatureAlgorithm",
            "baseName": "responseSignatureAlgorithm",
            "type": "string",
            "format": ""
        },
        {
            "name": "ssoDebugEnabled",
            "baseName": "ssoDebugEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "ssoUrl",
            "baseName": "ssoUrl",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        }
    ];
    return IdentityProviderUpdate;
}());
exports.IdentityProviderUpdate = IdentityProviderUpdate;
//# sourceMappingURL=IdentityProviderUpdate.js.map

/***/ }),

/***/ 66181:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IdentityProviderView = void 0;
var IdentityProviderView = (function () {
    function IdentityProviderView() {
    }
    IdentityProviderView.getAttributeTypeMap = function () {
        return IdentityProviderView.attributeTypeMap;
    };
    IdentityProviderView.discriminator = undefined;
    IdentityProviderView.attributeTypeMap = [
        {
            "name": "acsUrl",
            "baseName": "acsUrl",
            "type": "string",
            "format": ""
        },
        {
            "name": "associatedDomains",
            "baseName": "associatedDomains",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "associatedOrgs",
            "baseName": "associatedOrgs",
            "type": "Set<ConnectedOrgConfigView>",
            "format": ""
        },
        {
            "name": "audienceUri",
            "baseName": "audienceUri",
            "type": "string",
            "format": ""
        },
        {
            "name": "displayName",
            "baseName": "displayName",
            "type": "string",
            "format": ""
        },
        {
            "name": "issuerUri",
            "baseName": "issuerUri",
            "type": "string",
            "format": ""
        },
        {
            "name": "oktaIdpId",
            "baseName": "oktaIdpId",
            "type": "string",
            "format": ""
        },
        {
            "name": "pemFileInfo",
            "baseName": "pemFileInfo",
            "type": "PemFileInfoView",
            "format": ""
        },
        {
            "name": "requestBinding",
            "baseName": "requestBinding",
            "type": "string",
            "format": ""
        },
        {
            "name": "responseSignatureAlgorithm",
            "baseName": "responseSignatureAlgorithm",
            "type": "string",
            "format": ""
        },
        {
            "name": "ssoDebugEnabled",
            "baseName": "ssoDebugEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "ssoUrl",
            "baseName": "ssoUrl",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        }
    ];
    return IdentityProviderView;
}());
exports.IdentityProviderView = IdentityProviderView;
//# sourceMappingURL=IdentityProviderView.js.map

/***/ }),

/***/ 15397:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IndexOptions = void 0;
var IndexOptions = (function () {
    function IndexOptions() {
    }
    IndexOptions.getAttributeTypeMap = function () {
        return IndexOptions.attributeTypeMap;
    };
    IndexOptions.discriminator = undefined;
    IndexOptions.attributeTypeMap = [
        {
            "name": "_2dsphereIndexVersion",
            "baseName": "2dsphereIndexVersion",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "background",
            "baseName": "background",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "bits",
            "baseName": "bits",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "bucketSize",
            "baseName": "bucketSize",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "defaultLanguage",
            "baseName": "default_language",
            "type": "string",
            "format": ""
        },
        {
            "name": "expireAfterSeconds",
            "baseName": "expireAfterSeconds",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "hidden",
            "baseName": "hidden",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "languageOverride",
            "baseName": "language_override",
            "type": "string",
            "format": ""
        },
        {
            "name": "max",
            "baseName": "max",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "min",
            "baseName": "min",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "partialFilterExpression",
            "baseName": "partialFilterExpression",
            "type": "{ [key: string]: any; }",
            "format": ""
        },
        {
            "name": "sparse",
            "baseName": "sparse",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "storageEngine",
            "baseName": "storageEngine",
            "type": "{ [key: string]: any; }",
            "format": ""
        },
        {
            "name": "textIndexVersion",
            "baseName": "textIndexVersion",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "unique",
            "baseName": "unique",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "weights",
            "baseName": "weights",
            "type": "{ [key: string]: any; }",
            "format": ""
        }
    ];
    return IndexOptions;
}());
exports.IndexOptions = IndexOptions;
//# sourceMappingURL=IndexOptions.js.map

/***/ }),

/***/ 65240:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IngestionPipeline = void 0;
var IngestionPipeline = (function () {
    function IngestionPipeline() {
    }
    IngestionPipeline.getAttributeTypeMap = function () {
        return IngestionPipeline.attributeTypeMap;
    };
    IngestionPipeline.discriminator = undefined;
    IngestionPipeline.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "createdDate",
            "baseName": "createdDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "lastUpdatedDate",
            "baseName": "lastUpdatedDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "sink",
            "baseName": "sink",
            "type": "IngestionSink",
            "format": ""
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "IngestionSource",
            "format": ""
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string",
            "format": ""
        },
        {
            "name": "transformations",
            "baseName": "transformations",
            "type": "Array<FieldTransformation>",
            "format": ""
        }
    ];
    return IngestionPipeline;
}());
exports.IngestionPipeline = IngestionPipeline;
//# sourceMappingURL=IngestionPipeline.js.map

/***/ }),

/***/ 13298:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IngestionPipelineRun = void 0;
var IngestionPipelineRun = (function () {
    function IngestionPipelineRun() {
    }
    IngestionPipelineRun.getAttributeTypeMap = function () {
        return IngestionPipelineRun.attributeTypeMap;
    };
    IngestionPipelineRun.discriminator = undefined;
    IngestionPipelineRun.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "backupFrequencyType",
            "baseName": "backupFrequencyType",
            "type": "string",
            "format": ""
        },
        {
            "name": "createdDate",
            "baseName": "createdDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "datasetName",
            "baseName": "datasetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "lastUpdatedDate",
            "baseName": "lastUpdatedDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "phase",
            "baseName": "phase",
            "type": "string",
            "format": ""
        },
        {
            "name": "pipelineId",
            "baseName": "pipelineId",
            "type": "string",
            "format": ""
        },
        {
            "name": "snapshotId",
            "baseName": "snapshotId",
            "type": "string",
            "format": ""
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string",
            "format": ""
        },
        {
            "name": "stats",
            "baseName": "stats",
            "type": "PipelineRunStats",
            "format": ""
        }
    ];
    return IngestionPipelineRun;
}());
exports.IngestionPipelineRun = IngestionPipelineRun;
//# sourceMappingURL=IngestionPipelineRun.js.map

/***/ }),

/***/ 63698:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IngestionSink = void 0;
var IngestionSink = (function () {
    function IngestionSink() {
    }
    IngestionSink.getAttributeTypeMap = function () {
        return IngestionSink.attributeTypeMap;
    };
    IngestionSink.discriminator = "type";
    IngestionSink.attributeTypeMap = [
        {
            "name": "metadataProvider",
            "baseName": "metadataProvider",
            "type": "string",
            "format": ""
        },
        {
            "name": "metadataRegion",
            "baseName": "metadataRegion",
            "type": "string",
            "format": ""
        },
        {
            "name": "partitionFields",
            "baseName": "partitionFields",
            "type": "Array<PartitionField>",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return IngestionSink;
}());
exports.IngestionSink = IngestionSink;
//# sourceMappingURL=IngestionSink.js.map

/***/ }),

/***/ 28145:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IngestionSource = void 0;
var IngestionSource = (function () {
    function IngestionSource() {
    }
    IngestionSource.getAttributeTypeMap = function () {
        return IngestionSource.attributeTypeMap;
    };
    IngestionSource.discriminator = "type";
    IngestionSource.attributeTypeMap = [
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "collectionName",
            "baseName": "collectionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "databaseName",
            "baseName": "databaseName",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "policyItemId",
            "baseName": "policyItemId",
            "type": "string",
            "format": ""
        }
    ];
    return IngestionSource;
}());
exports.IngestionSource = IngestionSource;
//# sourceMappingURL=IngestionSource.js.map

/***/ }),

/***/ 38470:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InheritedRole = void 0;
var InheritedRole = (function () {
    function InheritedRole() {
    }
    InheritedRole.getAttributeTypeMap = function () {
        return InheritedRole.attributeTypeMap;
    };
    InheritedRole.discriminator = undefined;
    InheritedRole.attributeTypeMap = [
        {
            "name": "db",
            "baseName": "db",
            "type": "string",
            "format": ""
        },
        {
            "name": "role",
            "baseName": "role",
            "type": "string",
            "format": ""
        }
    ];
    return InheritedRole;
}());
exports.InheritedRole = InheritedRole;
//# sourceMappingURL=InheritedRole.js.map

/***/ }),

/***/ 39783:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=InstanceSize.js.map

/***/ }),

/***/ 7223:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IntegrationViewForNdsGroup = void 0;
var IntegrationViewForNdsGroup = (function () {
    function IntegrationViewForNdsGroup() {
    }
    IntegrationViewForNdsGroup.getAttributeTypeMap = function () {
        return IntegrationViewForNdsGroup.attributeTypeMap;
    };
    IntegrationViewForNdsGroup.discriminator = undefined;
    IntegrationViewForNdsGroup.attributeTypeMap = [
        {
            "name": "apiKey",
            "baseName": "apiKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "region",
            "baseName": "region",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "microsoftTeamsWebhookUrl",
            "baseName": "microsoftTeamsWebhookUrl",
            "type": "string",
            "format": ""
        },
        {
            "name": "accountId",
            "baseName": "accountId",
            "type": "string",
            "format": ""
        },
        {
            "name": "licenseKey",
            "baseName": "licenseKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "readToken",
            "baseName": "readToken",
            "type": "string",
            "format": ""
        },
        {
            "name": "writeToken",
            "baseName": "writeToken",
            "type": "string",
            "format": ""
        },
        {
            "name": "serviceKey",
            "baseName": "serviceKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "listenAddress",
            "baseName": "listenAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string",
            "format": ""
        },
        {
            "name": "rateLimitInterval",
            "baseName": "rateLimitInterval",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "scheme",
            "baseName": "scheme",
            "type": "string",
            "format": ""
        },
        {
            "name": "serviceDiscovery",
            "baseName": "serviceDiscovery",
            "type": "string",
            "format": ""
        },
        {
            "name": "tlsPemPath",
            "baseName": "tlsPemPath",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": ""
        },
        {
            "name": "apiToken",
            "baseName": "apiToken",
            "type": "string",
            "format": ""
        },
        {
            "name": "channelName",
            "baseName": "channelName",
            "type": "string",
            "format": ""
        },
        {
            "name": "teamName",
            "baseName": "teamName",
            "type": "string",
            "format": ""
        },
        {
            "name": "routingKey",
            "baseName": "routingKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "secret",
            "baseName": "secret",
            "type": "string",
            "format": ""
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string",
            "format": ""
        }
    ];
    return IntegrationViewForNdsGroup;
}());
exports.IntegrationViewForNdsGroup = IntegrationViewForNdsGroup;
//# sourceMappingURL=IntegrationViewForNdsGroup.js.map

/***/ }),

/***/ 99302:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Label = void 0;
var Label = (function () {
    function Label() {
    }
    Label.getAttributeTypeMap = function () {
        return Label.attributeTypeMap;
    };
    Label.discriminator = undefined;
    Label.attributeTypeMap = [
        {
            "name": "key",
            "baseName": "key",
            "type": "string",
            "format": ""
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string",
            "format": ""
        }
    ];
    return Label;
}());
exports.Label = Label;
//# sourceMappingURL=Label.js.map

/***/ }),

/***/ 30489:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LegacyClusterDescription = void 0;
var LegacyClusterDescription = (function () {
    function LegacyClusterDescription() {
    }
    LegacyClusterDescription.getAttributeTypeMap = function () {
        return LegacyClusterDescription.attributeTypeMap;
    };
    LegacyClusterDescription.discriminator = undefined;
    LegacyClusterDescription.attributeTypeMap = [
        {
            "name": "autoScaling",
            "baseName": "autoScaling",
            "type": "AutoScaling",
            "format": ""
        },
        {
            "name": "backupEnabled",
            "baseName": "backupEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "biConnector",
            "baseName": "biConnector",
            "type": "BiConnector",
            "format": ""
        },
        {
            "name": "clusterType",
            "baseName": "clusterType",
            "type": "string",
            "format": ""
        },
        {
            "name": "connectionStrings",
            "baseName": "connectionStrings",
            "type": "ClusterDescriptionConnectionStrings",
            "format": ""
        },
        {
            "name": "createDate",
            "baseName": "createDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "diskSizeGB",
            "baseName": "diskSizeGB",
            "type": "number",
            "format": "double"
        },
        {
            "name": "encryptionAtRestProvider",
            "baseName": "encryptionAtRestProvider",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "labels",
            "baseName": "labels",
            "type": "Array<NDSLabel>",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "mongoDBMajorVersion",
            "baseName": "mongoDBMajorVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "mongoDBVersion",
            "baseName": "mongoDBVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "mongoURI",
            "baseName": "mongoURI",
            "type": "string",
            "format": ""
        },
        {
            "name": "mongoURIUpdated",
            "baseName": "mongoURIUpdated",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "mongoURIWithOptions",
            "baseName": "mongoURIWithOptions",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "numShards",
            "baseName": "numShards",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "paused",
            "baseName": "paused",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "pitEnabled",
            "baseName": "pitEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "providerBackupEnabled",
            "baseName": "providerBackupEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "providerSettings",
            "baseName": "providerSettings",
            "type": "ClusterProviderSettings",
            "format": ""
        },
        {
            "name": "replicationFactor",
            "baseName": "replicationFactor",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "replicationSpec",
            "baseName": "replicationSpec",
            "type": "{ [key: string]: RegionSpec; }",
            "format": ""
        },
        {
            "name": "replicationSpecs",
            "baseName": "replicationSpecs",
            "type": "Array<LegacyReplicationSpec>",
            "format": ""
        },
        {
            "name": "rootCertType",
            "baseName": "rootCertType",
            "type": "string",
            "format": ""
        },
        {
            "name": "srvAddress",
            "baseName": "srvAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "stateName",
            "baseName": "stateName",
            "type": "string",
            "format": ""
        },
        {
            "name": "terminationProtectionEnabled",
            "baseName": "terminationProtectionEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "versionReleaseSystem",
            "baseName": "versionReleaseSystem",
            "type": "string",
            "format": ""
        }
    ];
    return LegacyClusterDescription;
}());
exports.LegacyClusterDescription = LegacyClusterDescription;
//# sourceMappingURL=LegacyClusterDescription.js.map

/***/ }),

/***/ 98195:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LegacyReplicationSpec = void 0;
var LegacyReplicationSpec = (function () {
    function LegacyReplicationSpec() {
    }
    LegacyReplicationSpec.getAttributeTypeMap = function () {
        return LegacyReplicationSpec.attributeTypeMap;
    };
    LegacyReplicationSpec.discriminator = undefined;
    LegacyReplicationSpec.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "numShards",
            "baseName": "numShards",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "regionsConfig",
            "baseName": "regionsConfig",
            "type": "{ [key: string]: RegionSpec; }",
            "format": ""
        },
        {
            "name": "zoneName",
            "baseName": "zoneName",
            "type": "string",
            "format": ""
        }
    ];
    return LegacyReplicationSpec;
}());
exports.LegacyReplicationSpec = LegacyReplicationSpec;
//# sourceMappingURL=LegacyReplicationSpec.js.map

/***/ }),

/***/ 82373:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LessThanDaysThresholdView = void 0;
var LessThanDaysThresholdView = (function () {
    function LessThanDaysThresholdView() {
    }
    LessThanDaysThresholdView.getAttributeTypeMap = function () {
        return LessThanDaysThresholdView.attributeTypeMap;
    };
    LessThanDaysThresholdView.discriminator = undefined;
    LessThanDaysThresholdView.attributeTypeMap = [
        {
            "name": "operator",
            "baseName": "operator",
            "type": "string",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "string",
            "format": ""
        }
    ];
    return LessThanDaysThresholdView;
}());
exports.LessThanDaysThresholdView = LessThanDaysThresholdView;
//# sourceMappingURL=LessThanDaysThresholdView.js.map

/***/ }),

/***/ 89768:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LessThanTimeThresholdAlertConfigViewForNdsGroup = void 0;
var LessThanTimeThresholdAlertConfigViewForNdsGroup = (function () {
    function LessThanTimeThresholdAlertConfigViewForNdsGroup() {
    }
    LessThanTimeThresholdAlertConfigViewForNdsGroup.getAttributeTypeMap = function () {
        return LessThanTimeThresholdAlertConfigViewForNdsGroup.attributeTypeMap;
    };
    LessThanTimeThresholdAlertConfigViewForNdsGroup.discriminator = undefined;
    LessThanTimeThresholdAlertConfigViewForNdsGroup.attributeTypeMap = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "ReplicaSetEventTypeViewForNdsGroupAlertableWithThreshold",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "matchers",
            "baseName": "matchers",
            "type": "Array<ReplicaSetMatcherView>",
            "format": ""
        },
        {
            "name": "notifications",
            "baseName": "notifications",
            "type": "Array<NotificationViewForNdsGroup>",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "LessThanTimeThresholdView",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return LessThanTimeThresholdAlertConfigViewForNdsGroup;
}());
exports.LessThanTimeThresholdAlertConfigViewForNdsGroup = LessThanTimeThresholdAlertConfigViewForNdsGroup;
//# sourceMappingURL=LessThanTimeThresholdAlertConfigViewForNdsGroup.js.map

/***/ }),

/***/ 39700:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LessThanTimeThresholdView = void 0;
var LessThanTimeThresholdView = (function () {
    function LessThanTimeThresholdView() {
    }
    LessThanTimeThresholdView.getAttributeTypeMap = function () {
        return LessThanTimeThresholdView.attributeTypeMap;
    };
    LessThanTimeThresholdView.discriminator = undefined;
    LessThanTimeThresholdView.attributeTypeMap = [
        {
            "name": "operator",
            "baseName": "operator",
            "type": "string",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "TimeMetricUnits",
            "format": ""
        }
    ];
    return LessThanTimeThresholdView;
}());
exports.LessThanTimeThresholdView = LessThanTimeThresholdView;
//# sourceMappingURL=LessThanTimeThresholdView.js.map

/***/ }),

/***/ 13667:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Link = void 0;
var Link = (function () {
    function Link() {
    }
    Link.getAttributeTypeMap = function () {
        return Link.attributeTypeMap;
    };
    Link.discriminator = undefined;
    Link.attributeTypeMap = [
        {
            "name": "href",
            "baseName": "href",
            "type": "string",
            "format": ""
        },
        {
            "name": "rel",
            "baseName": "rel",
            "type": "string",
            "format": ""
        }
    ];
    return Link;
}());
exports.Link = Link;
//# sourceMappingURL=Link.js.map

/***/ }),

/***/ 66315:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LinkAtlas = void 0;
var LinkAtlas = (function () {
    function LinkAtlas() {
    }
    LinkAtlas.getAttributeTypeMap = function () {
        return LinkAtlas.attributeTypeMap;
    };
    LinkAtlas.discriminator = undefined;
    LinkAtlas.attributeTypeMap = [
        {
            "name": "href",
            "baseName": "href",
            "type": "string",
            "format": ""
        },
        {
            "name": "rel",
            "baseName": "rel",
            "type": "string",
            "format": ""
        }
    ];
    return LinkAtlas;
}());
exports.LinkAtlas = LinkAtlas;
//# sourceMappingURL=LinkAtlas.js.map

/***/ }),

/***/ 92876:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListPeeringConnections200Response = void 0;
var ListPeeringConnections200Response = (function () {
    function ListPeeringConnections200Response() {
    }
    ListPeeringConnections200Response.getAttributeTypeMap = function () {
        return ListPeeringConnections200Response.attributeTypeMap;
    };
    ListPeeringConnections200Response.discriminator = undefined;
    ListPeeringConnections200Response.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<GCPPeerVpc>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return ListPeeringConnections200Response;
}());
exports.ListPeeringConnections200Response = ListPeeringConnections200Response;
//# sourceMappingURL=ListPeeringConnections200Response.js.map

/***/ }),

/***/ 24969:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiveMigrationRequestView = void 0;
var LiveMigrationRequestView = (function () {
    function LiveMigrationRequestView() {
    }
    LiveMigrationRequestView.getAttributeTypeMap = function () {
        return LiveMigrationRequestView.attributeTypeMap;
    };
    LiveMigrationRequestView.discriminator = undefined;
    LiveMigrationRequestView.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "destination",
            "baseName": "destination",
            "type": "Destination",
            "format": ""
        },
        {
            "name": "dropEnabled",
            "baseName": "dropEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "migrationHosts",
            "baseName": "migrationHosts",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "Source",
            "format": ""
        }
    ];
    return LiveMigrationRequestView;
}());
exports.LiveMigrationRequestView = LiveMigrationRequestView;
//# sourceMappingURL=LiveMigrationRequestView.js.map

/***/ }),

/***/ 60011:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiveMigrationResponseView = void 0;
var LiveMigrationResponseView = (function () {
    function LiveMigrationResponseView() {
    }
    LiveMigrationResponseView.getAttributeTypeMap = function () {
        return LiveMigrationResponseView.attributeTypeMap;
    };
    LiveMigrationResponseView.discriminator = undefined;
    LiveMigrationResponseView.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "lagTimeSeconds",
            "baseName": "lagTimeSeconds",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "migrationHosts",
            "baseName": "migrationHosts",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "readyForCutover",
            "baseName": "readyForCutover",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        }
    ];
    return LiveMigrationResponseView;
}());
exports.LiveMigrationResponseView = LiveMigrationResponseView;
//# sourceMappingURL=LiveMigrationResponseView.js.map

/***/ }),

/***/ 83063:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ManagedNamespaceView = void 0;
var ManagedNamespaceView = (function () {
    function ManagedNamespaceView() {
    }
    ManagedNamespaceView.getAttributeTypeMap = function () {
        return ManagedNamespaceView.attributeTypeMap;
    };
    ManagedNamespaceView.discriminator = undefined;
    ManagedNamespaceView.attributeTypeMap = [
        {
            "name": "collection",
            "baseName": "collection",
            "type": "string",
            "format": ""
        },
        {
            "name": "customShardKey",
            "baseName": "customShardKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "db",
            "baseName": "db",
            "type": "string",
            "format": ""
        },
        {
            "name": "isCustomShardKeyHashed",
            "baseName": "isCustomShardKeyHashed",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isShardKeyUnique",
            "baseName": "isShardKeyUnique",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "numInitialChunks",
            "baseName": "numInitialChunks",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "presplitHashedZones",
            "baseName": "presplitHashedZones",
            "type": "boolean",
            "format": ""
        }
    ];
    return ManagedNamespaceView;
}());
exports.ManagedNamespaceView = ManagedNamespaceView;
//# sourceMappingURL=ManagedNamespaceView.js.map

/***/ }),

/***/ 69320:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ManagedNamespaces = void 0;
var ManagedNamespaces = (function () {
    function ManagedNamespaces() {
    }
    ManagedNamespaces.getAttributeTypeMap = function () {
        return ManagedNamespaces.attributeTypeMap;
    };
    ManagedNamespaces.discriminator = undefined;
    ManagedNamespaces.attributeTypeMap = [
        {
            "name": "collection",
            "baseName": "collection",
            "type": "string",
            "format": ""
        },
        {
            "name": "customShardKey",
            "baseName": "customShardKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "db",
            "baseName": "db",
            "type": "string",
            "format": ""
        },
        {
            "name": "isCustomShardKeyHashed",
            "baseName": "isCustomShardKeyHashed",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isShardKeyUnique",
            "baseName": "isShardKeyUnique",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "numInitialChunks",
            "baseName": "numInitialChunks",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "presplitHashedZones",
            "baseName": "presplitHashedZones",
            "type": "boolean",
            "format": ""
        }
    ];
    return ManagedNamespaces;
}());
exports.ManagedNamespaces = ManagedNamespaces;
//# sourceMappingURL=ManagedNamespaces.js.map

/***/ }),

/***/ 21200:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=MatcherFieldView.js.map

/***/ }),

/***/ 48667:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=MatcherHostType.js.map

/***/ }),

/***/ 26129:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MatcherView = void 0;
var MatcherView = (function () {
    function MatcherView() {
    }
    MatcherView.getAttributeTypeMap = function () {
        return MatcherView.attributeTypeMap;
    };
    MatcherView.discriminator = undefined;
    MatcherView.attributeTypeMap = [
        {
            "name": "fieldName",
            "baseName": "fieldName",
            "type": "string",
            "format": ""
        },
        {
            "name": "operator",
            "baseName": "operator",
            "type": "string",
            "format": ""
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string",
            "format": ""
        }
    ];
    return MatcherView;
}());
exports.MatcherView = MatcherView;
//# sourceMappingURL=MatcherView.js.map

/***/ }),

/***/ 70258:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MicrosoftTeamsNotificationView = void 0;
var MicrosoftTeamsNotificationView = (function () {
    function MicrosoftTeamsNotificationView() {
    }
    MicrosoftTeamsNotificationView.getAttributeTypeMap = function () {
        return MicrosoftTeamsNotificationView.attributeTypeMap;
    };
    MicrosoftTeamsNotificationView.discriminator = undefined;
    MicrosoftTeamsNotificationView.attributeTypeMap = [
        {
            "name": "delayMin",
            "baseName": "delayMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "intervalMin",
            "baseName": "intervalMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "microsoftTeamsWebhookUrl",
            "baseName": "microsoftTeamsWebhookUrl",
            "type": "string",
            "format": ""
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        }
    ];
    return MicrosoftTeamsNotificationView;
}());
exports.MicrosoftTeamsNotificationView = MicrosoftTeamsNotificationView;
//# sourceMappingURL=MicrosoftTeamsNotificationView.js.map

/***/ }),

/***/ 63550:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MonthlyScheduleView = void 0;
var MonthlyScheduleView = (function () {
    function MonthlyScheduleView() {
    }
    MonthlyScheduleView.getAttributeTypeMap = function () {
        return MonthlyScheduleView.attributeTypeMap;
    };
    MonthlyScheduleView.discriminator = undefined;
    MonthlyScheduleView.attributeTypeMap = [
        {
            "name": "dayOfMonth",
            "baseName": "dayOfMonth",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "endHour",
            "baseName": "endHour",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "endMinute",
            "baseName": "endMinute",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "startHour",
            "baseName": "startHour",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "startMinute",
            "baseName": "startMinute",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return MonthlyScheduleView;
}());
exports.MonthlyScheduleView = MonthlyScheduleView;
//# sourceMappingURL=MonthlyScheduleView.js.map

/***/ }),

/***/ 25211:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=NDSAuditTypeViewForNdsGroup.js.map

/***/ }),

/***/ 72237:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=NDSAuditTypeViewForOrg.js.map

/***/ }),

/***/ 59466:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NDSAuditViewForNdsGroup = void 0;
var NDSAuditViewForNdsGroup = (function () {
    function NDSAuditViewForNdsGroup() {
    }
    NDSAuditViewForNdsGroup.getAttributeTypeMap = function () {
        return NDSAuditViewForNdsGroup.attributeTypeMap;
    };
    NDSAuditViewForNdsGroup.discriminator = undefined;
    NDSAuditViewForNdsGroup.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "NDSAuditTypeViewForNdsGroup",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        },
        {
            "name": "whitelistEntry",
            "baseName": "whitelistEntry",
            "type": "string",
            "format": ""
        }
    ];
    return NDSAuditViewForNdsGroup;
}());
exports.NDSAuditViewForNdsGroup = NDSAuditViewForNdsGroup;
//# sourceMappingURL=NDSAuditViewForNdsGroup.js.map

/***/ }),

/***/ 31234:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NDSAuditViewForOrg = void 0;
var NDSAuditViewForOrg = (function () {
    function NDSAuditViewForOrg() {
    }
    NDSAuditViewForOrg.getAttributeTypeMap = function () {
        return NDSAuditViewForOrg.attributeTypeMap;
    };
    NDSAuditViewForOrg.discriminator = undefined;
    NDSAuditViewForOrg.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "NDSAuditTypeViewForOrg",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        },
        {
            "name": "whitelistEntry",
            "baseName": "whitelistEntry",
            "type": "string",
            "format": ""
        }
    ];
    return NDSAuditViewForOrg;
}());
exports.NDSAuditViewForOrg = NDSAuditViewForOrg;
//# sourceMappingURL=NDSAuditViewForOrg.js.map

/***/ }),

/***/ 95052:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=NDSAutoScalingAuditTypeViewForNdsGroup.js.map

/***/ }),

/***/ 1362:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NDSAutoScalingAuditViewForNdsGroup = void 0;
var NDSAutoScalingAuditViewForNdsGroup = (function () {
    function NDSAutoScalingAuditViewForNdsGroup() {
    }
    NDSAutoScalingAuditViewForNdsGroup.getAttributeTypeMap = function () {
        return NDSAutoScalingAuditViewForNdsGroup.attributeTypeMap;
    };
    NDSAutoScalingAuditViewForNdsGroup.discriminator = undefined;
    NDSAutoScalingAuditViewForNdsGroup.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "NDSAutoScalingAuditTypeViewForNdsGroup",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return NDSAutoScalingAuditViewForNdsGroup;
}());
exports.NDSAutoScalingAuditViewForNdsGroup = NDSAutoScalingAuditViewForNdsGroup;
//# sourceMappingURL=NDSAutoScalingAuditViewForNdsGroup.js.map

/***/ }),

/***/ 2787:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NDSLDAP = void 0;
var NDSLDAP = (function () {
    function NDSLDAP() {
    }
    NDSLDAP.getAttributeTypeMap = function () {
        return NDSLDAP.attributeTypeMap;
    };
    NDSLDAP.discriminator = undefined;
    NDSLDAP.attributeTypeMap = [
        {
            "name": "authenticationEnabled",
            "baseName": "authenticationEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "authorizationEnabled",
            "baseName": "authorizationEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "authzQueryTemplate",
            "baseName": "authzQueryTemplate",
            "type": "string",
            "format": ""
        },
        {
            "name": "bindPassword",
            "baseName": "bindPassword",
            "type": "string",
            "format": ""
        },
        {
            "name": "bindUsername",
            "baseName": "bindUsername",
            "type": "string",
            "format": ""
        },
        {
            "name": "caCertificate",
            "baseName": "caCertificate",
            "type": "string",
            "format": ""
        },
        {
            "name": "hostname",
            "baseName": "hostname",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "port",
            "baseName": "port",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "userToDNMapping",
            "baseName": "userToDNMapping",
            "type": "Array<NDSUserToDNMapping>",
            "format": ""
        }
    ];
    return NDSLDAP;
}());
exports.NDSLDAP = NDSLDAP;
//# sourceMappingURL=NDSLDAP.js.map

/***/ }),

/***/ 6232:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NDSLDAPVerifyConnectivityJobRequest = void 0;
var NDSLDAPVerifyConnectivityJobRequest = (function () {
    function NDSLDAPVerifyConnectivityJobRequest() {
    }
    NDSLDAPVerifyConnectivityJobRequest.getAttributeTypeMap = function () {
        return NDSLDAPVerifyConnectivityJobRequest.attributeTypeMap;
    };
    NDSLDAPVerifyConnectivityJobRequest.discriminator = undefined;
    NDSLDAPVerifyConnectivityJobRequest.attributeTypeMap = [
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "request",
            "baseName": "request",
            "type": "NDSLDAPVerifyConnectivityJobRequestParams",
            "format": ""
        },
        {
            "name": "requestId",
            "baseName": "requestId",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "validations",
            "baseName": "validations",
            "type": "Array<NDSLDAPVerifyConnectivityJobRequestValidation>",
            "format": ""
        }
    ];
    return NDSLDAPVerifyConnectivityJobRequest;
}());
exports.NDSLDAPVerifyConnectivityJobRequest = NDSLDAPVerifyConnectivityJobRequest;
//# sourceMappingURL=NDSLDAPVerifyConnectivityJobRequest.js.map

/***/ }),

/***/ 91565:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NDSLDAPVerifyConnectivityJobRequestParams = void 0;
var NDSLDAPVerifyConnectivityJobRequestParams = (function () {
    function NDSLDAPVerifyConnectivityJobRequestParams() {
    }
    NDSLDAPVerifyConnectivityJobRequestParams.getAttributeTypeMap = function () {
        return NDSLDAPVerifyConnectivityJobRequestParams.attributeTypeMap;
    };
    NDSLDAPVerifyConnectivityJobRequestParams.discriminator = undefined;
    NDSLDAPVerifyConnectivityJobRequestParams.attributeTypeMap = [
        {
            "name": "authzQueryTemplate",
            "baseName": "authzQueryTemplate",
            "type": "string",
            "format": ""
        },
        {
            "name": "bindPassword",
            "baseName": "bindPassword",
            "type": "string",
            "format": ""
        },
        {
            "name": "bindUsername",
            "baseName": "bindUsername",
            "type": "string",
            "format": ""
        },
        {
            "name": "caCertificate",
            "baseName": "caCertificate",
            "type": "string",
            "format": ""
        },
        {
            "name": "hostname",
            "baseName": "hostname",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "port",
            "baseName": "port",
            "type": "number",
            "format": "int32"
        }
    ];
    return NDSLDAPVerifyConnectivityJobRequestParams;
}());
exports.NDSLDAPVerifyConnectivityJobRequestParams = NDSLDAPVerifyConnectivityJobRequestParams;
//# sourceMappingURL=NDSLDAPVerifyConnectivityJobRequestParams.js.map

/***/ }),

/***/ 55669:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NDSLDAPVerifyConnectivityJobRequestValidation = void 0;
var NDSLDAPVerifyConnectivityJobRequestValidation = (function () {
    function NDSLDAPVerifyConnectivityJobRequestValidation() {
    }
    NDSLDAPVerifyConnectivityJobRequestValidation.getAttributeTypeMap = function () {
        return NDSLDAPVerifyConnectivityJobRequestValidation.attributeTypeMap;
    };
    NDSLDAPVerifyConnectivityJobRequestValidation.discriminator = undefined;
    NDSLDAPVerifyConnectivityJobRequestValidation.attributeTypeMap = [
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "validationType",
            "baseName": "validationType",
            "type": "string",
            "format": ""
        }
    ];
    return NDSLDAPVerifyConnectivityJobRequestValidation;
}());
exports.NDSLDAPVerifyConnectivityJobRequestValidation = NDSLDAPVerifyConnectivityJobRequestValidation;
//# sourceMappingURL=NDSLDAPVerifyConnectivityJobRequestValidation.js.map

/***/ }),

/***/ 40477:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NDSLabel = void 0;
var NDSLabel = (function () {
    function NDSLabel() {
    }
    NDSLabel.getAttributeTypeMap = function () {
        return NDSLabel.attributeTypeMap;
    };
    NDSLabel.discriminator = undefined;
    NDSLabel.attributeTypeMap = [
        {
            "name": "key",
            "baseName": "key",
            "type": "string",
            "format": ""
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string",
            "format": ""
        }
    ];
    return NDSLabel;
}());
exports.NDSLabel = NDSLabel;
//# sourceMappingURL=NDSLabel.js.map

/***/ }),

/***/ 39724:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NDSNotificationView = void 0;
var NDSNotificationView = (function () {
    function NDSNotificationView() {
    }
    NDSNotificationView.getAttributeTypeMap = function () {
        return NDSNotificationView.attributeTypeMap;
    };
    NDSNotificationView.discriminator = undefined;
    NDSNotificationView.attributeTypeMap = [
        {
            "name": "delayMin",
            "baseName": "delayMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "intervalMin",
            "baseName": "intervalMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "severity",
            "baseName": "severity",
            "type": "string",
            "format": ""
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        }
    ];
    return NDSNotificationView;
}());
exports.NDSNotificationView = NDSNotificationView;
//# sourceMappingURL=NDSNotificationView.js.map

/***/ }),

/***/ 75681:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=NDSServerlessInstanceAuditTypeView.js.map

/***/ }),

/***/ 47775:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NDSServerlessInstanceAuditView = void 0;
var NDSServerlessInstanceAuditView = (function () {
    function NDSServerlessInstanceAuditView() {
    }
    NDSServerlessInstanceAuditView.getAttributeTypeMap = function () {
        return NDSServerlessInstanceAuditView.attributeTypeMap;
    };
    NDSServerlessInstanceAuditView.discriminator = undefined;
    NDSServerlessInstanceAuditView.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "NDSServerlessInstanceAuditTypeView",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return NDSServerlessInstanceAuditView;
}());
exports.NDSServerlessInstanceAuditView = NDSServerlessInstanceAuditView;
//# sourceMappingURL=NDSServerlessInstanceAuditView.js.map

/***/ }),

/***/ 7470:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=NDSTenantEndpointAuditTypeView.js.map

/***/ }),

/***/ 76464:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NDSTenantEndpointAuditView = void 0;
var NDSTenantEndpointAuditView = (function () {
    function NDSTenantEndpointAuditView() {
    }
    NDSTenantEndpointAuditView.getAttributeTypeMap = function () {
        return NDSTenantEndpointAuditView.attributeTypeMap;
    };
    NDSTenantEndpointAuditView.discriminator = undefined;
    NDSTenantEndpointAuditView.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "endpointId",
            "baseName": "endpointId",
            "type": "string",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "NDSTenantEndpointAuditTypeView",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerEndpointId",
            "baseName": "providerEndpointId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return NDSTenantEndpointAuditView;
}());
exports.NDSTenantEndpointAuditView = NDSTenantEndpointAuditView;
//# sourceMappingURL=NDSTenantEndpointAuditView.js.map

/***/ }),

/***/ 46878:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NDSUserToDNMapping = void 0;
var NDSUserToDNMapping = (function () {
    function NDSUserToDNMapping() {
    }
    NDSUserToDNMapping.getAttributeTypeMap = function () {
        return NDSUserToDNMapping.attributeTypeMap;
    };
    NDSUserToDNMapping.discriminator = undefined;
    NDSUserToDNMapping.attributeTypeMap = [
        {
            "name": "ldapQuery",
            "baseName": "ldapQuery",
            "type": "string",
            "format": ""
        },
        {
            "name": "match",
            "baseName": "match",
            "type": "string",
            "format": ""
        },
        {
            "name": "substitution",
            "baseName": "substitution",
            "type": "string",
            "format": ""
        }
    ];
    return NDSUserToDNMapping;
}());
exports.NDSUserToDNMapping = NDSUserToDNMapping;
//# sourceMappingURL=NDSUserToDNMapping.js.map

/***/ }),

/***/ 46327:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NDSX509UserAuthenticationAlertConfigViewForNdsGroup = void 0;
var NDSX509UserAuthenticationAlertConfigViewForNdsGroup = (function () {
    function NDSX509UserAuthenticationAlertConfigViewForNdsGroup() {
    }
    NDSX509UserAuthenticationAlertConfigViewForNdsGroup.getAttributeTypeMap = function () {
        return NDSX509UserAuthenticationAlertConfigViewForNdsGroup.attributeTypeMap;
    };
    NDSX509UserAuthenticationAlertConfigViewForNdsGroup.discriminator = undefined;
    NDSX509UserAuthenticationAlertConfigViewForNdsGroup.attributeTypeMap = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "NDSX509UserAuthenticationEventTypeViewAlertable",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "matchers",
            "baseName": "matchers",
            "type": "Array<MatcherView>",
            "format": ""
        },
        {
            "name": "notifications",
            "baseName": "notifications",
            "type": "Array<NotificationViewForNdsGroup>",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "LessThanDaysThresholdView",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return NDSX509UserAuthenticationAlertConfigViewForNdsGroup;
}());
exports.NDSX509UserAuthenticationAlertConfigViewForNdsGroup = NDSX509UserAuthenticationAlertConfigViewForNdsGroup;
//# sourceMappingURL=NDSX509UserAuthenticationAlertConfigViewForNdsGroup.js.map

/***/ }),

/***/ 799:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=NDSX509UserAuthenticationEventTypeViewAlertable.js.map

/***/ }),

/***/ 61046:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NetworkPermissionEntry = void 0;
var NetworkPermissionEntry = (function () {
    function NetworkPermissionEntry() {
    }
    NetworkPermissionEntry.getAttributeTypeMap = function () {
        return NetworkPermissionEntry.attributeTypeMap;
    };
    NetworkPermissionEntry.discriminator = undefined;
    NetworkPermissionEntry.attributeTypeMap = [
        {
            "name": "awsSecurityGroup",
            "baseName": "awsSecurityGroup",
            "type": "string",
            "format": ""
        },
        {
            "name": "cidrBlock",
            "baseName": "cidrBlock",
            "type": "string",
            "format": ""
        },
        {
            "name": "comment",
            "baseName": "comment",
            "type": "string",
            "format": ""
        },
        {
            "name": "deleteAfterDate",
            "baseName": "deleteAfterDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "ipAddress",
            "baseName": "ipAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        }
    ];
    return NetworkPermissionEntry;
}());
exports.NetworkPermissionEntry = NetworkPermissionEntry;
//# sourceMappingURL=NetworkPermissionEntry.js.map

/***/ }),

/***/ 88181:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NetworkPermissionEntryStatus = void 0;
var NetworkPermissionEntryStatus = (function () {
    function NetworkPermissionEntryStatus() {
    }
    NetworkPermissionEntryStatus.getAttributeTypeMap = function () {
        return NetworkPermissionEntryStatus.attributeTypeMap;
    };
    NetworkPermissionEntryStatus.discriminator = undefined;
    NetworkPermissionEntryStatus.attributeTypeMap = [
        {
            "name": "STATUS",
            "baseName": "STATUS",
            "type": "string",
            "format": ""
        }
    ];
    return NetworkPermissionEntryStatus;
}());
exports.NetworkPermissionEntryStatus = NetworkPermissionEntryStatus;
//# sourceMappingURL=NetworkPermissionEntryStatus.js.map

/***/ }),

/***/ 58032:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NotificationView = void 0;
var NotificationView = (function () {
    function NotificationView() {
    }
    NotificationView.getAttributeTypeMap = function () {
        return NotificationView.attributeTypeMap;
    };
    NotificationView.discriminator = undefined;
    NotificationView.attributeTypeMap = [
        {
            "name": "datadogApiKey",
            "baseName": "datadogApiKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "datadogRegion",
            "baseName": "datadogRegion",
            "type": "string",
            "format": ""
        },
        {
            "name": "delayMin",
            "baseName": "delayMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "intervalMin",
            "baseName": "intervalMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "emailAddress",
            "baseName": "emailAddress",
            "type": "string",
            "format": "email"
        },
        {
            "name": "emailEnabled",
            "baseName": "emailEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "smsEnabled",
            "baseName": "smsEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "notificationToken",
            "baseName": "notificationToken",
            "type": "string",
            "format": ""
        },
        {
            "name": "roomName",
            "baseName": "roomName",
            "type": "string",
            "format": ""
        },
        {
            "name": "microsoftTeamsWebhookUrl",
            "baseName": "microsoftTeamsWebhookUrl",
            "type": "string",
            "format": ""
        },
        {
            "name": "severity",
            "baseName": "severity",
            "type": "string",
            "format": ""
        },
        {
            "name": "opsGenieApiKey",
            "baseName": "opsGenieApiKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "opsGenieRegion",
            "baseName": "opsGenieRegion",
            "type": "string",
            "format": ""
        },
        {
            "name": "region",
            "baseName": "region",
            "type": "string",
            "format": ""
        },
        {
            "name": "serviceKey",
            "baseName": "serviceKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "apiToken",
            "baseName": "apiToken",
            "type": "string",
            "format": ""
        },
        {
            "name": "channelName",
            "baseName": "channelName",
            "type": "string",
            "format": ""
        },
        {
            "name": "mobileNumber",
            "baseName": "mobileNumber",
            "type": "string",
            "format": ""
        },
        {
            "name": "teamId",
            "baseName": "teamId",
            "type": "string",
            "format": ""
        },
        {
            "name": "teamName",
            "baseName": "teamName",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        },
        {
            "name": "victorOpsApiKey",
            "baseName": "victorOpsApiKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "victorOpsRoutingKey",
            "baseName": "victorOpsRoutingKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "webhookSecret",
            "baseName": "webhookSecret",
            "type": "string",
            "format": ""
        },
        {
            "name": "webhookUrl",
            "baseName": "webhookUrl",
            "type": "string",
            "format": ""
        }
    ];
    return NotificationView;
}());
exports.NotificationView = NotificationView;
//# sourceMappingURL=NotificationView.js.map

/***/ }),

/***/ 25811:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NotificationViewForNdsGroup = void 0;
var NotificationViewForNdsGroup = (function () {
    function NotificationViewForNdsGroup() {
    }
    NotificationViewForNdsGroup.getAttributeTypeMap = function () {
        return NotificationViewForNdsGroup.attributeTypeMap;
    };
    NotificationViewForNdsGroup.discriminator = undefined;
    NotificationViewForNdsGroup.attributeTypeMap = [
        {
            "name": "datadogApiKey",
            "baseName": "datadogApiKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "datadogRegion",
            "baseName": "datadogRegion",
            "type": "string",
            "format": ""
        },
        {
            "name": "delayMin",
            "baseName": "delayMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "intervalMin",
            "baseName": "intervalMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "emailAddress",
            "baseName": "emailAddress",
            "type": "string",
            "format": "email"
        },
        {
            "name": "emailEnabled",
            "baseName": "emailEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "smsEnabled",
            "baseName": "smsEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "notificationToken",
            "baseName": "notificationToken",
            "type": "string",
            "format": ""
        },
        {
            "name": "roomName",
            "baseName": "roomName",
            "type": "string",
            "format": ""
        },
        {
            "name": "microsoftTeamsWebhookUrl",
            "baseName": "microsoftTeamsWebhookUrl",
            "type": "string",
            "format": ""
        },
        {
            "name": "opsGenieApiKey",
            "baseName": "opsGenieApiKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "opsGenieRegion",
            "baseName": "opsGenieRegion",
            "type": "string",
            "format": ""
        },
        {
            "name": "region",
            "baseName": "region",
            "type": "string",
            "format": ""
        },
        {
            "name": "serviceKey",
            "baseName": "serviceKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "apiToken",
            "baseName": "apiToken",
            "type": "string",
            "format": ""
        },
        {
            "name": "channelName",
            "baseName": "channelName",
            "type": "string",
            "format": ""
        },
        {
            "name": "mobileNumber",
            "baseName": "mobileNumber",
            "type": "string",
            "format": ""
        },
        {
            "name": "teamId",
            "baseName": "teamId",
            "type": "string",
            "format": ""
        },
        {
            "name": "teamName",
            "baseName": "teamName",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        },
        {
            "name": "victorOpsApiKey",
            "baseName": "victorOpsApiKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "victorOpsRoutingKey",
            "baseName": "victorOpsRoutingKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "webhookSecret",
            "baseName": "webhookSecret",
            "type": "string",
            "format": ""
        },
        {
            "name": "webhookUrl",
            "baseName": "webhookUrl",
            "type": "string",
            "format": ""
        }
    ];
    return NotificationViewForNdsGroup;
}());
exports.NotificationViewForNdsGroup = NotificationViewForNdsGroup;
//# sourceMappingURL=NotificationViewForNdsGroup.js.map

/***/ }),

/***/ 68786:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NumberMetricAlertView = void 0;
var NumberMetricAlertView = (function () {
    function NumberMetricAlertView() {
    }
    NumberMetricAlertView.getAttributeTypeMap = function () {
        return NumberMetricAlertView.attributeTypeMap;
    };
    NumberMetricAlertView.discriminator = undefined;
    NumberMetricAlertView.attributeTypeMap = [
        {
            "name": "acknowledgedUntil",
            "baseName": "acknowledgedUntil",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "acknowledgementComment",
            "baseName": "acknowledgementComment",
            "type": "string",
            "format": ""
        },
        {
            "name": "acknowledgingUsername",
            "baseName": "acknowledgingUsername",
            "type": "string",
            "format": "email"
        },
        {
            "name": "alertConfigId",
            "baseName": "alertConfigId",
            "type": "string",
            "format": ""
        },
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "currentValue",
            "baseName": "currentValue",
            "type": "NumberMetricValueView",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "HostMetricEventTypeViewAlertable",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "hostnameAndPort",
            "baseName": "hostnameAndPort",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "lastNotified",
            "baseName": "lastNotified",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "resolved",
            "baseName": "resolved",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return NumberMetricAlertView;
}());
exports.NumberMetricAlertView = NumberMetricAlertView;
//# sourceMappingURL=NumberMetricAlertView.js.map

/***/ }),

/***/ 64254:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NumberMetricEventView = void 0;
var NumberMetricEventView = (function () {
    function NumberMetricEventView() {
    }
    NumberMetricEventView.getAttributeTypeMap = function () {
        return NumberMetricEventView.attributeTypeMap;
    };
    NumberMetricEventView.discriminator = undefined;
    NumberMetricEventView.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "currentValue",
            "baseName": "currentValue",
            "type": "NumberMetricValueView",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "HostMetricEventTypeView",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "port",
            "baseName": "port",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "shardName",
            "baseName": "shardName",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return NumberMetricEventView;
}());
exports.NumberMetricEventView = NumberMetricEventView;
//# sourceMappingURL=NumberMetricEventView.js.map

/***/ }),

/***/ 78443:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NumberMetricThresholdView = void 0;
var NumberMetricThresholdView = (function () {
    function NumberMetricThresholdView() {
    }
    NumberMetricThresholdView.getAttributeTypeMap = function () {
        return NumberMetricThresholdView.attributeTypeMap;
    };
    NumberMetricThresholdView.discriminator = undefined;
    NumberMetricThresholdView.attributeTypeMap = [
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string",
            "format": ""
        },
        {
            "name": "mode",
            "baseName": "mode",
            "type": "string",
            "format": ""
        },
        {
            "name": "operator",
            "baseName": "operator",
            "type": "Operator",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "number",
            "format": "double"
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "NumberMetricUnits",
            "format": ""
        }
    ];
    return NumberMetricThresholdView;
}());
exports.NumberMetricThresholdView = NumberMetricThresholdView;
//# sourceMappingURL=NumberMetricThresholdView.js.map

/***/ }),

/***/ 35977:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=NumberMetricUnits.js.map

/***/ }),

/***/ 66713:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NumberMetricValueView = void 0;
var NumberMetricValueView = (function () {
    function NumberMetricValueView() {
    }
    NumberMetricValueView.getAttributeTypeMap = function () {
        return NumberMetricValueView.attributeTypeMap;
    };
    NumberMetricValueView.discriminator = undefined;
    NumberMetricValueView.attributeTypeMap = [
        {
            "name": "number",
            "baseName": "number",
            "type": "number",
            "format": "double"
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "NumberMetricUnits",
            "format": ""
        }
    ];
    return NumberMetricValueView;
}());
exports.NumberMetricValueView = NumberMetricValueView;
//# sourceMappingURL=NumberMetricValueView.js.map

/***/ }),

/***/ 79595:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ObjectSerializer = void 0;
__exportStar(__nccwpck_require__(29746), exports);
__exportStar(__nccwpck_require__(48681), exports);
__exportStar(__nccwpck_require__(29236), exports);
__exportStar(__nccwpck_require__(65471), exports);
__exportStar(__nccwpck_require__(96643), exports);
__exportStar(__nccwpck_require__(16282), exports);
__exportStar(__nccwpck_require__(28366), exports);
__exportStar(__nccwpck_require__(94762), exports);
__exportStar(__nccwpck_require__(88198), exports);
__exportStar(__nccwpck_require__(98364), exports);
__exportStar(__nccwpck_require__(94419), exports);
__exportStar(__nccwpck_require__(40980), exports);
__exportStar(__nccwpck_require__(42387), exports);
__exportStar(__nccwpck_require__(77438), exports);
__exportStar(__nccwpck_require__(85042), exports);
__exportStar(__nccwpck_require__(864), exports);
__exportStar(__nccwpck_require__(90102), exports);
__exportStar(__nccwpck_require__(23261), exports);
__exportStar(__nccwpck_require__(31297), exports);
__exportStar(__nccwpck_require__(74164), exports);
__exportStar(__nccwpck_require__(89972), exports);
__exportStar(__nccwpck_require__(70841), exports);
__exportStar(__nccwpck_require__(94832), exports);
__exportStar(__nccwpck_require__(12737), exports);
__exportStar(__nccwpck_require__(13986), exports);
__exportStar(__nccwpck_require__(97674), exports);
__exportStar(__nccwpck_require__(5431), exports);
__exportStar(__nccwpck_require__(15815), exports);
__exportStar(__nccwpck_require__(24691), exports);
__exportStar(__nccwpck_require__(89363), exports);
__exportStar(__nccwpck_require__(68306), exports);
__exportStar(__nccwpck_require__(90071), exports);
__exportStar(__nccwpck_require__(32047), exports);
__exportStar(__nccwpck_require__(39360), exports);
__exportStar(__nccwpck_require__(85511), exports);
__exportStar(__nccwpck_require__(76309), exports);
__exportStar(__nccwpck_require__(95083), exports);
__exportStar(__nccwpck_require__(34027), exports);
__exportStar(__nccwpck_require__(21464), exports);
__exportStar(__nccwpck_require__(38365), exports);
__exportStar(__nccwpck_require__(16946), exports);
__exportStar(__nccwpck_require__(37262), exports);
__exportStar(__nccwpck_require__(15579), exports);
__exportStar(__nccwpck_require__(66888), exports);
__exportStar(__nccwpck_require__(50374), exports);
__exportStar(__nccwpck_require__(30100), exports);
__exportStar(__nccwpck_require__(83615), exports);
__exportStar(__nccwpck_require__(19924), exports);
__exportStar(__nccwpck_require__(37445), exports);
__exportStar(__nccwpck_require__(31954), exports);
__exportStar(__nccwpck_require__(75563), exports);
__exportStar(__nccwpck_require__(8995), exports);
__exportStar(__nccwpck_require__(90811), exports);
__exportStar(__nccwpck_require__(2196), exports);
__exportStar(__nccwpck_require__(86192), exports);
__exportStar(__nccwpck_require__(76345), exports);
__exportStar(__nccwpck_require__(19811), exports);
__exportStar(__nccwpck_require__(3265), exports);
__exportStar(__nccwpck_require__(27030), exports);
__exportStar(__nccwpck_require__(74401), exports);
__exportStar(__nccwpck_require__(8275), exports);
__exportStar(__nccwpck_require__(26270), exports);
__exportStar(__nccwpck_require__(20279), exports);
__exportStar(__nccwpck_require__(4845), exports);
__exportStar(__nccwpck_require__(71561), exports);
__exportStar(__nccwpck_require__(19788), exports);
__exportStar(__nccwpck_require__(37038), exports);
__exportStar(__nccwpck_require__(73813), exports);
__exportStar(__nccwpck_require__(89637), exports);
__exportStar(__nccwpck_require__(36169), exports);
__exportStar(__nccwpck_require__(40241), exports);
__exportStar(__nccwpck_require__(81694), exports);
__exportStar(__nccwpck_require__(37738), exports);
__exportStar(__nccwpck_require__(98127), exports);
__exportStar(__nccwpck_require__(89797), exports);
__exportStar(__nccwpck_require__(73361), exports);
__exportStar(__nccwpck_require__(74811), exports);
__exportStar(__nccwpck_require__(87738), exports);
__exportStar(__nccwpck_require__(77304), exports);
__exportStar(__nccwpck_require__(19082), exports);
__exportStar(__nccwpck_require__(77608), exports);
__exportStar(__nccwpck_require__(36985), exports);
__exportStar(__nccwpck_require__(37126), exports);
__exportStar(__nccwpck_require__(22496), exports);
__exportStar(__nccwpck_require__(74219), exports);
__exportStar(__nccwpck_require__(67733), exports);
__exportStar(__nccwpck_require__(16650), exports);
__exportStar(__nccwpck_require__(50215), exports);
__exportStar(__nccwpck_require__(6876), exports);
__exportStar(__nccwpck_require__(7295), exports);
__exportStar(__nccwpck_require__(51148), exports);
__exportStar(__nccwpck_require__(96478), exports);
__exportStar(__nccwpck_require__(18899), exports);
__exportStar(__nccwpck_require__(23380), exports);
__exportStar(__nccwpck_require__(99963), exports);
__exportStar(__nccwpck_require__(22721), exports);
__exportStar(__nccwpck_require__(17126), exports);
__exportStar(__nccwpck_require__(3198), exports);
__exportStar(__nccwpck_require__(71748), exports);
__exportStar(__nccwpck_require__(69245), exports);
__exportStar(__nccwpck_require__(7794), exports);
__exportStar(__nccwpck_require__(2804), exports);
__exportStar(__nccwpck_require__(45676), exports);
__exportStar(__nccwpck_require__(63243), exports);
__exportStar(__nccwpck_require__(91241), exports);
__exportStar(__nccwpck_require__(98818), exports);
__exportStar(__nccwpck_require__(79436), exports);
__exportStar(__nccwpck_require__(43212), exports);
__exportStar(__nccwpck_require__(17109), exports);
__exportStar(__nccwpck_require__(65180), exports);
__exportStar(__nccwpck_require__(87107), exports);
__exportStar(__nccwpck_require__(33757), exports);
__exportStar(__nccwpck_require__(12468), exports);
__exportStar(__nccwpck_require__(58270), exports);
__exportStar(__nccwpck_require__(76643), exports);
__exportStar(__nccwpck_require__(84994), exports);
__exportStar(__nccwpck_require__(74167), exports);
__exportStar(__nccwpck_require__(6992), exports);
__exportStar(__nccwpck_require__(99115), exports);
__exportStar(__nccwpck_require__(99849), exports);
__exportStar(__nccwpck_require__(73878), exports);
__exportStar(__nccwpck_require__(98996), exports);
__exportStar(__nccwpck_require__(93671), exports);
__exportStar(__nccwpck_require__(79009), exports);
__exportStar(__nccwpck_require__(88122), exports);
__exportStar(__nccwpck_require__(37889), exports);
__exportStar(__nccwpck_require__(8447), exports);
__exportStar(__nccwpck_require__(58704), exports);
__exportStar(__nccwpck_require__(53077), exports);
__exportStar(__nccwpck_require__(80978), exports);
__exportStar(__nccwpck_require__(86338), exports);
__exportStar(__nccwpck_require__(80857), exports);
__exportStar(__nccwpck_require__(50092), exports);
__exportStar(__nccwpck_require__(98952), exports);
__exportStar(__nccwpck_require__(4117), exports);
__exportStar(__nccwpck_require__(54882), exports);
__exportStar(__nccwpck_require__(36519), exports);
__exportStar(__nccwpck_require__(5399), exports);
__exportStar(__nccwpck_require__(43087), exports);
__exportStar(__nccwpck_require__(62930), exports);
__exportStar(__nccwpck_require__(3439), exports);
__exportStar(__nccwpck_require__(83670), exports);
__exportStar(__nccwpck_require__(72849), exports);
__exportStar(__nccwpck_require__(40897), exports);
__exportStar(__nccwpck_require__(49337), exports);
__exportStar(__nccwpck_require__(52853), exports);
__exportStar(__nccwpck_require__(64656), exports);
__exportStar(__nccwpck_require__(93713), exports);
__exportStar(__nccwpck_require__(74525), exports);
__exportStar(__nccwpck_require__(35014), exports);
__exportStar(__nccwpck_require__(17195), exports);
__exportStar(__nccwpck_require__(94564), exports);
__exportStar(__nccwpck_require__(68027), exports);
__exportStar(__nccwpck_require__(78657), exports);
__exportStar(__nccwpck_require__(98564), exports);
__exportStar(__nccwpck_require__(23896), exports);
__exportStar(__nccwpck_require__(76200), exports);
__exportStar(__nccwpck_require__(65872), exports);
__exportStar(__nccwpck_require__(39629), exports);
__exportStar(__nccwpck_require__(31757), exports);
__exportStar(__nccwpck_require__(40209), exports);
__exportStar(__nccwpck_require__(90151), exports);
__exportStar(__nccwpck_require__(14807), exports);
__exportStar(__nccwpck_require__(38768), exports);
__exportStar(__nccwpck_require__(22587), exports);
__exportStar(__nccwpck_require__(7665), exports);
__exportStar(__nccwpck_require__(2188), exports);
__exportStar(__nccwpck_require__(44511), exports);
__exportStar(__nccwpck_require__(48253), exports);
__exportStar(__nccwpck_require__(73257), exports);
__exportStar(__nccwpck_require__(79261), exports);
__exportStar(__nccwpck_require__(87407), exports);
__exportStar(__nccwpck_require__(36021), exports);
__exportStar(__nccwpck_require__(93977), exports);
__exportStar(__nccwpck_require__(56345), exports);
__exportStar(__nccwpck_require__(60556), exports);
__exportStar(__nccwpck_require__(53390), exports);
__exportStar(__nccwpck_require__(84468), exports);
__exportStar(__nccwpck_require__(7632), exports);
__exportStar(__nccwpck_require__(54155), exports);
__exportStar(__nccwpck_require__(71414), exports);
__exportStar(__nccwpck_require__(9389), exports);
__exportStar(__nccwpck_require__(51538), exports);
__exportStar(__nccwpck_require__(81168), exports);
__exportStar(__nccwpck_require__(16936), exports);
__exportStar(__nccwpck_require__(15587), exports);
__exportStar(__nccwpck_require__(89073), exports);
__exportStar(__nccwpck_require__(60686), exports);
__exportStar(__nccwpck_require__(21649), exports);
__exportStar(__nccwpck_require__(65774), exports);
__exportStar(__nccwpck_require__(28733), exports);
__exportStar(__nccwpck_require__(66335), exports);
__exportStar(__nccwpck_require__(34198), exports);
__exportStar(__nccwpck_require__(43184), exports);
__exportStar(__nccwpck_require__(15139), exports);
__exportStar(__nccwpck_require__(55784), exports);
__exportStar(__nccwpck_require__(12241), exports);
__exportStar(__nccwpck_require__(55955), exports);
__exportStar(__nccwpck_require__(98706), exports);
__exportStar(__nccwpck_require__(90644), exports);
__exportStar(__nccwpck_require__(82589), exports);
__exportStar(__nccwpck_require__(99441), exports);
__exportStar(__nccwpck_require__(65290), exports);
__exportStar(__nccwpck_require__(76371), exports);
__exportStar(__nccwpck_require__(77619), exports);
__exportStar(__nccwpck_require__(6667), exports);
__exportStar(__nccwpck_require__(37671), exports);
__exportStar(__nccwpck_require__(29277), exports);
__exportStar(__nccwpck_require__(14557), exports);
__exportStar(__nccwpck_require__(11148), exports);
__exportStar(__nccwpck_require__(24506), exports);
__exportStar(__nccwpck_require__(81131), exports);
__exportStar(__nccwpck_require__(24264), exports);
__exportStar(__nccwpck_require__(38273), exports);
__exportStar(__nccwpck_require__(90868), exports);
__exportStar(__nccwpck_require__(29363), exports);
__exportStar(__nccwpck_require__(45985), exports);
__exportStar(__nccwpck_require__(75383), exports);
__exportStar(__nccwpck_require__(65384), exports);
__exportStar(__nccwpck_require__(61963), exports);
__exportStar(__nccwpck_require__(45503), exports);
__exportStar(__nccwpck_require__(96750), exports);
__exportStar(__nccwpck_require__(77559), exports);
__exportStar(__nccwpck_require__(53820), exports);
__exportStar(__nccwpck_require__(24634), exports);
__exportStar(__nccwpck_require__(88589), exports);
__exportStar(__nccwpck_require__(10010), exports);
__exportStar(__nccwpck_require__(27171), exports);
__exportStar(__nccwpck_require__(91757), exports);
__exportStar(__nccwpck_require__(6227), exports);
__exportStar(__nccwpck_require__(83767), exports);
__exportStar(__nccwpck_require__(25223), exports);
__exportStar(__nccwpck_require__(55464), exports);
__exportStar(__nccwpck_require__(22509), exports);
__exportStar(__nccwpck_require__(55830), exports);
__exportStar(__nccwpck_require__(26449), exports);
__exportStar(__nccwpck_require__(33523), exports);
__exportStar(__nccwpck_require__(40499), exports);
__exportStar(__nccwpck_require__(78548), exports);
__exportStar(__nccwpck_require__(90031), exports);
__exportStar(__nccwpck_require__(90187), exports);
__exportStar(__nccwpck_require__(17250), exports);
__exportStar(__nccwpck_require__(25064), exports);
__exportStar(__nccwpck_require__(40869), exports);
__exportStar(__nccwpck_require__(71856), exports);
__exportStar(__nccwpck_require__(79870), exports);
__exportStar(__nccwpck_require__(2346), exports);
__exportStar(__nccwpck_require__(14877), exports);
__exportStar(__nccwpck_require__(75642), exports);
__exportStar(__nccwpck_require__(26653), exports);
__exportStar(__nccwpck_require__(97120), exports);
__exportStar(__nccwpck_require__(4728), exports);
__exportStar(__nccwpck_require__(25383), exports);
__exportStar(__nccwpck_require__(49682), exports);
__exportStar(__nccwpck_require__(44134), exports);
__exportStar(__nccwpck_require__(87684), exports);
__exportStar(__nccwpck_require__(14994), exports);
__exportStar(__nccwpck_require__(93002), exports);
__exportStar(__nccwpck_require__(89398), exports);
__exportStar(__nccwpck_require__(9256), exports);
__exportStar(__nccwpck_require__(42882), exports);
__exportStar(__nccwpck_require__(70765), exports);
__exportStar(__nccwpck_require__(89400), exports);
__exportStar(__nccwpck_require__(25896), exports);
__exportStar(__nccwpck_require__(22974), exports);
__exportStar(__nccwpck_require__(22500), exports);
__exportStar(__nccwpck_require__(28099), exports);
__exportStar(__nccwpck_require__(49309), exports);
__exportStar(__nccwpck_require__(65426), exports);
__exportStar(__nccwpck_require__(6512), exports);
__exportStar(__nccwpck_require__(78948), exports);
__exportStar(__nccwpck_require__(66506), exports);
__exportStar(__nccwpck_require__(86394), exports);
__exportStar(__nccwpck_require__(45143), exports);
__exportStar(__nccwpck_require__(982), exports);
__exportStar(__nccwpck_require__(2052), exports);
__exportStar(__nccwpck_require__(46486), exports);
__exportStar(__nccwpck_require__(82485), exports);
__exportStar(__nccwpck_require__(89790), exports);
__exportStar(__nccwpck_require__(87101), exports);
__exportStar(__nccwpck_require__(11900), exports);
__exportStar(__nccwpck_require__(3809), exports);
__exportStar(__nccwpck_require__(9449), exports);
__exportStar(__nccwpck_require__(36082), exports);
__exportStar(__nccwpck_require__(96428), exports);
__exportStar(__nccwpck_require__(6917), exports);
__exportStar(__nccwpck_require__(50080), exports);
__exportStar(__nccwpck_require__(16557), exports);
__exportStar(__nccwpck_require__(96310), exports);
__exportStar(__nccwpck_require__(4550), exports);
__exportStar(__nccwpck_require__(53666), exports);
__exportStar(__nccwpck_require__(66106), exports);
__exportStar(__nccwpck_require__(9205), exports);
__exportStar(__nccwpck_require__(97096), exports);
__exportStar(__nccwpck_require__(31898), exports);
__exportStar(__nccwpck_require__(56566), exports);
__exportStar(__nccwpck_require__(94850), exports);
__exportStar(__nccwpck_require__(62633), exports);
__exportStar(__nccwpck_require__(76383), exports);
__exportStar(__nccwpck_require__(7918), exports);
__exportStar(__nccwpck_require__(13873), exports);
__exportStar(__nccwpck_require__(77289), exports);
__exportStar(__nccwpck_require__(81220), exports);
__exportStar(__nccwpck_require__(80573), exports);
__exportStar(__nccwpck_require__(62435), exports);
__exportStar(__nccwpck_require__(43167), exports);
__exportStar(__nccwpck_require__(55034), exports);
__exportStar(__nccwpck_require__(11742), exports);
__exportStar(__nccwpck_require__(17830), exports);
__exportStar(__nccwpck_require__(84700), exports);
__exportStar(__nccwpck_require__(40076), exports);
__exportStar(__nccwpck_require__(38647), exports);
__exportStar(__nccwpck_require__(1260), exports);
__exportStar(__nccwpck_require__(66181), exports);
__exportStar(__nccwpck_require__(15397), exports);
__exportStar(__nccwpck_require__(65240), exports);
__exportStar(__nccwpck_require__(13298), exports);
__exportStar(__nccwpck_require__(63698), exports);
__exportStar(__nccwpck_require__(28145), exports);
__exportStar(__nccwpck_require__(38470), exports);
__exportStar(__nccwpck_require__(39783), exports);
__exportStar(__nccwpck_require__(7223), exports);
__exportStar(__nccwpck_require__(99302), exports);
__exportStar(__nccwpck_require__(30489), exports);
__exportStar(__nccwpck_require__(98195), exports);
__exportStar(__nccwpck_require__(82373), exports);
__exportStar(__nccwpck_require__(89768), exports);
__exportStar(__nccwpck_require__(39700), exports);
__exportStar(__nccwpck_require__(13667), exports);
__exportStar(__nccwpck_require__(66315), exports);
__exportStar(__nccwpck_require__(92876), exports);
__exportStar(__nccwpck_require__(24969), exports);
__exportStar(__nccwpck_require__(60011), exports);
__exportStar(__nccwpck_require__(83063), exports);
__exportStar(__nccwpck_require__(69320), exports);
__exportStar(__nccwpck_require__(21200), exports);
__exportStar(__nccwpck_require__(48667), exports);
__exportStar(__nccwpck_require__(26129), exports);
__exportStar(__nccwpck_require__(70258), exports);
__exportStar(__nccwpck_require__(63550), exports);
__exportStar(__nccwpck_require__(25211), exports);
__exportStar(__nccwpck_require__(72237), exports);
__exportStar(__nccwpck_require__(59466), exports);
__exportStar(__nccwpck_require__(31234), exports);
__exportStar(__nccwpck_require__(95052), exports);
__exportStar(__nccwpck_require__(1362), exports);
__exportStar(__nccwpck_require__(2787), exports);
__exportStar(__nccwpck_require__(6232), exports);
__exportStar(__nccwpck_require__(91565), exports);
__exportStar(__nccwpck_require__(55669), exports);
__exportStar(__nccwpck_require__(40477), exports);
__exportStar(__nccwpck_require__(39724), exports);
__exportStar(__nccwpck_require__(75681), exports);
__exportStar(__nccwpck_require__(47775), exports);
__exportStar(__nccwpck_require__(7470), exports);
__exportStar(__nccwpck_require__(76464), exports);
__exportStar(__nccwpck_require__(46878), exports);
__exportStar(__nccwpck_require__(46327), exports);
__exportStar(__nccwpck_require__(799), exports);
__exportStar(__nccwpck_require__(61046), exports);
__exportStar(__nccwpck_require__(88181), exports);
__exportStar(__nccwpck_require__(58032), exports);
__exportStar(__nccwpck_require__(25811), exports);
__exportStar(__nccwpck_require__(68786), exports);
__exportStar(__nccwpck_require__(64254), exports);
__exportStar(__nccwpck_require__(78443), exports);
__exportStar(__nccwpck_require__(35977), exports);
__exportStar(__nccwpck_require__(66713), exports);
__exportStar(__nccwpck_require__(63812), exports);
__exportStar(__nccwpck_require__(80656), exports);
__exportStar(__nccwpck_require__(79918), exports);
__exportStar(__nccwpck_require__(43074), exports);
__exportStar(__nccwpck_require__(94627), exports);
__exportStar(__nccwpck_require__(84387), exports);
__exportStar(__nccwpck_require__(53108), exports);
__exportStar(__nccwpck_require__(52386), exports);
__exportStar(__nccwpck_require__(77229), exports);
__exportStar(__nccwpck_require__(12611), exports);
__exportStar(__nccwpck_require__(96032), exports);
__exportStar(__nccwpck_require__(39500), exports);
__exportStar(__nccwpck_require__(96779), exports);
__exportStar(__nccwpck_require__(14198), exports);
__exportStar(__nccwpck_require__(99072), exports);
__exportStar(__nccwpck_require__(57737), exports);
__exportStar(__nccwpck_require__(87543), exports);
__exportStar(__nccwpck_require__(45543), exports);
__exportStar(__nccwpck_require__(96979), exports);
__exportStar(__nccwpck_require__(70739), exports);
__exportStar(__nccwpck_require__(28305), exports);
__exportStar(__nccwpck_require__(90186), exports);
__exportStar(__nccwpck_require__(52224), exports);
__exportStar(__nccwpck_require__(17507), exports);
__exportStar(__nccwpck_require__(98279), exports);
__exportStar(__nccwpck_require__(91523), exports);
__exportStar(__nccwpck_require__(64247), exports);
__exportStar(__nccwpck_require__(19845), exports);
__exportStar(__nccwpck_require__(80692), exports);
__exportStar(__nccwpck_require__(82375), exports);
__exportStar(__nccwpck_require__(46464), exports);
__exportStar(__nccwpck_require__(49242), exports);
__exportStar(__nccwpck_require__(38098), exports);
__exportStar(__nccwpck_require__(85997), exports);
__exportStar(__nccwpck_require__(44373), exports);
__exportStar(__nccwpck_require__(9540), exports);
__exportStar(__nccwpck_require__(77325), exports);
__exportStar(__nccwpck_require__(22143), exports);
__exportStar(__nccwpck_require__(27042), exports);
__exportStar(__nccwpck_require__(60047), exports);
__exportStar(__nccwpck_require__(30368), exports);
__exportStar(__nccwpck_require__(15444), exports);
__exportStar(__nccwpck_require__(88748), exports);
__exportStar(__nccwpck_require__(29466), exports);
__exportStar(__nccwpck_require__(9719), exports);
__exportStar(__nccwpck_require__(44632), exports);
__exportStar(__nccwpck_require__(77067), exports);
__exportStar(__nccwpck_require__(72537), exports);
__exportStar(__nccwpck_require__(51042), exports);
__exportStar(__nccwpck_require__(78420), exports);
__exportStar(__nccwpck_require__(65057), exports);
__exportStar(__nccwpck_require__(64078), exports);
__exportStar(__nccwpck_require__(81140), exports);
__exportStar(__nccwpck_require__(93391), exports);
__exportStar(__nccwpck_require__(68283), exports);
__exportStar(__nccwpck_require__(69512), exports);
__exportStar(__nccwpck_require__(83211), exports);
__exportStar(__nccwpck_require__(73031), exports);
__exportStar(__nccwpck_require__(56229), exports);
__exportStar(__nccwpck_require__(56889), exports);
__exportStar(__nccwpck_require__(17546), exports);
__exportStar(__nccwpck_require__(34963), exports);
__exportStar(__nccwpck_require__(10259), exports);
__exportStar(__nccwpck_require__(70924), exports);
__exportStar(__nccwpck_require__(62273), exports);
__exportStar(__nccwpck_require__(20348), exports);
__exportStar(__nccwpck_require__(36953), exports);
__exportStar(__nccwpck_require__(68541), exports);
__exportStar(__nccwpck_require__(84190), exports);
__exportStar(__nccwpck_require__(47721), exports);
__exportStar(__nccwpck_require__(71482), exports);
__exportStar(__nccwpck_require__(13910), exports);
__exportStar(__nccwpck_require__(78989), exports);
__exportStar(__nccwpck_require__(30495), exports);
__exportStar(__nccwpck_require__(4040), exports);
__exportStar(__nccwpck_require__(350), exports);
__exportStar(__nccwpck_require__(68426), exports);
__exportStar(__nccwpck_require__(82985), exports);
__exportStar(__nccwpck_require__(29115), exports);
__exportStar(__nccwpck_require__(70909), exports);
__exportStar(__nccwpck_require__(87220), exports);
__exportStar(__nccwpck_require__(7892), exports);
__exportStar(__nccwpck_require__(453), exports);
__exportStar(__nccwpck_require__(9636), exports);
__exportStar(__nccwpck_require__(39460), exports);
__exportStar(__nccwpck_require__(31711), exports);
__exportStar(__nccwpck_require__(52886), exports);
__exportStar(__nccwpck_require__(52359), exports);
__exportStar(__nccwpck_require__(86573), exports);
__exportStar(__nccwpck_require__(57998), exports);
__exportStar(__nccwpck_require__(44550), exports);
__exportStar(__nccwpck_require__(44499), exports);
__exportStar(__nccwpck_require__(87088), exports);
__exportStar(__nccwpck_require__(98234), exports);
__exportStar(__nccwpck_require__(99692), exports);
__exportStar(__nccwpck_require__(6012), exports);
__exportStar(__nccwpck_require__(32160), exports);
__exportStar(__nccwpck_require__(54179), exports);
__exportStar(__nccwpck_require__(33098), exports);
__exportStar(__nccwpck_require__(99616), exports);
__exportStar(__nccwpck_require__(50019), exports);
__exportStar(__nccwpck_require__(31737), exports);
__exportStar(__nccwpck_require__(27346), exports);
__exportStar(__nccwpck_require__(71043), exports);
__exportStar(__nccwpck_require__(4867), exports);
__exportStar(__nccwpck_require__(18778), exports);
__exportStar(__nccwpck_require__(19075), exports);
__exportStar(__nccwpck_require__(87412), exports);
__exportStar(__nccwpck_require__(94921), exports);
__exportStar(__nccwpck_require__(93862), exports);
__exportStar(__nccwpck_require__(42488), exports);
__exportStar(__nccwpck_require__(22929), exports);
__exportStar(__nccwpck_require__(38646), exports);
__exportStar(__nccwpck_require__(13842), exports);
__exportStar(__nccwpck_require__(72273), exports);
__exportStar(__nccwpck_require__(11861), exports);
__exportStar(__nccwpck_require__(58790), exports);
__exportStar(__nccwpck_require__(13497), exports);
__exportStar(__nccwpck_require__(56073), exports);
__exportStar(__nccwpck_require__(74898), exports);
__exportStar(__nccwpck_require__(30021), exports);
__exportStar(__nccwpck_require__(36786), exports);
__exportStar(__nccwpck_require__(59703), exports);
__exportStar(__nccwpck_require__(32758), exports);
__exportStar(__nccwpck_require__(63690), exports);
__exportStar(__nccwpck_require__(49179), exports);
__exportStar(__nccwpck_require__(26473), exports);
__exportStar(__nccwpck_require__(72618), exports);
__exportStar(__nccwpck_require__(6559), exports);
__exportStar(__nccwpck_require__(83361), exports);
__exportStar(__nccwpck_require__(2537), exports);
__exportStar(__nccwpck_require__(63955), exports);
__exportStar(__nccwpck_require__(64138), exports);
__exportStar(__nccwpck_require__(55893), exports);
__exportStar(__nccwpck_require__(47088), exports);
__exportStar(__nccwpck_require__(52644), exports);
__exportStar(__nccwpck_require__(56673), exports);
__exportStar(__nccwpck_require__(80028), exports);
__exportStar(__nccwpck_require__(52943), exports);
__exportStar(__nccwpck_require__(1709), exports);
__exportStar(__nccwpck_require__(77640), exports);
__exportStar(__nccwpck_require__(77829), exports);
__exportStar(__nccwpck_require__(50482), exports);
__exportStar(__nccwpck_require__(75735), exports);
__exportStar(__nccwpck_require__(25508), exports);
__exportStar(__nccwpck_require__(90894), exports);
__exportStar(__nccwpck_require__(9520), exports);
__exportStar(__nccwpck_require__(95716), exports);
__exportStar(__nccwpck_require__(15773), exports);
__exportStar(__nccwpck_require__(3500), exports);
__exportStar(__nccwpck_require__(37215), exports);
__exportStar(__nccwpck_require__(45815), exports);
__exportStar(__nccwpck_require__(84324), exports);
__exportStar(__nccwpck_require__(89100), exports);
__exportStar(__nccwpck_require__(46072), exports);
__exportStar(__nccwpck_require__(60754), exports);
__exportStar(__nccwpck_require__(79147), exports);
__exportStar(__nccwpck_require__(5642), exports);
__exportStar(__nccwpck_require__(40790), exports);
__exportStar(__nccwpck_require__(39570), exports);
__exportStar(__nccwpck_require__(19091), exports);
__exportStar(__nccwpck_require__(78951), exports);
__exportStar(__nccwpck_require__(95171), exports);
__exportStar(__nccwpck_require__(88613), exports);
__exportStar(__nccwpck_require__(46368), exports);
__exportStar(__nccwpck_require__(45088), exports);
__exportStar(__nccwpck_require__(51056), exports);
__exportStar(__nccwpck_require__(88283), exports);
__exportStar(__nccwpck_require__(73471), exports);
__exportStar(__nccwpck_require__(94982), exports);
__exportStar(__nccwpck_require__(5000), exports);
__exportStar(__nccwpck_require__(67583), exports);
__exportStar(__nccwpck_require__(25573), exports);
__exportStar(__nccwpck_require__(21689), exports);
__exportStar(__nccwpck_require__(48732), exports);
var AWSAutoScaling_1 = __nccwpck_require__(29746);
var AWSCloudProviderContainer_1 = __nccwpck_require__(48681);
var AWSComputeAutoScaling_1 = __nccwpck_require__(29236);
var AWSCustomDNSEnabledView_1 = __nccwpck_require__(65471);
var AWSHardwareSpec_1 = __nccwpck_require__(96643);
var AWSInterfaceEndpoint_1 = __nccwpck_require__(16282);
var AWSKMS_1 = __nccwpck_require__(28366);
var AWSPeerVpc_1 = __nccwpck_require__(94762);
var AWSPeerVpcRequest_1 = __nccwpck_require__(88198);
var AWSPrivateLinkConnection_1 = __nccwpck_require__(98364);
var AWSProviderSettings_1 = __nccwpck_require__(94419);
var AWSRegionConfig_1 = __nccwpck_require__(40980);
var AccessListItemView_1 = __nccwpck_require__(42387);
var AlertAuditView_1 = __nccwpck_require__(85042);
var AlertConfigAuditView_1 = __nccwpck_require__(90102);
var AlertConfigView_1 = __nccwpck_require__(23261);
var AlertConfigViewForNdsGroup_1 = __nccwpck_require__(31297);
var AlertView_1 = __nccwpck_require__(74164);
var AlertViewForNdsGroup_1 = __nccwpck_require__(89972);
var ApiAddUserToTeamView_1 = __nccwpck_require__(70841);
var ApiApiUserView_1 = __nccwpck_require__(94832);
var ApiAppUserView_1 = __nccwpck_require__(12737);
var ApiAtlasContainerPeerViewRequest_1 = __nccwpck_require__(13986);
var ApiAtlasFTSAnalyzersViewManual_1 = __nccwpck_require__(97674);
var ApiAtlasFTSAnalyzersViewManualCharFiltersInner_1 = __nccwpck_require__(5431);
var ApiAtlasFTSAnalyzersViewManualTokenFiltersInner_1 = __nccwpck_require__(15815);
var ApiAtlasFTSAnalyzersViewManualTokenizer_1 = __nccwpck_require__(24691);
var ApiAtlasFTSMappingsViewManual_1 = __nccwpck_require__(89363);
var ApiAtlasNetPeerRequestBase_1 = __nccwpck_require__(68306);
var ApiAvailableRegionView_1 = __nccwpck_require__(90071);
var ApiBSONTimestampView_1 = __nccwpck_require__(32047);
var ApiCheckpointPartView_1 = __nccwpck_require__(39360);
var ApiCreateApiKeyView_1 = __nccwpck_require__(85511);
var ApiDatabaseView_1 = __nccwpck_require__(76309);
var ApiDatadogView_1 = __nccwpck_require__(95083);
var ApiDeleteCopiedBackupsView_1 = __nccwpck_require__(34027);
var ApiDiskPartitionView_1 = __nccwpck_require__(21464);
var ApiError_1 = __nccwpck_require__(38365);
var ApiExportStatusView_1 = __nccwpck_require__(16946);
var ApiFTSMetricView_1 = __nccwpck_require__(37262);
var ApiFTSMetricsView_1 = __nccwpck_require__(15579);
var ApiGroupInvitationRequestView_1 = __nccwpck_require__(66888);
var ApiGroupInvitationUpdateRequestView_1 = __nccwpck_require__(50374);
var ApiGroupInvitationView_1 = __nccwpck_require__(30100);
var ApiHostViewAtlas_1 = __nccwpck_require__(83615);
var ApiIndexRequestView_1 = __nccwpck_require__(19924);
var ApiInstanceSizeView_1 = __nccwpck_require__(37445);
var ApiIntegrationView_1 = __nccwpck_require__(31954);
var ApiInvoiceView_1 = __nccwpck_require__(75563);
var ApiKeyView_1 = __nccwpck_require__(8995);
var ApiLimitView_1 = __nccwpck_require__(90811);
var ApiLineItemView_1 = __nccwpck_require__(2196);
var ApiMeasurementView_1 = __nccwpck_require__(86192);
var ApiMeasurementViewAtlas_1 = __nccwpck_require__(76345);
var ApiMeasurementsGeneralViewAtlas_1 = __nccwpck_require__(19811);
var ApiMeasurementsIndexesView_1 = __nccwpck_require__(3265);
var ApiMeasurementsNonIndexView_1 = __nccwpck_require__(27030);
var ApiMetricDataPointView_1 = __nccwpck_require__(74401);
var ApiMetricDataPointViewAtlas_1 = __nccwpck_require__(8275);
var ApiMicrosoftTeamsView_1 = __nccwpck_require__(26270);
var ApiMongoDBAccessLogsListView_1 = __nccwpck_require__(20279);
var ApiMongoDBAccessLogsView_1 = __nccwpck_require__(4845);
var ApiNamespaceObjView_1 = __nccwpck_require__(71561);
var ApiNamespacesView_1 = __nccwpck_require__(19788);
var ApiNewRelicView_1 = __nccwpck_require__(37038);
var ApiOpsGenieView_1 = __nccwpck_require__(73813);
var ApiOrganizationInvitationRequestView_1 = __nccwpck_require__(89637);
var ApiOrganizationInvitationUpdateRequestView_1 = __nccwpck_require__(36169);
var ApiOrganizationInvitationView_1 = __nccwpck_require__(40241);
var ApiOrganizationView_1 = __nccwpck_require__(81694);
var ApiPagerDutyView_1 = __nccwpck_require__(37738);
var ApiPaymentView_1 = __nccwpck_require__(98127);
var ApiPerformanceAdvisorIndexView_1 = __nccwpck_require__(89797);
var ApiPerformanceAdvisorResponseView_1 = __nccwpck_require__(73361);
var ApiPerformanceAdvisorShapeView_1 = __nccwpck_require__(74811);
var ApiPerformanceAdvisorSlowQueryListView_1 = __nccwpck_require__(87738);
var ApiPerformanceAdvisorSlowQueryView_1 = __nccwpck_require__(77304);
var ApiPolicyItemView_1 = __nccwpck_require__(19082);
var ApiPolicyView_1 = __nccwpck_require__(77608);
var ApiPrometheusView_1 = __nccwpck_require__(36985);
var ApiRefundView_1 = __nccwpck_require__(37126);
var ApiRestoreJobDeliveryView_1 = __nccwpck_require__(22496);
var ApiRestoreJobFileHashView_1 = __nccwpck_require__(74219);
var ApiRestoreJobView_1 = __nccwpck_require__(67733);
var ApiRoleAssignmentView_1 = __nccwpck_require__(16650);
var ApiSlackView_1 = __nccwpck_require__(50215);
var ApiSnapshotPartView_1 = __nccwpck_require__(6876);
var ApiSnapshotView_1 = __nccwpck_require__(7295);
var ApiSystemStatusView_1 = __nccwpck_require__(51148);
var ApiTeamResponseView_1 = __nccwpck_require__(96478);
var ApiTeamRoleView_1 = __nccwpck_require__(18899);
var ApiTeamView_1 = __nccwpck_require__(23380);
var ApiUserAccessListView_1 = __nccwpck_require__(99963);
var ApiUserEventViewForNdsGroup_1 = __nccwpck_require__(3198);
var ApiUserEventViewForOrg_1 = __nccwpck_require__(71748);
var ApiUserRoleAssignment_1 = __nccwpck_require__(69245);
var ApiVictorOpsView_1 = __nccwpck_require__(7794);
var ApiWebhookView_1 = __nccwpck_require__(2804);
var AppServiceAlertConfigViewForNdsGroup_1 = __nccwpck_require__(45676);
var AppServiceAlertView_1 = __nccwpck_require__(63243);
var AppServiceEventView_1 = __nccwpck_require__(17109);
var AppServiceMetricAlertConfigViewForNdsGroup_1 = __nccwpck_require__(65180);
var AppServiceMetricMatcherView_1 = __nccwpck_require__(33757);
var AppServiceMetricThresholdView_1 = __nccwpck_require__(12468);
var AuditLog_1 = __nccwpck_require__(58270);
var AutoExportPolicyView_1 = __nccwpck_require__(76643);
var AutoScaling_1 = __nccwpck_require__(84994);
var AutoScalingV15_1 = __nccwpck_require__(74167);
var AutomationConfigEventView_1 = __nccwpck_require__(99115);
var AvailableDeploymentView_1 = __nccwpck_require__(99849);
var AvailableProjectView_1 = __nccwpck_require__(73878);
var AzureAutoScaling_1 = __nccwpck_require__(98996);
var AzureCloudProviderContainer_1 = __nccwpck_require__(93671);
var AzureComputeAutoScaling_1 = __nccwpck_require__(79009);
var AzureHardwareSpec_1 = __nccwpck_require__(88122);
var AzureKeyVault_1 = __nccwpck_require__(37889);
var AzurePeerNetwork_1 = __nccwpck_require__(8447);
var AzurePeerNetworkRequest_1 = __nccwpck_require__(58704);
var AzurePrivateEndpoint_1 = __nccwpck_require__(53077);
var AzurePrivateLinkConnection_1 = __nccwpck_require__(80978);
var AzureProviderSettings_1 = __nccwpck_require__(86338);
var AzureRegionConfig_1 = __nccwpck_require__(80857);
var BiConnector_1 = __nccwpck_require__(50092);
var BillingEventViewForNdsGroup_1 = __nccwpck_require__(36519);
var BillingEventViewForOrg_1 = __nccwpck_require__(5399);
var BillingThresholdAlertConfigViewForNdsGroup_1 = __nccwpck_require__(43087);
var CharFilterhtmlStrip_1 = __nccwpck_require__(62930);
var CharFiltericuNormalize_1 = __nccwpck_require__(3439);
var CharFiltermapping_1 = __nccwpck_require__(83670);
var CharFiltermappingMappings_1 = __nccwpck_require__(72849);
var CharFilterpersian_1 = __nccwpck_require__(40897);
var Checkpoint_1 = __nccwpck_require__(49337);
var CloudProviderAccess_1 = __nccwpck_require__(52853);
var CloudProviderAccessAWSIAMRole_1 = __nccwpck_require__(64656);
var CloudProviderAccessDataLakeFeatureUsage_1 = __nccwpck_require__(93713);
var CloudProviderAccessEncryptionAtRestFeatureUsage_1 = __nccwpck_require__(74525);
var CloudProviderAccessExportSnapshotFeatureUsage_1 = __nccwpck_require__(35014);
var CloudProviderAccessFeatureUsage_1 = __nccwpck_require__(17195);
var CloudProviderAccessFeatureUsageDataLakeFeatureId_1 = __nccwpck_require__(94564);
var CloudProviderAccessFeatureUsageExportSnapshotFeatureId_1 = __nccwpck_require__(68027);
var CloudProviderAccessRole_1 = __nccwpck_require__(78657);
var CloudProviderContainer_1 = __nccwpck_require__(98564);
var ClusterAlertConfigViewForNdsGroup_1 = __nccwpck_require__(23896);
var ClusterAlertView_1 = __nccwpck_require__(76200);
var ClusterDescriptionConnectionStrings_1 = __nccwpck_require__(65872);
var ClusterDescriptionConnectionStringsPrivateEndpoint_1 = __nccwpck_require__(39629);
var ClusterDescriptionConnectionStringsPrivateEndpointEndpoint_1 = __nccwpck_require__(31757);
var ClusterDescriptionProcessArgs_1 = __nccwpck_require__(40209);
var ClusterDescriptionV15_1 = __nccwpck_require__(90151);
var ClusterEventViewForNdsGroup_1 = __nccwpck_require__(22587);
var ClusterMatcherView_1 = __nccwpck_require__(2188);
var ClusterOutageSimulation_1 = __nccwpck_require__(44511);
var ClusterOutageSimulationOutageFilter_1 = __nccwpck_require__(48253);
var ClusterProviderSettings_1 = __nccwpck_require__(73257);
var ClusterStatus_1 = __nccwpck_require__(79261);
var ClusterView_1 = __nccwpck_require__(87407);
var Collation_1 = __nccwpck_require__(36021);
var ComputeAutoScaling_1 = __nccwpck_require__(93977);
var ComputeAutoScalingV15_1 = __nccwpck_require__(56345);
var ConnectedOrgConfigView_1 = __nccwpck_require__(60556);
var ContainerPeer_1 = __nccwpck_require__(53390);
var CpsBackupThresholdAlertConfigViewForNdsGroup_1 = __nccwpck_require__(7632);
var CreateAWSEndpointRequest_1 = __nccwpck_require__(54155);
var CreateAWSEndpointRequestAllOf_1 = __nccwpck_require__(71414);
var CreateAzureEndpointRequest_1 = __nccwpck_require__(9389);
var CreateAzureEndpointRequestAllOf_1 = __nccwpck_require__(51538);
var CreateEndpointServiceRequest_1 = __nccwpck_require__(81168);
var CreateGCPEndpointGroupRequest_1 = __nccwpck_require__(16936);
var CreateGCPEndpointGroupRequestAllOf_1 = __nccwpck_require__(15587);
var CreateGCPForwardingRuleRequest_1 = __nccwpck_require__(89073);
var CreateOrganizationRequest_1 = __nccwpck_require__(60686);
var CreateOrganizationResponse_1 = __nccwpck_require__(21649);
var CreatePeeringConnection200Response_1 = __nccwpck_require__(65774);
var CreatePrivateEndpointRequest_1 = __nccwpck_require__(28733);
var CriteriaView_1 = __nccwpck_require__(66335);
var CustomCriteriaView_1 = __nccwpck_require__(34198);
var CustomDBRole_1 = __nccwpck_require__(43184);
var CustomZoneMappings_1 = __nccwpck_require__(15139);
var CustomerX509_1 = __nccwpck_require__(55784);
var DBAction_1 = __nccwpck_require__(12241);
var DBResource_1 = __nccwpck_require__(55955);
var DLSIngestionSink_1 = __nccwpck_require__(98706);
var DailyScheduleView_1 = __nccwpck_require__(90644);
var DataExplorerAccessedEventView_1 = __nccwpck_require__(99441);
var DataFederationQueryLimit_1 = __nccwpck_require__(65290);
var DataFederationTenantQueryLimit_1 = __nccwpck_require__(76371);
var DataLakeAWSCloudProviderConfig_1 = __nccwpck_require__(77619);
var DataLakeAtlasStore_1 = __nccwpck_require__(6667);
var DataLakeAtlasStoreReadPreference_1 = __nccwpck_require__(37671);
var DataLakeAtlasStoreReadPreferenceTag_1 = __nccwpck_require__(29277);
var DataLakeCloudProviderConfig_1 = __nccwpck_require__(14557);
var DataLakeDataProcessRegion_1 = __nccwpck_require__(11148);
var DataLakeDatabase_1 = __nccwpck_require__(24506);
var DataLakeDatabaseCollection_1 = __nccwpck_require__(81131);
var DataLakeDatabaseDataSource_1 = __nccwpck_require__(24264);
var DataLakeHTTPStore_1 = __nccwpck_require__(38273);
var DataLakeOnlineArchiveStore_1 = __nccwpck_require__(90868);
var DataLakeS3Store_1 = __nccwpck_require__(45985);
var DataLakeStorage_1 = __nccwpck_require__(75383);
var DataLakeStore_1 = __nccwpck_require__(65384);
var DataLakeTenant_1 = __nccwpck_require__(61963);
var DataLakeView_1 = __nccwpck_require__(45503);
var DataMetricAlertView_1 = __nccwpck_require__(96750);
var DataMetricEventView_1 = __nccwpck_require__(77559);
var DataMetricThresholdView_1 = __nccwpck_require__(53820);
var DataMetricValueView_1 = __nccwpck_require__(88589);
var DataProtectionSettings_1 = __nccwpck_require__(10010);
var DatabaseUser_1 = __nccwpck_require__(27171);
var DatadogNotificationView_1 = __nccwpck_require__(91757);
var DateCriteriaView_1 = __nccwpck_require__(6227);
var DedicatedHardwareSpec_1 = __nccwpck_require__(83767);
var DefaultAlertConfigViewForNdsGroup_1 = __nccwpck_require__(25223);
var DefaultAlertViewForNdsGroup_1 = __nccwpck_require__(55464);
var DefaultEventViewForNdsGroup_1 = __nccwpck_require__(22509);
var DefaultEventViewForOrg_1 = __nccwpck_require__(55830);
var DefaultScheduleView_1 = __nccwpck_require__(26449);
var Destination_1 = __nccwpck_require__(33523);
var DiskBackupBaseRestoreMember_1 = __nccwpck_require__(40499);
var DiskBackupCopySetting_1 = __nccwpck_require__(78548);
var DiskBackupExportJob_1 = __nccwpck_require__(90031);
var DiskBackupExportJobRequest_1 = __nccwpck_require__(90187);
var DiskBackupOnDemandSnapshotRequest_1 = __nccwpck_require__(17250);
var DiskBackupReplicaSet_1 = __nccwpck_require__(25064);
var DiskBackupRestoreJob_1 = __nccwpck_require__(40869);
var DiskBackupShardedClusterSnapshot_1 = __nccwpck_require__(71856);
var DiskBackupShardedClusterSnapshotMember_1 = __nccwpck_require__(79870);
var DiskBackupSnapshot_1 = __nccwpck_require__(2346);
var DiskBackupSnapshotAWSExportBucket_1 = __nccwpck_require__(14877);
var DiskBackupSnapshotSchedule_1 = __nccwpck_require__(75642);
var DiskGBAutoScaling_1 = __nccwpck_require__(26653);
var EmailNotificationView_1 = __nccwpck_require__(97120);
var EncryptionAtRest_1 = __nccwpck_require__(4728);
var EncryptionKeyAlertConfigViewForNdsGroup_1 = __nccwpck_require__(25383);
var Endpoint_1 = __nccwpck_require__(44134);
var EndpointService_1 = __nccwpck_require__(87684);
var EventViewForNdsGroup_1 = __nccwpck_require__(89398);
var EventViewForOrg_1 = __nccwpck_require__(9256);
var ExampleResourceResponseView20230101_1 = __nccwpck_require__(42882);
var ExampleResourceResponseView20230201_1 = __nccwpck_require__(70765);
var FTSIndex_1 = __nccwpck_require__(89400);
var FTSIndexAuditView_1 = __nccwpck_require__(22974);
var FTSSynonymMappingDefinition_1 = __nccwpck_require__(22500);
var FederatedUserView_1 = __nccwpck_require__(28099);
var FieldTransformation_1 = __nccwpck_require__(49309);
var ForNdsGroup_1 = __nccwpck_require__(65426);
var FreeAutoScaling_1 = __nccwpck_require__(6512);
var FreeProviderSettings_1 = __nccwpck_require__(78948);
var GCPAutoScaling_1 = __nccwpck_require__(66506);
var GCPCloudProviderContainer_1 = __nccwpck_require__(86394);
var GCPComputeAutoScaling_1 = __nccwpck_require__(45143);
var GCPConsumerForwardingRule_1 = __nccwpck_require__(982);
var GCPEndpointGroup_1 = __nccwpck_require__(2052);
var GCPEndpointService_1 = __nccwpck_require__(46486);
var GCPHardwareSpec_1 = __nccwpck_require__(82485);
var GCPPeerVpc_1 = __nccwpck_require__(89790);
var GCPPeerVpcRequest_1 = __nccwpck_require__(87101);
var GCPProviderSettings_1 = __nccwpck_require__(11900);
var GCPRegionConfig_1 = __nccwpck_require__(3809);
var GeoSharding_1 = __nccwpck_require__(9449);
var GetPeeringConnection200Response_1 = __nccwpck_require__(36082);
var GoogleCloudKMS_1 = __nccwpck_require__(96428);
var GreaterThanDaysThresholdView_1 = __nccwpck_require__(6917);
var GreaterThanRawThresholdAlertConfigViewForNdsGroup_1 = __nccwpck_require__(50080);
var GreaterThanRawThresholdView_1 = __nccwpck_require__(16557);
var GreaterThanTimeThresholdView_1 = __nccwpck_require__(96310);
var Group_1 = __nccwpck_require__(4550);
var GroupMaintenanceWindow_1 = __nccwpck_require__(53666);
var GroupName_1 = __nccwpck_require__(66106);
var GroupNotificationView_1 = __nccwpck_require__(9205);
var GroupPaginatedEventView_1 = __nccwpck_require__(97096);
var GroupPaginatedIntegrationView_1 = __nccwpck_require__(31898);
var GroupSettings_1 = __nccwpck_require__(56566);
var HardwareSpec_1 = __nccwpck_require__(94850);
var HipChatNotificationView_1 = __nccwpck_require__(62633);
var HostAlertConfigViewForNdsGroup_1 = __nccwpck_require__(76383);
var HostAlertViewForNdsGroup_1 = __nccwpck_require__(7918);
var HostEventViewForNdsGroup_1 = __nccwpck_require__(81220);
var HostMatcherView_1 = __nccwpck_require__(62435);
var HostMetricAlertConfigViewForNdsGroup_1 = __nccwpck_require__(43167);
var HostMetricAlertView_1 = __nccwpck_require__(55034);
var HostMetricEventView_1 = __nccwpck_require__(84700);
var HostMetricThresholdView_1 = __nccwpck_require__(40076);
var HostMetricValueView_1 = __nccwpck_require__(38647);
var IdentityProviderUpdate_1 = __nccwpck_require__(1260);
var IdentityProviderView_1 = __nccwpck_require__(66181);
var IndexOptions_1 = __nccwpck_require__(15397);
var IngestionPipeline_1 = __nccwpck_require__(65240);
var IngestionPipelineRun_1 = __nccwpck_require__(13298);
var IngestionSink_1 = __nccwpck_require__(63698);
var IngestionSource_1 = __nccwpck_require__(28145);
var InheritedRole_1 = __nccwpck_require__(38470);
var IntegrationViewForNdsGroup_1 = __nccwpck_require__(7223);
var Label_1 = __nccwpck_require__(99302);
var LegacyClusterDescription_1 = __nccwpck_require__(30489);
var LegacyReplicationSpec_1 = __nccwpck_require__(98195);
var LessThanDaysThresholdView_1 = __nccwpck_require__(82373);
var LessThanTimeThresholdAlertConfigViewForNdsGroup_1 = __nccwpck_require__(89768);
var LessThanTimeThresholdView_1 = __nccwpck_require__(39700);
var Link_1 = __nccwpck_require__(13667);
var LinkAtlas_1 = __nccwpck_require__(66315);
var ListPeeringConnections200Response_1 = __nccwpck_require__(92876);
var LiveMigrationRequestView_1 = __nccwpck_require__(24969);
var LiveMigrationResponseView_1 = __nccwpck_require__(60011);
var ManagedNamespaceView_1 = __nccwpck_require__(83063);
var ManagedNamespaces_1 = __nccwpck_require__(69320);
var MatcherView_1 = __nccwpck_require__(26129);
var MicrosoftTeamsNotificationView_1 = __nccwpck_require__(70258);
var MonthlyScheduleView_1 = __nccwpck_require__(63550);
var NDSAuditViewForNdsGroup_1 = __nccwpck_require__(59466);
var NDSAuditViewForOrg_1 = __nccwpck_require__(31234);
var NDSAutoScalingAuditViewForNdsGroup_1 = __nccwpck_require__(1362);
var NDSLDAP_1 = __nccwpck_require__(2787);
var NDSLDAPVerifyConnectivityJobRequest_1 = __nccwpck_require__(6232);
var NDSLDAPVerifyConnectivityJobRequestParams_1 = __nccwpck_require__(91565);
var NDSLDAPVerifyConnectivityJobRequestValidation_1 = __nccwpck_require__(55669);
var NDSLabel_1 = __nccwpck_require__(40477);
var NDSNotificationView_1 = __nccwpck_require__(39724);
var NDSServerlessInstanceAuditView_1 = __nccwpck_require__(47775);
var NDSTenantEndpointAuditView_1 = __nccwpck_require__(76464);
var NDSUserToDNMapping_1 = __nccwpck_require__(46878);
var NDSX509UserAuthenticationAlertConfigViewForNdsGroup_1 = __nccwpck_require__(46327);
var NetworkPermissionEntry_1 = __nccwpck_require__(61046);
var NetworkPermissionEntryStatus_1 = __nccwpck_require__(88181);
var NotificationView_1 = __nccwpck_require__(58032);
var NotificationViewForNdsGroup_1 = __nccwpck_require__(25811);
var NumberMetricAlertView_1 = __nccwpck_require__(68786);
var NumberMetricEventView_1 = __nccwpck_require__(64254);
var NumberMetricThresholdView_1 = __nccwpck_require__(78443);
var NumberMetricValueView_1 = __nccwpck_require__(66713);
var OnDemandCpsSnapshotSource_1 = __nccwpck_require__(63812);
var OnlineArchive_1 = __nccwpck_require__(80656);
var OnlineArchiveSchedule_1 = __nccwpck_require__(79918);
var OpsGenieNotificationView_1 = __nccwpck_require__(94627);
var OrgEventViewForOrg_1 = __nccwpck_require__(53108);
var OrgFederationSettingsView_1 = __nccwpck_require__(52386);
var OrgGroupView_1 = __nccwpck_require__(77229);
var OrgNotificationView_1 = __nccwpck_require__(12611);
var OrgPaginatedEventView_1 = __nccwpck_require__(96032);
var OrganizationSettings_1 = __nccwpck_require__(39500);
var PagerDutyNotificationView_1 = __nccwpck_require__(96779);
var PaginatedAWSPeerVpcView_1 = __nccwpck_require__(14198);
var PaginatedAlertConfigView_1 = __nccwpck_require__(99072);
var PaginatedAlertView_1 = __nccwpck_require__(57737);
var PaginatedApiApiUserView_1 = __nccwpck_require__(87543);
var PaginatedApiAppUserView_1 = __nccwpck_require__(45543);
var PaginatedApiAtlasCheckpointView_1 = __nccwpck_require__(96979);
var PaginatedApiAtlasDatabaseUserView_1 = __nccwpck_require__(70739);
var PaginatedApiAtlasDiskBackupExportJobView_1 = __nccwpck_require__(28305);
var PaginatedApiAtlasProviderRegionsView_1 = __nccwpck_require__(90186);
var PaginatedApiAtlasServerlessBackupRestoreJobView_1 = __nccwpck_require__(52224);
var PaginatedApiAtlasServerlessBackupSnapshotView_1 = __nccwpck_require__(17507);
var PaginatedApiInvoiceView_1 = __nccwpck_require__(98279);
var PaginatedApiUserAccessListView_1 = __nccwpck_require__(91523);
var PaginatedAppUserView_1 = __nccwpck_require__(64247);
var PaginatedAtlasGroupView_1 = __nccwpck_require__(19845);
var PaginatedAzurePeerNetworkView_1 = __nccwpck_require__(80692);
var PaginatedBackupSnapshotExportBucketView_1 = __nccwpck_require__(82375);
var PaginatedBackupSnapshotView_1 = __nccwpck_require__(46464);
var PaginatedCloudBackupReplicaSetView_1 = __nccwpck_require__(49242);
var PaginatedCloudBackupRestoreJobView_1 = __nccwpck_require__(38098);
var PaginatedCloudBackupShardedClusterSnapshotView_1 = __nccwpck_require__(85997);
var PaginatedCloudProviderContainerView_1 = __nccwpck_require__(44373);
var PaginatedClusterDescriptionV15View_1 = __nccwpck_require__(9540);
var PaginatedDatabaseView_1 = __nccwpck_require__(77325);
var PaginatedDiskPartitionView_1 = __nccwpck_require__(22143);
var PaginatedGCPPeerVpcView_1 = __nccwpck_require__(27042);
var PaginatedHostViewAtlas_1 = __nccwpck_require__(60047);
var PaginatedLegacyClusterView_1 = __nccwpck_require__(30368);
var PaginatedNetworkAccessView_1 = __nccwpck_require__(15444);
var PaginatedOnlineArchiveView_1 = __nccwpck_require__(88748);
var PaginatedOrgGroupView_1 = __nccwpck_require__(29466);
var PaginatedOrganizationView_1 = __nccwpck_require__(9719);
var PaginatedPipelineRunView_1 = __nccwpck_require__(44632);
var PaginatedPrivateLinkConnectionView_1 = __nccwpck_require__(77067);
var PaginatedRestoreJobView_1 = __nccwpck_require__(72537);
var PaginatedServerlessInstanceDescriptionView_1 = __nccwpck_require__(51042);
var PaginatedSnapshotView_1 = __nccwpck_require__(78420);
var PaginatedTeamRoleView_1 = __nccwpck_require__(65057);
var PaginatedTeamView_1 = __nccwpck_require__(64078);
var PaginatedTenantRestoreView_1 = __nccwpck_require__(81140);
var PaginatedTenantSnapshotView_1 = __nccwpck_require__(93391);
var PaginatedUserCertView_1 = __nccwpck_require__(68283);
var PartitionField_1 = __nccwpck_require__(69512);
var PartitionFieldView_1 = __nccwpck_require__(83211);
var PemFileInfo_1 = __nccwpck_require__(73031);
var PemFileInfoView_1 = __nccwpck_require__(56229);
var PerformanceAdvisorOpStatsView_1 = __nccwpck_require__(56889);
var PerformanceAdvisorOperationView_1 = __nccwpck_require__(17546);
var PeriodicCpsSnapshotSource_1 = __nccwpck_require__(34963);
var PipelineRunStats_1 = __nccwpck_require__(10259);
var PrivateIPModeView_1 = __nccwpck_require__(70924);
var PrivateNetworkEndpointIdEntry_1 = __nccwpck_require__(62273);
var ProjectSettingItemView_1 = __nccwpck_require__(20348);
var ProviderRegions_1 = __nccwpck_require__(36953);
var RPUMetricThresholdView_1 = __nccwpck_require__(68541);
var Raw_1 = __nccwpck_require__(84190);
var RawMetricAlertView_1 = __nccwpck_require__(47721);
var RawMetricEventView_1 = __nccwpck_require__(71482);
var RawMetricThresholdView_1 = __nccwpck_require__(13910);
var RawMetricValueView_1 = __nccwpck_require__(30495);
var RegionConfig_1 = __nccwpck_require__(4040);
var RegionSpec_1 = __nccwpck_require__(350);
var ReplicaSetAlertConfigViewForNdsGroup_1 = __nccwpck_require__(68426);
var ReplicaSetAlertViewForNdsGroup_1 = __nccwpck_require__(82985);
var ReplicaSetMatcherView_1 = __nccwpck_require__(9636);
var ReplicaSetThresholdAlertConfigViewForNdsGroup_1 = __nccwpck_require__(39460);
var ReplicationSpec_1 = __nccwpck_require__(31711);
var Role_1 = __nccwpck_require__(52886);
var RoleAssignment_1 = __nccwpck_require__(52359);
var RoleMappingView_1 = __nccwpck_require__(86573);
var SMSNotificationView_1 = __nccwpck_require__(57998);
var SampleDatasetStatus_1 = __nccwpck_require__(44550);
var ServerlessAWSTenantEndpoint_1 = __nccwpck_require__(44499);
var ServerlessAWSTenantEndpointUpdate_1 = __nccwpck_require__(87088);
var ServerlessAzureTenantEndpoint_1 = __nccwpck_require__(98234);
var ServerlessAzureTenantEndpointUpdate_1 = __nccwpck_require__(99692);
var ServerlessBackupOptions_1 = __nccwpck_require__(6012);
var ServerlessBackupRestoreJob_1 = __nccwpck_require__(32160);
var ServerlessBackupSnapshot_1 = __nccwpck_require__(54179);
var ServerlessInstanceDescription_1 = __nccwpck_require__(99616);
var ServerlessInstanceDescriptionConnectionStrings_1 = __nccwpck_require__(50019);
var ServerlessInstanceDescriptionConnectionStringsPrivateEndpoint_1 = __nccwpck_require__(31737);
var ServerlessInstanceDescriptionConnectionStringsPrivateEndpointEndpoint_1 = __nccwpck_require__(27346);
var ServerlessInstanceDescriptionCreate_1 = __nccwpck_require__(71043);
var ServerlessInstanceDescriptionUpdate_1 = __nccwpck_require__(4867);
var ServerlessMetricAlertConfigViewForNdsGroup_1 = __nccwpck_require__(18778);
var ServerlessMetricThresholdView_1 = __nccwpck_require__(19075);
var ServerlessProviderSettings_1 = __nccwpck_require__(94921);
var ServerlessTenantEndpoint_1 = __nccwpck_require__(93862);
var ServerlessTenantEndpointCreate_1 = __nccwpck_require__(42488);
var ServerlessTenantEndpointUpdate_1 = __nccwpck_require__(22929);
var SlackNotificationView_1 = __nccwpck_require__(38646);
var SnapshotRetention_1 = __nccwpck_require__(13842);
var SnapshotSchedule_1 = __nccwpck_require__(72273);
var Source_1 = __nccwpck_require__(11861);
var SummaryNotificationView_1 = __nccwpck_require__(58790);
var SynonymSource_1 = __nccwpck_require__(13497);
var TargetOrgRequestView_1 = __nccwpck_require__(56073);
var TargetOrgView_1 = __nccwpck_require__(74898);
var TeamEventView_1 = __nccwpck_require__(59703);
var TeamEventViewForNdsGroup_1 = __nccwpck_require__(32758);
var TeamNotificationView_1 = __nccwpck_require__(63690);
var TenantHardwareSpec_1 = __nccwpck_require__(49179);
var TenantRegionConfig_1 = __nccwpck_require__(26473);
var TenantRestore_1 = __nccwpck_require__(72618);
var TenantSnapshot_1 = __nccwpck_require__(6559);
var ThresholdViewInteger_1 = __nccwpck_require__(83361);
var TimeMetricAlertView_1 = __nccwpck_require__(2537);
var TimeMetricEventView_1 = __nccwpck_require__(63955);
var TimeMetricThresholdView_1 = __nccwpck_require__(64138);
var TimeMetricValueView_1 = __nccwpck_require__(47088);
var ToggleView_1 = __nccwpck_require__(52644);
var TokenFilterasciiFolding_1 = __nccwpck_require__(56673);
var TokenFilterdaitchMokotoffSoundex_1 = __nccwpck_require__(80028);
var TokenFilteredgeGram_1 = __nccwpck_require__(52943);
var TokenFiltericuFolding_1 = __nccwpck_require__(1709);
var TokenFiltericuNormalizer_1 = __nccwpck_require__(77640);
var TokenFilterlength_1 = __nccwpck_require__(77829);
var TokenFilterlowercase_1 = __nccwpck_require__(50482);
var TokenFilternGram_1 = __nccwpck_require__(75735);
var TokenFilterregex_1 = __nccwpck_require__(25508);
var TokenFilterreverse_1 = __nccwpck_require__(90894);
var TokenFiltershingle_1 = __nccwpck_require__(9520);
var TokenFiltersnowballStemming_1 = __nccwpck_require__(95716);
var TokenFilterstopword_1 = __nccwpck_require__(15773);
var TokenFiltertrim_1 = __nccwpck_require__(3500);
var TokenizeredgeGram_1 = __nccwpck_require__(37215);
var Tokenizerkeyword_1 = __nccwpck_require__(45815);
var TokenizernGram_1 = __nccwpck_require__(84324);
var TokenizerregexCaptureGroup_1 = __nccwpck_require__(89100);
var TokenizerregexSplit_1 = __nccwpck_require__(46072);
var Tokenizerstandard_1 = __nccwpck_require__(60754);
var TokenizeruaxUrlEmail_1 = __nccwpck_require__(79147);
var Tokenizerwhitespace_1 = __nccwpck_require__(5642);
var TriggerIngestionRequest_1 = __nccwpck_require__(40790);
var UpdateCustomDBRole_1 = __nccwpck_require__(39570);
var UserCert_1 = __nccwpck_require__(19091);
var UserEventViewForNdsGroup_1 = __nccwpck_require__(88613);
var UserEventViewForOrg_1 = __nccwpck_require__(46368);
var UserNotificationView_1 = __nccwpck_require__(45088);
var UserScope_1 = __nccwpck_require__(51056);
var UserSecurity_1 = __nccwpck_require__(88283);
var ValidationView_1 = __nccwpck_require__(73471);
var VictorOpsNotificationView_1 = __nccwpck_require__(94982);
var WebhookNotificationView_1 = __nccwpck_require__(5000);
var WeeklyScheduleView_1 = __nccwpck_require__(67583);
var X509Certificate_1 = __nccwpck_require__(25573);
var X509CertificateView_1 = __nccwpck_require__(21689);
var ZoneMapping_1 = __nccwpck_require__(48732);
var primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
var supportedMediaTypes = {
    "application/json": Infinity,
    "application/octet-stream": 0,
    "application/x-www-form-urlencoded": 0
};
var enumsMap = new Set([
    "AWSCloudProviderContainerRegionNameEnum",
    "AWSCloudProviderContainerProviderNameEnum",
    "AWSComputeAutoScalingMaxInstanceSizeEnum",
    "AWSComputeAutoScalingMinInstanceSizeEnum",
    "AWSHardwareSpecEbsVolumeTypeEnum",
    "AWSHardwareSpecInstanceSizeEnum",
    "AWSInterfaceEndpointConnectionStatusEnum",
    "AWSKMSRegionEnum",
    "AWSPeerVpcErrorStateNameEnum",
    "AWSPeerVpcStatusNameEnum",
    "AWSPeerVpcRequestProviderNameEnum",
    "AWSPeerVpcRequestErrorStateNameEnum",
    "AWSPeerVpcRequestStatusNameEnum",
    "AWSPrivateLinkConnectionStatusEnum",
    "AWSProviderSettingsInstanceSizeNameEnum",
    "AWSProviderSettingsRegionNameEnum",
    "AWSProviderSettingsVolumeTypeEnum",
    "AWSRegionConfigProviderNameEnum",
    "AWSRegionConfigRegionNameEnum",
    "AlertAuditTypeView",
    "AlertConfigAuditTypeView",
    "AlertViewStatusEnum",
    "AlertViewForNdsGroupStatusEnum",
    "ApiAtlasContainerPeerViewRequestProviderNameEnum",
    "ApiAtlasContainerPeerViewRequestErrorStateNameEnum",
    "ApiAtlasContainerPeerViewRequestStatusNameEnum",
    "ApiAtlasContainerPeerViewRequestStatusEnum",
    "ApiAtlasFTSAnalyzersViewManualCharFiltersInnerTypeEnum",
    "ApiAtlasFTSAnalyzersViewManualTokenFiltersInnerOriginalTokensEnum",
    "ApiAtlasFTSAnalyzersViewManualTokenFiltersInnerTypeEnum",
    "ApiAtlasFTSAnalyzersViewManualTokenFiltersInnerTermNotInBoundsEnum",
    "ApiAtlasFTSAnalyzersViewManualTokenFiltersInnerNormalizationFormEnum",
    "ApiAtlasFTSAnalyzersViewManualTokenFiltersInnerMatchesEnum",
    "ApiAtlasFTSAnalyzersViewManualTokenFiltersInnerStemmerNameEnum",
    "ApiAtlasFTSAnalyzersViewManualTokenizerTypeEnum",
    "ApiAtlasNetPeerRequestBaseProviderNameEnum",
    "ApiCheckpointPartViewTypeNameEnum",
    "ApiCreateApiKeyViewRolesEnum",
    "ApiDatadogViewRegionEnum",
    "ApiDatadogViewTypeEnum",
    "ApiDeleteCopiedBackupsViewCloudProviderEnum",
    "ApiFTSMetricViewMetricNameEnum",
    "ApiFTSMetricViewUnitsEnum",
    "ApiGroupInvitationRequestViewRolesEnum",
    "ApiGroupInvitationUpdateRequestViewRolesEnum",
    "ApiGroupInvitationViewRolesEnum",
    "ApiHostViewAtlasTypeNameEnum",
    "ApiInvoiceViewStatusNameEnum",
    "ApiLineItemViewSkuEnum",
    "ApiMeasurementViewUnitsEnum",
    "ApiMeasurementViewAtlasUnitsEnum",
    "ApiMeasurementsGeneralViewAtlasGranularityEnum",
    "ApiMeasurementsIndexesViewGranularityEnum",
    "ApiMeasurementsNonIndexViewGranularityEnum",
    "ApiMicrosoftTeamsViewTypeEnum",
    "ApiNamespaceObjViewTypeEnum",
    "ApiNewRelicViewTypeEnum",
    "ApiOpsGenieViewRegionEnum",
    "ApiOpsGenieViewTypeEnum",
    "ApiOrganizationInvitationRequestViewRolesEnum",
    "ApiOrganizationInvitationUpdateRequestViewRolesEnum",
    "ApiOrganizationInvitationViewRolesEnum",
    "ApiPagerDutyViewRegionEnum",
    "ApiPagerDutyViewTypeEnum",
    "ApiPaymentViewStatusNameEnum",
    "ApiPerformanceAdvisorIndexViewIndexEnum",
    "ApiPolicyItemViewFrequencyIntervalEnum",
    "ApiPolicyItemViewFrequencyTypeEnum",
    "ApiPolicyItemViewRetentionUnitEnum",
    "ApiPrometheusViewSchemeEnum",
    "ApiPrometheusViewServiceDiscoveryEnum",
    "ApiPrometheusViewTypeEnum",
    "ApiRestoreJobDeliveryViewMethodNameEnum",
    "ApiRestoreJobDeliveryViewStatusNameEnum",
    "ApiRestoreJobFileHashViewTypeNameEnum",
    "ApiRestoreJobViewStatusNameEnum",
    "ApiRoleAssignmentViewRoleNameEnum",
    "ApiSlackViewTypeEnum",
    "ApiSnapshotPartViewCompressionSettingEnum",
    "ApiSnapshotPartViewTypeNameEnum",
    "ApiSystemStatusViewAppNameEnum",
    "ApiTeamRoleViewRoleNamesEnum",
    "ApiUserEventTypeViewForNdsGroup",
    "ApiUserEventTypeViewForOrg",
    "ApiUserRoleAssignmentRolesEnum",
    "ApiVictorOpsViewTypeEnum",
    "ApiWebhookViewTypeEnum",
    "AppServiceAlertViewStatusEnum",
    "AppServiceEventTypeView",
    "AppServiceEventTypeViewAlertable",
    "AppServiceEventTypeViewAlertableNoThreshold",
    "AppServiceEventTypeViewAlertableWithThreshold",
    "AppServiceMetricMatcherField",
    "AppServiceMetricMatcherViewOperatorEnum",
    "AppServiceMetricThresholdViewModeEnum",
    "AuditLogConfigurationTypeEnum",
    "AutoExportPolicyViewFrequencyTypeEnum",
    "AutomationConfigEventTypeView",
    "AzureCloudProviderContainerRegionEnum",
    "AzureCloudProviderContainerProviderNameEnum",
    "AzureComputeAutoScalingMaxInstanceSizeEnum",
    "AzureComputeAutoScalingMinInstanceSizeEnum",
    "AzureHardwareSpecInstanceSizeEnum",
    "AzureKeyVaultAzureEnvironmentEnum",
    "AzurePeerNetworkStatusEnum",
    "AzurePeerNetworkRequestProviderNameEnum",
    "AzurePeerNetworkRequestStatusEnum",
    "AzurePrivateEndpointStatusEnum",
    "AzurePrivateLinkConnectionStatusEnum",
    "AzureProviderSettingsDiskTypeNameEnum",
    "AzureProviderSettingsInstanceSizeNameEnum",
    "AzureProviderSettingsRegionNameEnum",
    "AzureRegionConfigProviderNameEnum",
    "AzureRegionConfigRegionNameEnum",
    "BiConnectorReadPreferenceEnum",
    "BillingEventTypeViewAlertableWithThreshold",
    "BillingEventTypeViewForNdsGroup",
    "BillingEventTypeViewForOrg",
    "CharFilterhtmlStripTypeEnum",
    "CharFiltericuNormalizeTypeEnum",
    "CharFiltermappingTypeEnum",
    "CharFilterpersianTypeEnum",
    "CloudProviderAccessAWSIAMRoleProviderNameEnum",
    "CloudProviderAccessDataLakeFeatureUsageFeatureTypeEnum",
    "CloudProviderAccessEncryptionAtRestFeatureUsageFeatureTypeEnum",
    "CloudProviderAccessExportSnapshotFeatureUsageFeatureTypeEnum",
    "CloudProviderAccessFeatureUsageFeatureTypeEnum",
    "CloudProviderAccessRoleProviderNameEnum",
    "CloudProviderContainerRegionEnum",
    "CloudProviderContainerProviderNameEnum",
    "CloudProviderContainerRegionsEnum",
    "CloudProviderContainerRegionNameEnum",
    "ClusterAlertViewStatusEnum",
    "ClusterDescriptionConnectionStringsPrivateEndpointTypeEnum",
    "ClusterDescriptionConnectionStringsPrivateEndpointEndpointProviderNameEnum",
    "ClusterDescriptionProcessArgsDefaultReadConcernEnum",
    "ClusterDescriptionProcessArgsMinimumEnabledTlsProtocolEnum",
    "ClusterDescriptionV15ClusterTypeEnum",
    "ClusterDescriptionV15EncryptionAtRestProviderEnum",
    "ClusterDescriptionV15MongoDBMajorVersionEnum",
    "ClusterDescriptionV15RootCertTypeEnum",
    "ClusterDescriptionV15StateNameEnum",
    "ClusterDescriptionV15VersionReleaseSystemEnum",
    "ClusterEventTypeViewAlertable",
    "ClusterEventTypeViewForNdsGroup",
    "ClusterMatcherField",
    "ClusterMatcherViewOperatorEnum",
    "ClusterOutageSimulationStateEnum",
    "ClusterOutageSimulationOutageFilterCloudProviderEnum",
    "ClusterOutageSimulationOutageFilterTypeEnum",
    "ClusterProviderSettingsInstanceSizeNameEnum",
    "ClusterProviderSettingsVolumeTypeEnum",
    "ClusterProviderSettingsDiskTypeNameEnum",
    "ClusterProviderSettingsBackingProviderNameEnum",
    "ClusterStatusChangeStatusEnum",
    "ClusterViewAvailabilityEnum",
    "ClusterViewTypeEnum",
    "CollationAlternateEnum",
    "CollationCaseFirstEnum",
    "CollationLocaleEnum",
    "CollationMaxVariableEnum",
    "ConnectedOrgConfigViewPostAuthRoleGrantsEnum",
    "CpsBackupEventTypeViewForNdsGroupAlertableWithThreshold",
    "CreateEndpointServiceRequestProviderNameEnum",
    "CreatePeeringConnection200ResponseErrorStateNameEnum",
    "CreatePeeringConnection200ResponseStatusNameEnum",
    "CreatePeeringConnection200ResponseStatusEnum",
    "CriteriaViewTypeEnum",
    "CriteriaViewDateFormatEnum",
    "CustomCriteriaViewTypeEnum",
    "DBActionActionEnum",
    "DLSIngestionSinkMetadataProviderEnum",
    "DLSIngestionSinkTypeEnum",
    "DataExplorerAccessedEventTypeView",
    "DataFederationQueryLimitOverrunPolicyEnum",
    "DataFederationTenantQueryLimitOverrunPolicyEnum",
    "DataLakeAtlasStoreReadPreferenceModeEnum",
    "DataLakeDataProcessRegionCloudProviderEnum",
    "DataLakeDatabaseDataSourceDefaultFormatEnum",
    "DataLakeRegion",
    "DataLakeS3StoreAdditionalStorageClassesEnum",
    "DataLakeS3StoreRegionEnum",
    "DataLakeStoreAdditionalStorageClassesEnum",
    "DataLakeStoreRegionEnum",
    "DataMetricAlertViewStatusEnum",
    "DataMetricThresholdViewModeEnum",
    "DataMetricUnits",
    "DataProtectionSettingsStateEnum",
    "DatabaseUserAwsIAMTypeEnum",
    "DatabaseUserDatabaseNameEnum",
    "DatabaseUserLdapAuthTypeEnum",
    "DatabaseUserX509TypeEnum",
    "DatadogNotificationViewDatadogRegionEnum",
    "DatadogNotificationViewTypeNameEnum",
    "DateCriteriaViewDateFormatEnum",
    "DateCriteriaViewTypeEnum",
    "DedicatedHardwareSpecEbsVolumeTypeEnum",
    "DedicatedHardwareSpecInstanceSizeEnum",
    "DefaultAlertConfigViewForNdsGroupEventTypeNameEnum",
    "DefaultAlertViewForNdsGroupEventTypeNameEnum",
    "DefaultAlertViewForNdsGroupStatusEnum",
    "DefaultEventViewForNdsGroupEventTypeNameEnum",
    "DefaultEventViewForOrgEventTypeNameEnum",
    "DestinationHostnameSchemaTypeEnum",
    "DiskBackupCopySettingCloudProviderEnum",
    "DiskBackupCopySettingFrequenciesEnum",
    "DiskBackupExportJobStateEnum",
    "DiskBackupReplicaSetCloudProviderEnum",
    "DiskBackupReplicaSetFrequencyTypeEnum",
    "DiskBackupReplicaSetSnapshotTypeEnum",
    "DiskBackupReplicaSetStatusEnum",
    "DiskBackupReplicaSetTypeEnum",
    "DiskBackupRestoreJobDeliveryTypeEnum",
    "DiskBackupShardedClusterSnapshotFrequencyTypeEnum",
    "DiskBackupShardedClusterSnapshotSnapshotTypeEnum",
    "DiskBackupShardedClusterSnapshotStatusEnum",
    "DiskBackupShardedClusterSnapshotTypeEnum",
    "DiskBackupShardedClusterSnapshotMemberCloudProviderEnum",
    "DiskBackupSnapshotCloudProviderEnum",
    "DiskBackupSnapshotFrequencyTypeEnum",
    "DiskBackupSnapshotSnapshotTypeEnum",
    "DiskBackupSnapshotStatusEnum",
    "DiskBackupSnapshotTypeEnum",
    "DiskBackupSnapshotAWSExportBucketCloudProviderEnum",
    "EmailNotificationViewTypeNameEnum",
    "EncryptionKeyEventTypeViewAlertable",
    "EndpointConnectionStatusEnum",
    "EndpointStatusEnum",
    "EndpointServiceStatusEnum",
    "EventTypeForNdsGroup",
    "EventTypeForOrg",
    "FTSIndexAnalyzerEnum",
    "FTSIndexSearchAnalyzerEnum",
    "FTSIndexStatusEnum",
    "FTSIndexAuditTypeView",
    "FTSSynonymMappingDefinitionAnalyzerEnum",
    "FieldTransformationTypeEnum",
    "FreeProviderSettingsBackingProviderNameEnum",
    "FreeProviderSettingsInstanceSizeNameEnum",
    "GCPCloudProviderContainerRegionsEnum",
    "GCPCloudProviderContainerProviderNameEnum",
    "GCPComputeAutoScalingMaxInstanceSizeEnum",
    "GCPComputeAutoScalingMinInstanceSizeEnum",
    "GCPConsumerForwardingRuleStatusEnum",
    "GCPEndpointGroupStatusEnum",
    "GCPEndpointServiceStatusEnum",
    "GCPHardwareSpecInstanceSizeEnum",
    "GCPPeerVpcStatusEnum",
    "GCPPeerVpcRequestProviderNameEnum",
    "GCPPeerVpcRequestStatusEnum",
    "GCPProviderSettingsInstanceSizeNameEnum",
    "GCPProviderSettingsRegionNameEnum",
    "GCPRegionConfigProviderNameEnum",
    "GCPRegionConfigRegionNameEnum",
    "GetPeeringConnection200ResponseErrorStateNameEnum",
    "GetPeeringConnection200ResponseStatusNameEnum",
    "GetPeeringConnection200ResponseStatusEnum",
    "GreaterThanDaysThresholdViewOperatorEnum",
    "GreaterThanDaysThresholdViewUnitsEnum",
    "GreaterThanRawThresholdViewOperatorEnum",
    "GreaterThanTimeThresholdViewOperatorEnum",
    "GroupNotificationViewRolesEnum",
    "GroupNotificationViewTypeNameEnum",
    "HardwareSpecEbsVolumeTypeEnum",
    "HardwareSpecInstanceSizeEnum",
    "HipChatNotificationViewTypeNameEnum",
    "HostAlertViewForNdsGroupStatusEnum",
    "HostEventTypeViewForNdsGroup",
    "HostEventTypeViewForNdsGroupAlertable",
    "HostMatcherField",
    "HostMatcherViewOperatorEnum",
    "HostMetricAlertViewStatusEnum",
    "HostMetricEventTypeView",
    "HostMetricEventTypeViewAlertable",
    "HostMetricThresholdViewModeEnum",
    "HostMetricValueViewUnitsEnum",
    "IdentityProviderUpdateRequestBindingEnum",
    "IdentityProviderUpdateResponseSignatureAlgorithmEnum",
    "IdentityProviderUpdateStatusEnum",
    "IdentityProviderViewRequestBindingEnum",
    "IdentityProviderViewResponseSignatureAlgorithmEnum",
    "IdentityProviderViewStatusEnum",
    "IngestionPipelineStateEnum",
    "IngestionPipelineRunBackupFrequencyTypeEnum",
    "IngestionPipelineRunPhaseEnum",
    "IngestionPipelineRunStateEnum",
    "IngestionSinkMetadataProviderEnum",
    "IngestionSinkTypeEnum",
    "IngestionSourceTypeEnum",
    "InstanceSize",
    "IntegrationViewForNdsGroupRegionEnum",
    "IntegrationViewForNdsGroupTypeEnum",
    "IntegrationViewForNdsGroupSchemeEnum",
    "IntegrationViewForNdsGroupServiceDiscoveryEnum",
    "LegacyClusterDescriptionClusterTypeEnum",
    "LegacyClusterDescriptionEncryptionAtRestProviderEnum",
    "LegacyClusterDescriptionMongoDBMajorVersionEnum",
    "LegacyClusterDescriptionReplicationFactorEnum",
    "LegacyClusterDescriptionRootCertTypeEnum",
    "LegacyClusterDescriptionStateNameEnum",
    "LegacyClusterDescriptionVersionReleaseSystemEnum",
    "LessThanDaysThresholdViewOperatorEnum",
    "LessThanDaysThresholdViewUnitsEnum",
    "LessThanTimeThresholdViewOperatorEnum",
    "LiveMigrationResponseViewStatusEnum",
    "MatcherFieldView",
    "MatcherHostType",
    "MatcherViewOperatorEnum",
    "MicrosoftTeamsNotificationViewTypeNameEnum",
    "NDSAuditTypeViewForNdsGroup",
    "NDSAuditTypeViewForOrg",
    "NDSAutoScalingAuditTypeViewForNdsGroup",
    "NDSLDAPVerifyConnectivityJobRequestStatusEnum",
    "NDSLDAPVerifyConnectivityJobRequestValidationStatusEnum",
    "NDSLDAPVerifyConnectivityJobRequestValidationValidationTypeEnum",
    "NDSNotificationViewSeverityEnum",
    "NDSNotificationViewTypeNameEnum",
    "NDSServerlessInstanceAuditTypeView",
    "NDSTenantEndpointAuditTypeView",
    "NDSX509UserAuthenticationEventTypeViewAlertable",
    "NetworkPermissionEntryStatusSTATUSEnum",
    "NotificationViewDatadogRegionEnum",
    "NotificationViewTypeNameEnum",
    "NotificationViewRolesEnum",
    "NotificationViewSeverityEnum",
    "NotificationViewOpsGenieRegionEnum",
    "NotificationViewRegionEnum",
    "NotificationViewForNdsGroupDatadogRegionEnum",
    "NotificationViewForNdsGroupTypeNameEnum",
    "NotificationViewForNdsGroupRolesEnum",
    "NotificationViewForNdsGroupOpsGenieRegionEnum",
    "NotificationViewForNdsGroupRegionEnum",
    "NumberMetricAlertViewStatusEnum",
    "NumberMetricThresholdViewModeEnum",
    "NumberMetricUnits",
    "OnDemandCpsSnapshotSourceTypeEnum",
    "OnlineArchiveCollectionTypeEnum",
    "OnlineArchiveStateEnum",
    "Operator",
    "OpsGenieNotificationViewOpsGenieRegionEnum",
    "OpsGenieNotificationViewTypeNameEnum",
    "OrgEventTypeViewForOrg",
    "OrgFederationSettingsViewIdentityProviderStatusEnum",
    "OrgNotificationViewRolesEnum",
    "OrgNotificationViewTypeNameEnum",
    "PagerDutyNotificationViewRegionEnum",
    "PagerDutyNotificationViewTypeNameEnum",
    "PartitionFieldViewFieldTypeEnum",
    "PeriodicCpsSnapshotSourceTypeEnum",
    "PrivateNetworkEndpointIdEntryProviderEnum",
    "PrivateNetworkEndpointIdEntryTypeEnum",
    "ProviderRegionsProviderEnum",
    "RPUMetricThresholdViewModeEnum",
    "RawSeverityEnum",
    "RawMetricAlertViewStatusEnum",
    "RawMetricThresholdViewModeEnum",
    "RawMetricUnits",
    "RegionConfigProviderNameEnum",
    "RegionConfigRegionNameEnum",
    "RegionConfigBackingProviderNameEnum",
    "RegionSpecElectableNodesEnum",
    "ReplicaSetAlertViewForNdsGroupStatusEnum",
    "ReplicaSetEventTypeViewForNdsGroup",
    "ReplicaSetEventTypeViewForNdsGroupAlertable",
    "ReplicaSetEventTypeViewForNdsGroupAlertableNoThreshold",
    "ReplicaSetEventTypeViewForNdsGroupAlertableWithThreshold",
    "ReplicaSetMatcherField",
    "ReplicaSetMatcherViewOperatorEnum",
    "RoleRoleNameEnum",
    "RoleAssignmentRoleEnum",
    "SMSNotificationViewTypeNameEnum",
    "SampleDatasetStatusStateEnum",
    "ServerlessAWSTenantEndpointProviderNameEnum",
    "ServerlessAWSTenantEndpointStatusEnum",
    "ServerlessAzureTenantEndpointProviderNameEnum",
    "ServerlessAzureTenantEndpointStatusEnum",
    "ServerlessBackupRestoreJobDeliveryTypeEnum",
    "ServerlessBackupSnapshotFrequencyTypeEnum",
    "ServerlessBackupSnapshotSnapshotTypeEnum",
    "ServerlessBackupSnapshotStatusEnum",
    "ServerlessEventTypeViewAlertable",
    "ServerlessInstanceDescriptionStateNameEnum",
    "ServerlessInstanceDescriptionConnectionStringsPrivateEndpointTypeEnum",
    "ServerlessInstanceDescriptionConnectionStringsPrivateEndpointEndpointProviderNameEnum",
    "ServerlessInstanceDescriptionCreateStateNameEnum",
    "ServerlessMetricThresholdViewModeEnum",
    "ServerlessMetricUnits",
    "ServerlessProviderSettingsBackingProviderNameEnum",
    "ServerlessProviderSettingsProviderNameEnum",
    "ServerlessTenantEndpointProviderNameEnum",
    "ServerlessTenantEndpointStatusEnum",
    "SlackNotificationViewTypeNameEnum",
    "SnapshotRetentionRetentionUnitEnum",
    "SnapshotScheduleClusterCheckpointIntervalMinEnum",
    "SnapshotScheduleDailySnapshotRetentionDaysEnum",
    "SnapshotScheduleMonthlySnapshotRetentionMonthsEnum",
    "SnapshotScheduleSnapshotIntervalHoursEnum",
    "SnapshotScheduleSnapshotRetentionDaysEnum",
    "SnapshotScheduleWeeklySnapshotRetentionWeeksEnum",
    "SummaryNotificationViewTypeNameEnum",
    "TeamEventTypeView",
    "TeamEventTypeViewForNdsGroup",
    "TeamNotificationViewTypeNameEnum",
    "TenantHardwareSpecInstanceSizeEnum",
    "TenantRegionConfigBackingProviderNameEnum",
    "TenantRegionConfigProviderNameEnum",
    "TenantRegionConfigRegionNameEnum",
    "TenantRestoreDeliveryTypeEnum",
    "TenantRestoreStatusEnum",
    "TenantSnapshotStatusEnum",
    "ThresholdViewIntegerUnitsEnum",
    "TimeMetricAlertViewStatusEnum",
    "TimeMetricThresholdViewModeEnum",
    "TimeMetricUnits",
    "TokenFilterasciiFoldingOriginalTokensEnum",
    "TokenFilterasciiFoldingTypeEnum",
    "TokenFilterdaitchMokotoffSoundexOriginalTokensEnum",
    "TokenFilterdaitchMokotoffSoundexTypeEnum",
    "TokenFilteredgeGramTermNotInBoundsEnum",
    "TokenFilteredgeGramTypeEnum",
    "TokenFiltericuFoldingTypeEnum",
    "TokenFiltericuNormalizerNormalizationFormEnum",
    "TokenFiltericuNormalizerTypeEnum",
    "TokenFilterlengthTypeEnum",
    "TokenFilterlowercaseTypeEnum",
    "TokenFilternGramTermNotInBoundsEnum",
    "TokenFilternGramTypeEnum",
    "TokenFilterregexMatchesEnum",
    "TokenFilterregexTypeEnum",
    "TokenFilterreverseTypeEnum",
    "TokenFiltershingleTypeEnum",
    "TokenFiltersnowballStemmingStemmerNameEnum",
    "TokenFiltersnowballStemmingTypeEnum",
    "TokenFilterstopwordTypeEnum",
    "TokenFiltertrimTypeEnum",
    "TokenizeredgeGramTypeEnum",
    "TokenizerkeywordTypeEnum",
    "TokenizernGramTypeEnum",
    "TokenizerregexCaptureGroupTypeEnum",
    "TokenizerregexSplitTypeEnum",
    "TokenizerstandardTypeEnum",
    "TokenizeruaxUrlEmailTypeEnum",
    "TokenizerwhitespaceTypeEnum",
    "UserEventTypeViewForNdsGroup",
    "UserEventTypeViewForOrg",
    "UserNotificationViewTypeNameEnum",
    "UserScopeTypeEnum",
    "ValidationViewStatusEnum",
    "VictorOpsNotificationViewTypeNameEnum",
    "WebhookNotificationViewTypeNameEnum",
]);
var typeMap = {
    "AWSAutoScaling": AWSAutoScaling_1.AWSAutoScaling,
    "AWSCloudProviderContainer": AWSCloudProviderContainer_1.AWSCloudProviderContainer,
    "AWSComputeAutoScaling": AWSComputeAutoScaling_1.AWSComputeAutoScaling,
    "AWSCustomDNSEnabledView": AWSCustomDNSEnabledView_1.AWSCustomDNSEnabledView,
    "AWSHardwareSpec": AWSHardwareSpec_1.AWSHardwareSpec,
    "AWSInterfaceEndpoint": AWSInterfaceEndpoint_1.AWSInterfaceEndpoint,
    "AWSKMS": AWSKMS_1.AWSKMS,
    "AWSPeerVpc": AWSPeerVpc_1.AWSPeerVpc,
    "AWSPeerVpcRequest": AWSPeerVpcRequest_1.AWSPeerVpcRequest,
    "AWSPrivateLinkConnection": AWSPrivateLinkConnection_1.AWSPrivateLinkConnection,
    "AWSProviderSettings": AWSProviderSettings_1.AWSProviderSettings,
    "AWSRegionConfig": AWSRegionConfig_1.AWSRegionConfig,
    "AccessListItemView": AccessListItemView_1.AccessListItemView,
    "AlertAuditView": AlertAuditView_1.AlertAuditView,
    "AlertConfigAuditView": AlertConfigAuditView_1.AlertConfigAuditView,
    "AlertConfigView": AlertConfigView_1.AlertConfigView,
    "AlertConfigViewForNdsGroup": AlertConfigViewForNdsGroup_1.AlertConfigViewForNdsGroup,
    "AlertView": AlertView_1.AlertView,
    "AlertViewForNdsGroup": AlertViewForNdsGroup_1.AlertViewForNdsGroup,
    "ApiAddUserToTeamView": ApiAddUserToTeamView_1.ApiAddUserToTeamView,
    "ApiApiUserView": ApiApiUserView_1.ApiApiUserView,
    "ApiAppUserView": ApiAppUserView_1.ApiAppUserView,
    "ApiAtlasContainerPeerViewRequest": ApiAtlasContainerPeerViewRequest_1.ApiAtlasContainerPeerViewRequest,
    "ApiAtlasFTSAnalyzersViewManual": ApiAtlasFTSAnalyzersViewManual_1.ApiAtlasFTSAnalyzersViewManual,
    "ApiAtlasFTSAnalyzersViewManualCharFiltersInner": ApiAtlasFTSAnalyzersViewManualCharFiltersInner_1.ApiAtlasFTSAnalyzersViewManualCharFiltersInner,
    "ApiAtlasFTSAnalyzersViewManualTokenFiltersInner": ApiAtlasFTSAnalyzersViewManualTokenFiltersInner_1.ApiAtlasFTSAnalyzersViewManualTokenFiltersInner,
    "ApiAtlasFTSAnalyzersViewManualTokenizer": ApiAtlasFTSAnalyzersViewManualTokenizer_1.ApiAtlasFTSAnalyzersViewManualTokenizer,
    "ApiAtlasFTSMappingsViewManual": ApiAtlasFTSMappingsViewManual_1.ApiAtlasFTSMappingsViewManual,
    "ApiAtlasNetPeerRequestBase": ApiAtlasNetPeerRequestBase_1.ApiAtlasNetPeerRequestBase,
    "ApiAvailableRegionView": ApiAvailableRegionView_1.ApiAvailableRegionView,
    "ApiBSONTimestampView": ApiBSONTimestampView_1.ApiBSONTimestampView,
    "ApiCheckpointPartView": ApiCheckpointPartView_1.ApiCheckpointPartView,
    "ApiCreateApiKeyView": ApiCreateApiKeyView_1.ApiCreateApiKeyView,
    "ApiDatabaseView": ApiDatabaseView_1.ApiDatabaseView,
    "ApiDatadogView": ApiDatadogView_1.ApiDatadogView,
    "ApiDeleteCopiedBackupsView": ApiDeleteCopiedBackupsView_1.ApiDeleteCopiedBackupsView,
    "ApiDiskPartitionView": ApiDiskPartitionView_1.ApiDiskPartitionView,
    "ApiError": ApiError_1.ApiError,
    "ApiExportStatusView": ApiExportStatusView_1.ApiExportStatusView,
    "ApiFTSMetricView": ApiFTSMetricView_1.ApiFTSMetricView,
    "ApiFTSMetricsView": ApiFTSMetricsView_1.ApiFTSMetricsView,
    "ApiGroupInvitationRequestView": ApiGroupInvitationRequestView_1.ApiGroupInvitationRequestView,
    "ApiGroupInvitationUpdateRequestView": ApiGroupInvitationUpdateRequestView_1.ApiGroupInvitationUpdateRequestView,
    "ApiGroupInvitationView": ApiGroupInvitationView_1.ApiGroupInvitationView,
    "ApiHostViewAtlas": ApiHostViewAtlas_1.ApiHostViewAtlas,
    "ApiIndexRequestView": ApiIndexRequestView_1.ApiIndexRequestView,
    "ApiInstanceSizeView": ApiInstanceSizeView_1.ApiInstanceSizeView,
    "ApiIntegrationView": ApiIntegrationView_1.ApiIntegrationView,
    "ApiInvoiceView": ApiInvoiceView_1.ApiInvoiceView,
    "ApiKeyView": ApiKeyView_1.ApiKeyView,
    "ApiLimitView": ApiLimitView_1.ApiLimitView,
    "ApiLineItemView": ApiLineItemView_1.ApiLineItemView,
    "ApiMeasurementView": ApiMeasurementView_1.ApiMeasurementView,
    "ApiMeasurementViewAtlas": ApiMeasurementViewAtlas_1.ApiMeasurementViewAtlas,
    "ApiMeasurementsGeneralViewAtlas": ApiMeasurementsGeneralViewAtlas_1.ApiMeasurementsGeneralViewAtlas,
    "ApiMeasurementsIndexesView": ApiMeasurementsIndexesView_1.ApiMeasurementsIndexesView,
    "ApiMeasurementsNonIndexView": ApiMeasurementsNonIndexView_1.ApiMeasurementsNonIndexView,
    "ApiMetricDataPointView": ApiMetricDataPointView_1.ApiMetricDataPointView,
    "ApiMetricDataPointViewAtlas": ApiMetricDataPointViewAtlas_1.ApiMetricDataPointViewAtlas,
    "ApiMicrosoftTeamsView": ApiMicrosoftTeamsView_1.ApiMicrosoftTeamsView,
    "ApiMongoDBAccessLogsListView": ApiMongoDBAccessLogsListView_1.ApiMongoDBAccessLogsListView,
    "ApiMongoDBAccessLogsView": ApiMongoDBAccessLogsView_1.ApiMongoDBAccessLogsView,
    "ApiNamespaceObjView": ApiNamespaceObjView_1.ApiNamespaceObjView,
    "ApiNamespacesView": ApiNamespacesView_1.ApiNamespacesView,
    "ApiNewRelicView": ApiNewRelicView_1.ApiNewRelicView,
    "ApiOpsGenieView": ApiOpsGenieView_1.ApiOpsGenieView,
    "ApiOrganizationInvitationRequestView": ApiOrganizationInvitationRequestView_1.ApiOrganizationInvitationRequestView,
    "ApiOrganizationInvitationUpdateRequestView": ApiOrganizationInvitationUpdateRequestView_1.ApiOrganizationInvitationUpdateRequestView,
    "ApiOrganizationInvitationView": ApiOrganizationInvitationView_1.ApiOrganizationInvitationView,
    "ApiOrganizationView": ApiOrganizationView_1.ApiOrganizationView,
    "ApiPagerDutyView": ApiPagerDutyView_1.ApiPagerDutyView,
    "ApiPaymentView": ApiPaymentView_1.ApiPaymentView,
    "ApiPerformanceAdvisorIndexView": ApiPerformanceAdvisorIndexView_1.ApiPerformanceAdvisorIndexView,
    "ApiPerformanceAdvisorResponseView": ApiPerformanceAdvisorResponseView_1.ApiPerformanceAdvisorResponseView,
    "ApiPerformanceAdvisorShapeView": ApiPerformanceAdvisorShapeView_1.ApiPerformanceAdvisorShapeView,
    "ApiPerformanceAdvisorSlowQueryListView": ApiPerformanceAdvisorSlowQueryListView_1.ApiPerformanceAdvisorSlowQueryListView,
    "ApiPerformanceAdvisorSlowQueryView": ApiPerformanceAdvisorSlowQueryView_1.ApiPerformanceAdvisorSlowQueryView,
    "ApiPolicyItemView": ApiPolicyItemView_1.ApiPolicyItemView,
    "ApiPolicyView": ApiPolicyView_1.ApiPolicyView,
    "ApiPrometheusView": ApiPrometheusView_1.ApiPrometheusView,
    "ApiRefundView": ApiRefundView_1.ApiRefundView,
    "ApiRestoreJobDeliveryView": ApiRestoreJobDeliveryView_1.ApiRestoreJobDeliveryView,
    "ApiRestoreJobFileHashView": ApiRestoreJobFileHashView_1.ApiRestoreJobFileHashView,
    "ApiRestoreJobView": ApiRestoreJobView_1.ApiRestoreJobView,
    "ApiRoleAssignmentView": ApiRoleAssignmentView_1.ApiRoleAssignmentView,
    "ApiSlackView": ApiSlackView_1.ApiSlackView,
    "ApiSnapshotPartView": ApiSnapshotPartView_1.ApiSnapshotPartView,
    "ApiSnapshotView": ApiSnapshotView_1.ApiSnapshotView,
    "ApiSystemStatusView": ApiSystemStatusView_1.ApiSystemStatusView,
    "ApiTeamResponseView": ApiTeamResponseView_1.ApiTeamResponseView,
    "ApiTeamRoleView": ApiTeamRoleView_1.ApiTeamRoleView,
    "ApiTeamView": ApiTeamView_1.ApiTeamView,
    "ApiUserAccessListView": ApiUserAccessListView_1.ApiUserAccessListView,
    "ApiUserEventViewForNdsGroup": ApiUserEventViewForNdsGroup_1.ApiUserEventViewForNdsGroup,
    "ApiUserEventViewForOrg": ApiUserEventViewForOrg_1.ApiUserEventViewForOrg,
    "ApiUserRoleAssignment": ApiUserRoleAssignment_1.ApiUserRoleAssignment,
    "ApiVictorOpsView": ApiVictorOpsView_1.ApiVictorOpsView,
    "ApiWebhookView": ApiWebhookView_1.ApiWebhookView,
    "AppServiceAlertConfigViewForNdsGroup": AppServiceAlertConfigViewForNdsGroup_1.AppServiceAlertConfigViewForNdsGroup,
    "AppServiceAlertView": AppServiceAlertView_1.AppServiceAlertView,
    "AppServiceEventView": AppServiceEventView_1.AppServiceEventView,
    "AppServiceMetricAlertConfigViewForNdsGroup": AppServiceMetricAlertConfigViewForNdsGroup_1.AppServiceMetricAlertConfigViewForNdsGroup,
    "AppServiceMetricMatcherView": AppServiceMetricMatcherView_1.AppServiceMetricMatcherView,
    "AppServiceMetricThresholdView": AppServiceMetricThresholdView_1.AppServiceMetricThresholdView,
    "AuditLog": AuditLog_1.AuditLog,
    "AutoExportPolicyView": AutoExportPolicyView_1.AutoExportPolicyView,
    "AutoScaling": AutoScaling_1.AutoScaling,
    "AutoScalingV15": AutoScalingV15_1.AutoScalingV15,
    "AutomationConfigEventView": AutomationConfigEventView_1.AutomationConfigEventView,
    "AvailableDeploymentView": AvailableDeploymentView_1.AvailableDeploymentView,
    "AvailableProjectView": AvailableProjectView_1.AvailableProjectView,
    "AzureAutoScaling": AzureAutoScaling_1.AzureAutoScaling,
    "AzureCloudProviderContainer": AzureCloudProviderContainer_1.AzureCloudProviderContainer,
    "AzureComputeAutoScaling": AzureComputeAutoScaling_1.AzureComputeAutoScaling,
    "AzureHardwareSpec": AzureHardwareSpec_1.AzureHardwareSpec,
    "AzureKeyVault": AzureKeyVault_1.AzureKeyVault,
    "AzurePeerNetwork": AzurePeerNetwork_1.AzurePeerNetwork,
    "AzurePeerNetworkRequest": AzurePeerNetworkRequest_1.AzurePeerNetworkRequest,
    "AzurePrivateEndpoint": AzurePrivateEndpoint_1.AzurePrivateEndpoint,
    "AzurePrivateLinkConnection": AzurePrivateLinkConnection_1.AzurePrivateLinkConnection,
    "AzureProviderSettings": AzureProviderSettings_1.AzureProviderSettings,
    "AzureRegionConfig": AzureRegionConfig_1.AzureRegionConfig,
    "BiConnector": BiConnector_1.BiConnector,
    "BillingEventViewForNdsGroup": BillingEventViewForNdsGroup_1.BillingEventViewForNdsGroup,
    "BillingEventViewForOrg": BillingEventViewForOrg_1.BillingEventViewForOrg,
    "BillingThresholdAlertConfigViewForNdsGroup": BillingThresholdAlertConfigViewForNdsGroup_1.BillingThresholdAlertConfigViewForNdsGroup,
    "CharFilterhtmlStrip": CharFilterhtmlStrip_1.CharFilterhtmlStrip,
    "CharFiltericuNormalize": CharFiltericuNormalize_1.CharFiltericuNormalize,
    "CharFiltermapping": CharFiltermapping_1.CharFiltermapping,
    "CharFiltermappingMappings": CharFiltermappingMappings_1.CharFiltermappingMappings,
    "CharFilterpersian": CharFilterpersian_1.CharFilterpersian,
    "Checkpoint": Checkpoint_1.Checkpoint,
    "CloudProviderAccess": CloudProviderAccess_1.CloudProviderAccess,
    "CloudProviderAccessAWSIAMRole": CloudProviderAccessAWSIAMRole_1.CloudProviderAccessAWSIAMRole,
    "CloudProviderAccessDataLakeFeatureUsage": CloudProviderAccessDataLakeFeatureUsage_1.CloudProviderAccessDataLakeFeatureUsage,
    "CloudProviderAccessEncryptionAtRestFeatureUsage": CloudProviderAccessEncryptionAtRestFeatureUsage_1.CloudProviderAccessEncryptionAtRestFeatureUsage,
    "CloudProviderAccessExportSnapshotFeatureUsage": CloudProviderAccessExportSnapshotFeatureUsage_1.CloudProviderAccessExportSnapshotFeatureUsage,
    "CloudProviderAccessFeatureUsage": CloudProviderAccessFeatureUsage_1.CloudProviderAccessFeatureUsage,
    "CloudProviderAccessFeatureUsageDataLakeFeatureId": CloudProviderAccessFeatureUsageDataLakeFeatureId_1.CloudProviderAccessFeatureUsageDataLakeFeatureId,
    "CloudProviderAccessFeatureUsageExportSnapshotFeatureId": CloudProviderAccessFeatureUsageExportSnapshotFeatureId_1.CloudProviderAccessFeatureUsageExportSnapshotFeatureId,
    "CloudProviderAccessRole": CloudProviderAccessRole_1.CloudProviderAccessRole,
    "CloudProviderContainer": CloudProviderContainer_1.CloudProviderContainer,
    "ClusterAlertConfigViewForNdsGroup": ClusterAlertConfigViewForNdsGroup_1.ClusterAlertConfigViewForNdsGroup,
    "ClusterAlertView": ClusterAlertView_1.ClusterAlertView,
    "ClusterDescriptionConnectionStrings": ClusterDescriptionConnectionStrings_1.ClusterDescriptionConnectionStrings,
    "ClusterDescriptionConnectionStringsPrivateEndpoint": ClusterDescriptionConnectionStringsPrivateEndpoint_1.ClusterDescriptionConnectionStringsPrivateEndpoint,
    "ClusterDescriptionConnectionStringsPrivateEndpointEndpoint": ClusterDescriptionConnectionStringsPrivateEndpointEndpoint_1.ClusterDescriptionConnectionStringsPrivateEndpointEndpoint,
    "ClusterDescriptionProcessArgs": ClusterDescriptionProcessArgs_1.ClusterDescriptionProcessArgs,
    "ClusterDescriptionV15": ClusterDescriptionV15_1.ClusterDescriptionV15,
    "ClusterEventViewForNdsGroup": ClusterEventViewForNdsGroup_1.ClusterEventViewForNdsGroup,
    "ClusterMatcherView": ClusterMatcherView_1.ClusterMatcherView,
    "ClusterOutageSimulation": ClusterOutageSimulation_1.ClusterOutageSimulation,
    "ClusterOutageSimulationOutageFilter": ClusterOutageSimulationOutageFilter_1.ClusterOutageSimulationOutageFilter,
    "ClusterProviderSettings": ClusterProviderSettings_1.ClusterProviderSettings,
    "ClusterStatus": ClusterStatus_1.ClusterStatus,
    "ClusterView": ClusterView_1.ClusterView,
    "Collation": Collation_1.Collation,
    "ComputeAutoScaling": ComputeAutoScaling_1.ComputeAutoScaling,
    "ComputeAutoScalingV15": ComputeAutoScalingV15_1.ComputeAutoScalingV15,
    "ConnectedOrgConfigView": ConnectedOrgConfigView_1.ConnectedOrgConfigView,
    "ContainerPeer": ContainerPeer_1.ContainerPeer,
    "CpsBackupThresholdAlertConfigViewForNdsGroup": CpsBackupThresholdAlertConfigViewForNdsGroup_1.CpsBackupThresholdAlertConfigViewForNdsGroup,
    "CreateAWSEndpointRequest": CreateAWSEndpointRequest_1.CreateAWSEndpointRequest,
    "CreateAWSEndpointRequestAllOf": CreateAWSEndpointRequestAllOf_1.CreateAWSEndpointRequestAllOf,
    "CreateAzureEndpointRequest": CreateAzureEndpointRequest_1.CreateAzureEndpointRequest,
    "CreateAzureEndpointRequestAllOf": CreateAzureEndpointRequestAllOf_1.CreateAzureEndpointRequestAllOf,
    "CreateEndpointServiceRequest": CreateEndpointServiceRequest_1.CreateEndpointServiceRequest,
    "CreateGCPEndpointGroupRequest": CreateGCPEndpointGroupRequest_1.CreateGCPEndpointGroupRequest,
    "CreateGCPEndpointGroupRequestAllOf": CreateGCPEndpointGroupRequestAllOf_1.CreateGCPEndpointGroupRequestAllOf,
    "CreateGCPForwardingRuleRequest": CreateGCPForwardingRuleRequest_1.CreateGCPForwardingRuleRequest,
    "CreateOrganizationRequest": CreateOrganizationRequest_1.CreateOrganizationRequest,
    "CreateOrganizationResponse": CreateOrganizationResponse_1.CreateOrganizationResponse,
    "CreatePeeringConnection200Response": CreatePeeringConnection200Response_1.CreatePeeringConnection200Response,
    "CreatePrivateEndpointRequest": CreatePrivateEndpointRequest_1.CreatePrivateEndpointRequest,
    "CriteriaView": CriteriaView_1.CriteriaView,
    "CustomCriteriaView": CustomCriteriaView_1.CustomCriteriaView,
    "CustomDBRole": CustomDBRole_1.CustomDBRole,
    "CustomZoneMappings": CustomZoneMappings_1.CustomZoneMappings,
    "CustomerX509": CustomerX509_1.CustomerX509,
    "DBAction": DBAction_1.DBAction,
    "DBResource": DBResource_1.DBResource,
    "DLSIngestionSink": DLSIngestionSink_1.DLSIngestionSink,
    "DailyScheduleView": DailyScheduleView_1.DailyScheduleView,
    "DataExplorerAccessedEventView": DataExplorerAccessedEventView_1.DataExplorerAccessedEventView,
    "DataFederationQueryLimit": DataFederationQueryLimit_1.DataFederationQueryLimit,
    "DataFederationTenantQueryLimit": DataFederationTenantQueryLimit_1.DataFederationTenantQueryLimit,
    "DataLakeAWSCloudProviderConfig": DataLakeAWSCloudProviderConfig_1.DataLakeAWSCloudProviderConfig,
    "DataLakeAtlasStore": DataLakeAtlasStore_1.DataLakeAtlasStore,
    "DataLakeAtlasStoreReadPreference": DataLakeAtlasStoreReadPreference_1.DataLakeAtlasStoreReadPreference,
    "DataLakeAtlasStoreReadPreferenceTag": DataLakeAtlasStoreReadPreferenceTag_1.DataLakeAtlasStoreReadPreferenceTag,
    "DataLakeCloudProviderConfig": DataLakeCloudProviderConfig_1.DataLakeCloudProviderConfig,
    "DataLakeDataProcessRegion": DataLakeDataProcessRegion_1.DataLakeDataProcessRegion,
    "DataLakeDatabase": DataLakeDatabase_1.DataLakeDatabase,
    "DataLakeDatabaseCollection": DataLakeDatabaseCollection_1.DataLakeDatabaseCollection,
    "DataLakeDatabaseDataSource": DataLakeDatabaseDataSource_1.DataLakeDatabaseDataSource,
    "DataLakeHTTPStore": DataLakeHTTPStore_1.DataLakeHTTPStore,
    "DataLakeOnlineArchiveStore": DataLakeOnlineArchiveStore_1.DataLakeOnlineArchiveStore,
    "DataLakeS3Store": DataLakeS3Store_1.DataLakeS3Store,
    "DataLakeStorage": DataLakeStorage_1.DataLakeStorage,
    "DataLakeStore": DataLakeStore_1.DataLakeStore,
    "DataLakeTenant": DataLakeTenant_1.DataLakeTenant,
    "DataLakeView": DataLakeView_1.DataLakeView,
    "DataMetricAlertView": DataMetricAlertView_1.DataMetricAlertView,
    "DataMetricEventView": DataMetricEventView_1.DataMetricEventView,
    "DataMetricThresholdView": DataMetricThresholdView_1.DataMetricThresholdView,
    "DataMetricValueView": DataMetricValueView_1.DataMetricValueView,
    "DataProtectionSettings": DataProtectionSettings_1.DataProtectionSettings,
    "DatabaseUser": DatabaseUser_1.DatabaseUser,
    "DatadogNotificationView": DatadogNotificationView_1.DatadogNotificationView,
    "DateCriteriaView": DateCriteriaView_1.DateCriteriaView,
    "DedicatedHardwareSpec": DedicatedHardwareSpec_1.DedicatedHardwareSpec,
    "DefaultAlertConfigViewForNdsGroup": DefaultAlertConfigViewForNdsGroup_1.DefaultAlertConfigViewForNdsGroup,
    "DefaultAlertViewForNdsGroup": DefaultAlertViewForNdsGroup_1.DefaultAlertViewForNdsGroup,
    "DefaultEventViewForNdsGroup": DefaultEventViewForNdsGroup_1.DefaultEventViewForNdsGroup,
    "DefaultEventViewForOrg": DefaultEventViewForOrg_1.DefaultEventViewForOrg,
    "DefaultScheduleView": DefaultScheduleView_1.DefaultScheduleView,
    "Destination": Destination_1.Destination,
    "DiskBackupBaseRestoreMember": DiskBackupBaseRestoreMember_1.DiskBackupBaseRestoreMember,
    "DiskBackupCopySetting": DiskBackupCopySetting_1.DiskBackupCopySetting,
    "DiskBackupExportJob": DiskBackupExportJob_1.DiskBackupExportJob,
    "DiskBackupExportJobRequest": DiskBackupExportJobRequest_1.DiskBackupExportJobRequest,
    "DiskBackupOnDemandSnapshotRequest": DiskBackupOnDemandSnapshotRequest_1.DiskBackupOnDemandSnapshotRequest,
    "DiskBackupReplicaSet": DiskBackupReplicaSet_1.DiskBackupReplicaSet,
    "DiskBackupRestoreJob": DiskBackupRestoreJob_1.DiskBackupRestoreJob,
    "DiskBackupShardedClusterSnapshot": DiskBackupShardedClusterSnapshot_1.DiskBackupShardedClusterSnapshot,
    "DiskBackupShardedClusterSnapshotMember": DiskBackupShardedClusterSnapshotMember_1.DiskBackupShardedClusterSnapshotMember,
    "DiskBackupSnapshot": DiskBackupSnapshot_1.DiskBackupSnapshot,
    "DiskBackupSnapshotAWSExportBucket": DiskBackupSnapshotAWSExportBucket_1.DiskBackupSnapshotAWSExportBucket,
    "DiskBackupSnapshotSchedule": DiskBackupSnapshotSchedule_1.DiskBackupSnapshotSchedule,
    "DiskGBAutoScaling": DiskGBAutoScaling_1.DiskGBAutoScaling,
    "EmailNotificationView": EmailNotificationView_1.EmailNotificationView,
    "EncryptionAtRest": EncryptionAtRest_1.EncryptionAtRest,
    "EncryptionKeyAlertConfigViewForNdsGroup": EncryptionKeyAlertConfigViewForNdsGroup_1.EncryptionKeyAlertConfigViewForNdsGroup,
    "Endpoint": Endpoint_1.Endpoint,
    "EndpointService": EndpointService_1.EndpointService,
    "EventViewForNdsGroup": EventViewForNdsGroup_1.EventViewForNdsGroup,
    "EventViewForOrg": EventViewForOrg_1.EventViewForOrg,
    "ExampleResourceResponseView20230101": ExampleResourceResponseView20230101_1.ExampleResourceResponseView20230101,
    "ExampleResourceResponseView20230201": ExampleResourceResponseView20230201_1.ExampleResourceResponseView20230201,
    "FTSIndex": FTSIndex_1.FTSIndex,
    "FTSIndexAuditView": FTSIndexAuditView_1.FTSIndexAuditView,
    "FTSSynonymMappingDefinition": FTSSynonymMappingDefinition_1.FTSSynonymMappingDefinition,
    "FederatedUserView": FederatedUserView_1.FederatedUserView,
    "FieldTransformation": FieldTransformation_1.FieldTransformation,
    "ForNdsGroup": ForNdsGroup_1.ForNdsGroup,
    "FreeAutoScaling": FreeAutoScaling_1.FreeAutoScaling,
    "FreeProviderSettings": FreeProviderSettings_1.FreeProviderSettings,
    "GCPAutoScaling": GCPAutoScaling_1.GCPAutoScaling,
    "GCPCloudProviderContainer": GCPCloudProviderContainer_1.GCPCloudProviderContainer,
    "GCPComputeAutoScaling": GCPComputeAutoScaling_1.GCPComputeAutoScaling,
    "GCPConsumerForwardingRule": GCPConsumerForwardingRule_1.GCPConsumerForwardingRule,
    "GCPEndpointGroup": GCPEndpointGroup_1.GCPEndpointGroup,
    "GCPEndpointService": GCPEndpointService_1.GCPEndpointService,
    "GCPHardwareSpec": GCPHardwareSpec_1.GCPHardwareSpec,
    "GCPPeerVpc": GCPPeerVpc_1.GCPPeerVpc,
    "GCPPeerVpcRequest": GCPPeerVpcRequest_1.GCPPeerVpcRequest,
    "GCPProviderSettings": GCPProviderSettings_1.GCPProviderSettings,
    "GCPRegionConfig": GCPRegionConfig_1.GCPRegionConfig,
    "GeoSharding": GeoSharding_1.GeoSharding,
    "GetPeeringConnection200Response": GetPeeringConnection200Response_1.GetPeeringConnection200Response,
    "GoogleCloudKMS": GoogleCloudKMS_1.GoogleCloudKMS,
    "GreaterThanDaysThresholdView": GreaterThanDaysThresholdView_1.GreaterThanDaysThresholdView,
    "GreaterThanRawThresholdAlertConfigViewForNdsGroup": GreaterThanRawThresholdAlertConfigViewForNdsGroup_1.GreaterThanRawThresholdAlertConfigViewForNdsGroup,
    "GreaterThanRawThresholdView": GreaterThanRawThresholdView_1.GreaterThanRawThresholdView,
    "GreaterThanTimeThresholdView": GreaterThanTimeThresholdView_1.GreaterThanTimeThresholdView,
    "Group": Group_1.Group,
    "GroupMaintenanceWindow": GroupMaintenanceWindow_1.GroupMaintenanceWindow,
    "GroupName": GroupName_1.GroupName,
    "GroupNotificationView": GroupNotificationView_1.GroupNotificationView,
    "GroupPaginatedEventView": GroupPaginatedEventView_1.GroupPaginatedEventView,
    "GroupPaginatedIntegrationView": GroupPaginatedIntegrationView_1.GroupPaginatedIntegrationView,
    "GroupSettings": GroupSettings_1.GroupSettings,
    "HardwareSpec": HardwareSpec_1.HardwareSpec,
    "HipChatNotificationView": HipChatNotificationView_1.HipChatNotificationView,
    "HostAlertConfigViewForNdsGroup": HostAlertConfigViewForNdsGroup_1.HostAlertConfigViewForNdsGroup,
    "HostAlertViewForNdsGroup": HostAlertViewForNdsGroup_1.HostAlertViewForNdsGroup,
    "HostEventViewForNdsGroup": HostEventViewForNdsGroup_1.HostEventViewForNdsGroup,
    "HostMatcherView": HostMatcherView_1.HostMatcherView,
    "HostMetricAlertConfigViewForNdsGroup": HostMetricAlertConfigViewForNdsGroup_1.HostMetricAlertConfigViewForNdsGroup,
    "HostMetricAlertView": HostMetricAlertView_1.HostMetricAlertView,
    "HostMetricEventView": HostMetricEventView_1.HostMetricEventView,
    "HostMetricThresholdView": HostMetricThresholdView_1.HostMetricThresholdView,
    "HostMetricValueView": HostMetricValueView_1.HostMetricValueView,
    "IdentityProviderUpdate": IdentityProviderUpdate_1.IdentityProviderUpdate,
    "IdentityProviderView": IdentityProviderView_1.IdentityProviderView,
    "IndexOptions": IndexOptions_1.IndexOptions,
    "IngestionPipeline": IngestionPipeline_1.IngestionPipeline,
    "IngestionPipelineRun": IngestionPipelineRun_1.IngestionPipelineRun,
    "IngestionSink": IngestionSink_1.IngestionSink,
    "IngestionSource": IngestionSource_1.IngestionSource,
    "InheritedRole": InheritedRole_1.InheritedRole,
    "IntegrationViewForNdsGroup": IntegrationViewForNdsGroup_1.IntegrationViewForNdsGroup,
    "Label": Label_1.Label,
    "LegacyClusterDescription": LegacyClusterDescription_1.LegacyClusterDescription,
    "LegacyReplicationSpec": LegacyReplicationSpec_1.LegacyReplicationSpec,
    "LessThanDaysThresholdView": LessThanDaysThresholdView_1.LessThanDaysThresholdView,
    "LessThanTimeThresholdAlertConfigViewForNdsGroup": LessThanTimeThresholdAlertConfigViewForNdsGroup_1.LessThanTimeThresholdAlertConfigViewForNdsGroup,
    "LessThanTimeThresholdView": LessThanTimeThresholdView_1.LessThanTimeThresholdView,
    "Link": Link_1.Link,
    "LinkAtlas": LinkAtlas_1.LinkAtlas,
    "ListPeeringConnections200Response": ListPeeringConnections200Response_1.ListPeeringConnections200Response,
    "LiveMigrationRequestView": LiveMigrationRequestView_1.LiveMigrationRequestView,
    "LiveMigrationResponseView": LiveMigrationResponseView_1.LiveMigrationResponseView,
    "ManagedNamespaceView": ManagedNamespaceView_1.ManagedNamespaceView,
    "ManagedNamespaces": ManagedNamespaces_1.ManagedNamespaces,
    "MatcherView": MatcherView_1.MatcherView,
    "MicrosoftTeamsNotificationView": MicrosoftTeamsNotificationView_1.MicrosoftTeamsNotificationView,
    "MonthlyScheduleView": MonthlyScheduleView_1.MonthlyScheduleView,
    "NDSAuditViewForNdsGroup": NDSAuditViewForNdsGroup_1.NDSAuditViewForNdsGroup,
    "NDSAuditViewForOrg": NDSAuditViewForOrg_1.NDSAuditViewForOrg,
    "NDSAutoScalingAuditViewForNdsGroup": NDSAutoScalingAuditViewForNdsGroup_1.NDSAutoScalingAuditViewForNdsGroup,
    "NDSLDAP": NDSLDAP_1.NDSLDAP,
    "NDSLDAPVerifyConnectivityJobRequest": NDSLDAPVerifyConnectivityJobRequest_1.NDSLDAPVerifyConnectivityJobRequest,
    "NDSLDAPVerifyConnectivityJobRequestParams": NDSLDAPVerifyConnectivityJobRequestParams_1.NDSLDAPVerifyConnectivityJobRequestParams,
    "NDSLDAPVerifyConnectivityJobRequestValidation": NDSLDAPVerifyConnectivityJobRequestValidation_1.NDSLDAPVerifyConnectivityJobRequestValidation,
    "NDSLabel": NDSLabel_1.NDSLabel,
    "NDSNotificationView": NDSNotificationView_1.NDSNotificationView,
    "NDSServerlessInstanceAuditView": NDSServerlessInstanceAuditView_1.NDSServerlessInstanceAuditView,
    "NDSTenantEndpointAuditView": NDSTenantEndpointAuditView_1.NDSTenantEndpointAuditView,
    "NDSUserToDNMapping": NDSUserToDNMapping_1.NDSUserToDNMapping,
    "NDSX509UserAuthenticationAlertConfigViewForNdsGroup": NDSX509UserAuthenticationAlertConfigViewForNdsGroup_1.NDSX509UserAuthenticationAlertConfigViewForNdsGroup,
    "NetworkPermissionEntry": NetworkPermissionEntry_1.NetworkPermissionEntry,
    "NetworkPermissionEntryStatus": NetworkPermissionEntryStatus_1.NetworkPermissionEntryStatus,
    "NotificationView": NotificationView_1.NotificationView,
    "NotificationViewForNdsGroup": NotificationViewForNdsGroup_1.NotificationViewForNdsGroup,
    "NumberMetricAlertView": NumberMetricAlertView_1.NumberMetricAlertView,
    "NumberMetricEventView": NumberMetricEventView_1.NumberMetricEventView,
    "NumberMetricThresholdView": NumberMetricThresholdView_1.NumberMetricThresholdView,
    "NumberMetricValueView": NumberMetricValueView_1.NumberMetricValueView,
    "OnDemandCpsSnapshotSource": OnDemandCpsSnapshotSource_1.OnDemandCpsSnapshotSource,
    "OnlineArchive": OnlineArchive_1.OnlineArchive,
    "OnlineArchiveSchedule": OnlineArchiveSchedule_1.OnlineArchiveSchedule,
    "OpsGenieNotificationView": OpsGenieNotificationView_1.OpsGenieNotificationView,
    "OrgEventViewForOrg": OrgEventViewForOrg_1.OrgEventViewForOrg,
    "OrgFederationSettingsView": OrgFederationSettingsView_1.OrgFederationSettingsView,
    "OrgGroupView": OrgGroupView_1.OrgGroupView,
    "OrgNotificationView": OrgNotificationView_1.OrgNotificationView,
    "OrgPaginatedEventView": OrgPaginatedEventView_1.OrgPaginatedEventView,
    "OrganizationSettings": OrganizationSettings_1.OrganizationSettings,
    "PagerDutyNotificationView": PagerDutyNotificationView_1.PagerDutyNotificationView,
    "PaginatedAWSPeerVpcView": PaginatedAWSPeerVpcView_1.PaginatedAWSPeerVpcView,
    "PaginatedAlertConfigView": PaginatedAlertConfigView_1.PaginatedAlertConfigView,
    "PaginatedAlertView": PaginatedAlertView_1.PaginatedAlertView,
    "PaginatedApiApiUserView": PaginatedApiApiUserView_1.PaginatedApiApiUserView,
    "PaginatedApiAppUserView": PaginatedApiAppUserView_1.PaginatedApiAppUserView,
    "PaginatedApiAtlasCheckpointView": PaginatedApiAtlasCheckpointView_1.PaginatedApiAtlasCheckpointView,
    "PaginatedApiAtlasDatabaseUserView": PaginatedApiAtlasDatabaseUserView_1.PaginatedApiAtlasDatabaseUserView,
    "PaginatedApiAtlasDiskBackupExportJobView": PaginatedApiAtlasDiskBackupExportJobView_1.PaginatedApiAtlasDiskBackupExportJobView,
    "PaginatedApiAtlasProviderRegionsView": PaginatedApiAtlasProviderRegionsView_1.PaginatedApiAtlasProviderRegionsView,
    "PaginatedApiAtlasServerlessBackupRestoreJobView": PaginatedApiAtlasServerlessBackupRestoreJobView_1.PaginatedApiAtlasServerlessBackupRestoreJobView,
    "PaginatedApiAtlasServerlessBackupSnapshotView": PaginatedApiAtlasServerlessBackupSnapshotView_1.PaginatedApiAtlasServerlessBackupSnapshotView,
    "PaginatedApiInvoiceView": PaginatedApiInvoiceView_1.PaginatedApiInvoiceView,
    "PaginatedApiUserAccessListView": PaginatedApiUserAccessListView_1.PaginatedApiUserAccessListView,
    "PaginatedAppUserView": PaginatedAppUserView_1.PaginatedAppUserView,
    "PaginatedAtlasGroupView": PaginatedAtlasGroupView_1.PaginatedAtlasGroupView,
    "PaginatedAzurePeerNetworkView": PaginatedAzurePeerNetworkView_1.PaginatedAzurePeerNetworkView,
    "PaginatedBackupSnapshotExportBucketView": PaginatedBackupSnapshotExportBucketView_1.PaginatedBackupSnapshotExportBucketView,
    "PaginatedBackupSnapshotView": PaginatedBackupSnapshotView_1.PaginatedBackupSnapshotView,
    "PaginatedCloudBackupReplicaSetView": PaginatedCloudBackupReplicaSetView_1.PaginatedCloudBackupReplicaSetView,
    "PaginatedCloudBackupRestoreJobView": PaginatedCloudBackupRestoreJobView_1.PaginatedCloudBackupRestoreJobView,
    "PaginatedCloudBackupShardedClusterSnapshotView": PaginatedCloudBackupShardedClusterSnapshotView_1.PaginatedCloudBackupShardedClusterSnapshotView,
    "PaginatedCloudProviderContainerView": PaginatedCloudProviderContainerView_1.PaginatedCloudProviderContainerView,
    "PaginatedClusterDescriptionV15View": PaginatedClusterDescriptionV15View_1.PaginatedClusterDescriptionV15View,
    "PaginatedDatabaseView": PaginatedDatabaseView_1.PaginatedDatabaseView,
    "PaginatedDiskPartitionView": PaginatedDiskPartitionView_1.PaginatedDiskPartitionView,
    "PaginatedGCPPeerVpcView": PaginatedGCPPeerVpcView_1.PaginatedGCPPeerVpcView,
    "PaginatedHostViewAtlas": PaginatedHostViewAtlas_1.PaginatedHostViewAtlas,
    "PaginatedLegacyClusterView": PaginatedLegacyClusterView_1.PaginatedLegacyClusterView,
    "PaginatedNetworkAccessView": PaginatedNetworkAccessView_1.PaginatedNetworkAccessView,
    "PaginatedOnlineArchiveView": PaginatedOnlineArchiveView_1.PaginatedOnlineArchiveView,
    "PaginatedOrgGroupView": PaginatedOrgGroupView_1.PaginatedOrgGroupView,
    "PaginatedOrganizationView": PaginatedOrganizationView_1.PaginatedOrganizationView,
    "PaginatedPipelineRunView": PaginatedPipelineRunView_1.PaginatedPipelineRunView,
    "PaginatedPrivateLinkConnectionView": PaginatedPrivateLinkConnectionView_1.PaginatedPrivateLinkConnectionView,
    "PaginatedRestoreJobView": PaginatedRestoreJobView_1.PaginatedRestoreJobView,
    "PaginatedServerlessInstanceDescriptionView": PaginatedServerlessInstanceDescriptionView_1.PaginatedServerlessInstanceDescriptionView,
    "PaginatedSnapshotView": PaginatedSnapshotView_1.PaginatedSnapshotView,
    "PaginatedTeamRoleView": PaginatedTeamRoleView_1.PaginatedTeamRoleView,
    "PaginatedTeamView": PaginatedTeamView_1.PaginatedTeamView,
    "PaginatedTenantRestoreView": PaginatedTenantRestoreView_1.PaginatedTenantRestoreView,
    "PaginatedTenantSnapshotView": PaginatedTenantSnapshotView_1.PaginatedTenantSnapshotView,
    "PaginatedUserCertView": PaginatedUserCertView_1.PaginatedUserCertView,
    "PartitionField": PartitionField_1.PartitionField,
    "PartitionFieldView": PartitionFieldView_1.PartitionFieldView,
    "PemFileInfo": PemFileInfo_1.PemFileInfo,
    "PemFileInfoView": PemFileInfoView_1.PemFileInfoView,
    "PerformanceAdvisorOpStatsView": PerformanceAdvisorOpStatsView_1.PerformanceAdvisorOpStatsView,
    "PerformanceAdvisorOperationView": PerformanceAdvisorOperationView_1.PerformanceAdvisorOperationView,
    "PeriodicCpsSnapshotSource": PeriodicCpsSnapshotSource_1.PeriodicCpsSnapshotSource,
    "PipelineRunStats": PipelineRunStats_1.PipelineRunStats,
    "PrivateIPModeView": PrivateIPModeView_1.PrivateIPModeView,
    "PrivateNetworkEndpointIdEntry": PrivateNetworkEndpointIdEntry_1.PrivateNetworkEndpointIdEntry,
    "ProjectSettingItemView": ProjectSettingItemView_1.ProjectSettingItemView,
    "ProviderRegions": ProviderRegions_1.ProviderRegions,
    "RPUMetricThresholdView": RPUMetricThresholdView_1.RPUMetricThresholdView,
    "Raw": Raw_1.Raw,
    "RawMetricAlertView": RawMetricAlertView_1.RawMetricAlertView,
    "RawMetricEventView": RawMetricEventView_1.RawMetricEventView,
    "RawMetricThresholdView": RawMetricThresholdView_1.RawMetricThresholdView,
    "RawMetricValueView": RawMetricValueView_1.RawMetricValueView,
    "RegionConfig": RegionConfig_1.RegionConfig,
    "RegionSpec": RegionSpec_1.RegionSpec,
    "ReplicaSetAlertConfigViewForNdsGroup": ReplicaSetAlertConfigViewForNdsGroup_1.ReplicaSetAlertConfigViewForNdsGroup,
    "ReplicaSetAlertViewForNdsGroup": ReplicaSetAlertViewForNdsGroup_1.ReplicaSetAlertViewForNdsGroup,
    "ReplicaSetMatcherView": ReplicaSetMatcherView_1.ReplicaSetMatcherView,
    "ReplicaSetThresholdAlertConfigViewForNdsGroup": ReplicaSetThresholdAlertConfigViewForNdsGroup_1.ReplicaSetThresholdAlertConfigViewForNdsGroup,
    "ReplicationSpec": ReplicationSpec_1.ReplicationSpec,
    "Role": Role_1.Role,
    "RoleAssignment": RoleAssignment_1.RoleAssignment,
    "RoleMappingView": RoleMappingView_1.RoleMappingView,
    "SMSNotificationView": SMSNotificationView_1.SMSNotificationView,
    "SampleDatasetStatus": SampleDatasetStatus_1.SampleDatasetStatus,
    "ServerlessAWSTenantEndpoint": ServerlessAWSTenantEndpoint_1.ServerlessAWSTenantEndpoint,
    "ServerlessAWSTenantEndpointUpdate": ServerlessAWSTenantEndpointUpdate_1.ServerlessAWSTenantEndpointUpdate,
    "ServerlessAzureTenantEndpoint": ServerlessAzureTenantEndpoint_1.ServerlessAzureTenantEndpoint,
    "ServerlessAzureTenantEndpointUpdate": ServerlessAzureTenantEndpointUpdate_1.ServerlessAzureTenantEndpointUpdate,
    "ServerlessBackupOptions": ServerlessBackupOptions_1.ServerlessBackupOptions,
    "ServerlessBackupRestoreJob": ServerlessBackupRestoreJob_1.ServerlessBackupRestoreJob,
    "ServerlessBackupSnapshot": ServerlessBackupSnapshot_1.ServerlessBackupSnapshot,
    "ServerlessInstanceDescription": ServerlessInstanceDescription_1.ServerlessInstanceDescription,
    "ServerlessInstanceDescriptionConnectionStrings": ServerlessInstanceDescriptionConnectionStrings_1.ServerlessInstanceDescriptionConnectionStrings,
    "ServerlessInstanceDescriptionConnectionStringsPrivateEndpoint": ServerlessInstanceDescriptionConnectionStringsPrivateEndpoint_1.ServerlessInstanceDescriptionConnectionStringsPrivateEndpoint,
    "ServerlessInstanceDescriptionConnectionStringsPrivateEndpointEndpoint": ServerlessInstanceDescriptionConnectionStringsPrivateEndpointEndpoint_1.ServerlessInstanceDescriptionConnectionStringsPrivateEndpointEndpoint,
    "ServerlessInstanceDescriptionCreate": ServerlessInstanceDescriptionCreate_1.ServerlessInstanceDescriptionCreate,
    "ServerlessInstanceDescriptionUpdate": ServerlessInstanceDescriptionUpdate_1.ServerlessInstanceDescriptionUpdate,
    "ServerlessMetricAlertConfigViewForNdsGroup": ServerlessMetricAlertConfigViewForNdsGroup_1.ServerlessMetricAlertConfigViewForNdsGroup,
    "ServerlessMetricThresholdView": ServerlessMetricThresholdView_1.ServerlessMetricThresholdView,
    "ServerlessProviderSettings": ServerlessProviderSettings_1.ServerlessProviderSettings,
    "ServerlessTenantEndpoint": ServerlessTenantEndpoint_1.ServerlessTenantEndpoint,
    "ServerlessTenantEndpointCreate": ServerlessTenantEndpointCreate_1.ServerlessTenantEndpointCreate,
    "ServerlessTenantEndpointUpdate": ServerlessTenantEndpointUpdate_1.ServerlessTenantEndpointUpdate,
    "SlackNotificationView": SlackNotificationView_1.SlackNotificationView,
    "SnapshotRetention": SnapshotRetention_1.SnapshotRetention,
    "SnapshotSchedule": SnapshotSchedule_1.SnapshotSchedule,
    "Source": Source_1.Source,
    "SummaryNotificationView": SummaryNotificationView_1.SummaryNotificationView,
    "SynonymSource": SynonymSource_1.SynonymSource,
    "TargetOrgRequestView": TargetOrgRequestView_1.TargetOrgRequestView,
    "TargetOrgView": TargetOrgView_1.TargetOrgView,
    "TeamEventView": TeamEventView_1.TeamEventView,
    "TeamEventViewForNdsGroup": TeamEventViewForNdsGroup_1.TeamEventViewForNdsGroup,
    "TeamNotificationView": TeamNotificationView_1.TeamNotificationView,
    "TenantHardwareSpec": TenantHardwareSpec_1.TenantHardwareSpec,
    "TenantRegionConfig": TenantRegionConfig_1.TenantRegionConfig,
    "TenantRestore": TenantRestore_1.TenantRestore,
    "TenantSnapshot": TenantSnapshot_1.TenantSnapshot,
    "ThresholdViewInteger": ThresholdViewInteger_1.ThresholdViewInteger,
    "TimeMetricAlertView": TimeMetricAlertView_1.TimeMetricAlertView,
    "TimeMetricEventView": TimeMetricEventView_1.TimeMetricEventView,
    "TimeMetricThresholdView": TimeMetricThresholdView_1.TimeMetricThresholdView,
    "TimeMetricValueView": TimeMetricValueView_1.TimeMetricValueView,
    "ToggleView": ToggleView_1.ToggleView,
    "TokenFilterasciiFolding": TokenFilterasciiFolding_1.TokenFilterasciiFolding,
    "TokenFilterdaitchMokotoffSoundex": TokenFilterdaitchMokotoffSoundex_1.TokenFilterdaitchMokotoffSoundex,
    "TokenFilteredgeGram": TokenFilteredgeGram_1.TokenFilteredgeGram,
    "TokenFiltericuFolding": TokenFiltericuFolding_1.TokenFiltericuFolding,
    "TokenFiltericuNormalizer": TokenFiltericuNormalizer_1.TokenFiltericuNormalizer,
    "TokenFilterlength": TokenFilterlength_1.TokenFilterlength,
    "TokenFilterlowercase": TokenFilterlowercase_1.TokenFilterlowercase,
    "TokenFilternGram": TokenFilternGram_1.TokenFilternGram,
    "TokenFilterregex": TokenFilterregex_1.TokenFilterregex,
    "TokenFilterreverse": TokenFilterreverse_1.TokenFilterreverse,
    "TokenFiltershingle": TokenFiltershingle_1.TokenFiltershingle,
    "TokenFiltersnowballStemming": TokenFiltersnowballStemming_1.TokenFiltersnowballStemming,
    "TokenFilterstopword": TokenFilterstopword_1.TokenFilterstopword,
    "TokenFiltertrim": TokenFiltertrim_1.TokenFiltertrim,
    "TokenizeredgeGram": TokenizeredgeGram_1.TokenizeredgeGram,
    "Tokenizerkeyword": Tokenizerkeyword_1.Tokenizerkeyword,
    "TokenizernGram": TokenizernGram_1.TokenizernGram,
    "TokenizerregexCaptureGroup": TokenizerregexCaptureGroup_1.TokenizerregexCaptureGroup,
    "TokenizerregexSplit": TokenizerregexSplit_1.TokenizerregexSplit,
    "Tokenizerstandard": Tokenizerstandard_1.Tokenizerstandard,
    "TokenizeruaxUrlEmail": TokenizeruaxUrlEmail_1.TokenizeruaxUrlEmail,
    "Tokenizerwhitespace": Tokenizerwhitespace_1.Tokenizerwhitespace,
    "TriggerIngestionRequest": TriggerIngestionRequest_1.TriggerIngestionRequest,
    "UpdateCustomDBRole": UpdateCustomDBRole_1.UpdateCustomDBRole,
    "UserCert": UserCert_1.UserCert,
    "UserEventViewForNdsGroup": UserEventViewForNdsGroup_1.UserEventViewForNdsGroup,
    "UserEventViewForOrg": UserEventViewForOrg_1.UserEventViewForOrg,
    "UserNotificationView": UserNotificationView_1.UserNotificationView,
    "UserScope": UserScope_1.UserScope,
    "UserSecurity": UserSecurity_1.UserSecurity,
    "ValidationView": ValidationView_1.ValidationView,
    "VictorOpsNotificationView": VictorOpsNotificationView_1.VictorOpsNotificationView,
    "WebhookNotificationView": WebhookNotificationView_1.WebhookNotificationView,
    "WeeklyScheduleView": WeeklyScheduleView_1.WeeklyScheduleView,
    "X509Certificate": X509Certificate_1.X509Certificate,
    "X509CertificateView": X509CertificateView_1.X509CertificateView,
    "ZoneMapping": ZoneMapping_1.ZoneMapping,
};
var ObjectSerializer = (function () {
    function ObjectSerializer() {
    }
    ObjectSerializer.findCorrectType = function (data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap.has(expectedType)) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType;
            }
            var discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType;
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if (typeMap[discriminatorType]) {
                        return discriminatorType;
                    }
                    else {
                        return expectedType;
                    }
                }
                else {
                    return expectedType;
                }
            }
        }
    };
    ObjectSerializer.serialize = function (data, type, format) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) {
            var subType = type.replace("Array<", "");
            subType = subType.substring(0, subType.length - 1);
            var transformedData = [];
            for (var index in data) {
                var date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType, format));
            }
            return transformedData;
        }
        else if (type === "Date") {
            if (format == "date") {
                var month = data.getMonth() + 1;
                month = month < 10 ? "0" + month.toString() : month.toString();
                var day = data.getDate();
                day = day < 10 ? "0" + day.toString() : day.toString();
                return data.getFullYear() + "-" + month + "-" + day;
            }
            else {
                return data.toISOString();
            }
        }
        else {
            if (enumsMap.has(type)) {
                return data;
            }
            if (!typeMap[type]) {
                return data;
            }
            type = this.findCorrectType(data, type);
            var attributeTypes = typeMap[type].getAttributeTypeMap();
            var instance = {};
            for (var index in attributeTypes) {
                var attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type, attributeType.format);
            }
            return instance;
        }
    };
    ObjectSerializer.deserialize = function (data, type, format) {
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) {
            var subType = type.replace("Array<", "");
            subType = subType.substring(0, subType.length - 1);
            var transformedData = [];
            for (var index in data) {
                var date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType, format));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap.has(type)) {
                return data;
            }
            if (!typeMap[type]) {
                return data;
            }
            var instance = new typeMap[type]();
            var attributeTypes = typeMap[type].getAttributeTypeMap();
            for (var index in attributeTypes) {
                var attributeType = attributeTypes[index];
                var value = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type, attributeType.format);
                if (value !== undefined) {
                    instance[attributeType.name] = value;
                }
            }
            return instance;
        }
    };
    ObjectSerializer.normalizeMediaType = function (mediaType) {
        if (mediaType === undefined) {
            return undefined;
        }
        return mediaType.split(";")[0].trim().toLowerCase();
    };
    ObjectSerializer.getPreferredMediaType = function (mediaTypes) {
        if (!mediaTypes) {
            return "application/json";
        }
        var normalMediaTypes = mediaTypes.map(this.normalizeMediaType);
        var selectedMediaType = undefined;
        var selectedRank = -Infinity;
        for (var _i = 0, normalMediaTypes_1 = normalMediaTypes; _i < normalMediaTypes_1.length; _i++) {
            var mediaType = normalMediaTypes_1[_i];
            if (supportedMediaTypes[mediaType] > selectedRank) {
                selectedMediaType = mediaType;
                selectedRank = supportedMediaTypes[mediaType];
            }
        }
        if (selectedMediaType === undefined) {
            throw new Error("None of the given media types are supported: " + mediaTypes.join(", "));
        }
        return selectedMediaType;
    };
    ObjectSerializer.stringify = function (data, mediaType) {
        if (mediaType === "text/plain") {
            return String(data);
        }
        if (mediaType === "application/json") {
            return JSON.stringify(data);
        }
        throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.stringify.");
    };
    ObjectSerializer.parse = function (rawData, mediaType) {
        if (mediaType === undefined) {
            throw new Error("Cannot parse content. No Content-Type defined.");
        }
        if (mediaType === "text/plain") {
            return rawData;
        }
        if (mediaType === "application/json") {
            return JSON.parse(rawData);
        }
        if (mediaType === "text/html") {
            return rawData;
        }
        throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.parse.");
    };
    return ObjectSerializer;
}());
exports.ObjectSerializer = ObjectSerializer;
//# sourceMappingURL=ObjectSerializer.js.map

/***/ }),

/***/ 63812:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OnDemandCpsSnapshotSource = void 0;
var OnDemandCpsSnapshotSource = (function () {
    function OnDemandCpsSnapshotSource() {
    }
    OnDemandCpsSnapshotSource.getAttributeTypeMap = function () {
        return OnDemandCpsSnapshotSource.attributeTypeMap;
    };
    OnDemandCpsSnapshotSource.discriminator = undefined;
    OnDemandCpsSnapshotSource.attributeTypeMap = [
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "collectionName",
            "baseName": "collectionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "databaseName",
            "baseName": "databaseName",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return OnDemandCpsSnapshotSource;
}());
exports.OnDemandCpsSnapshotSource = OnDemandCpsSnapshotSource;
//# sourceMappingURL=OnDemandCpsSnapshotSource.js.map

/***/ }),

/***/ 80656:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OnlineArchive = void 0;
var OnlineArchive = (function () {
    function OnlineArchive() {
    }
    OnlineArchive.getAttributeTypeMap = function () {
        return OnlineArchive.attributeTypeMap;
    };
    OnlineArchive.discriminator = undefined;
    OnlineArchive.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "collName",
            "baseName": "collName",
            "type": "string",
            "format": ""
        },
        {
            "name": "collectionType",
            "baseName": "collectionType",
            "type": "string",
            "format": ""
        },
        {
            "name": "criteria",
            "baseName": "criteria",
            "type": "CriteriaView",
            "format": ""
        },
        {
            "name": "dbName",
            "baseName": "dbName",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "partitionFields",
            "baseName": "partitionFields",
            "type": "Array<PartitionFieldView>",
            "format": ""
        },
        {
            "name": "schedule",
            "baseName": "schedule",
            "type": "OnlineArchiveSchedule",
            "format": ""
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string",
            "format": ""
        }
    ];
    return OnlineArchive;
}());
exports.OnlineArchive = OnlineArchive;
//# sourceMappingURL=OnlineArchive.js.map

/***/ }),

/***/ 79918:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OnlineArchiveSchedule = void 0;
var OnlineArchiveSchedule = (function () {
    function OnlineArchiveSchedule() {
    }
    OnlineArchiveSchedule.getAttributeTypeMap = function () {
        return OnlineArchiveSchedule.attributeTypeMap;
    };
    OnlineArchiveSchedule.discriminator = "type";
    OnlineArchiveSchedule.attributeTypeMap = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "endHour",
            "baseName": "endHour",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "endMinute",
            "baseName": "endMinute",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "startHour",
            "baseName": "startHour",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "startMinute",
            "baseName": "startMinute",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "dayOfWeek",
            "baseName": "dayOfWeek",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "dayOfMonth",
            "baseName": "dayOfMonth",
            "type": "number",
            "format": "int32"
        }
    ];
    return OnlineArchiveSchedule;
}());
exports.OnlineArchiveSchedule = OnlineArchiveSchedule;
//# sourceMappingURL=OnlineArchiveSchedule.js.map

/***/ }),

/***/ 43074:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=Operator.js.map

/***/ }),

/***/ 94627:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OpsGenieNotificationView = void 0;
var OpsGenieNotificationView = (function () {
    function OpsGenieNotificationView() {
    }
    OpsGenieNotificationView.getAttributeTypeMap = function () {
        return OpsGenieNotificationView.attributeTypeMap;
    };
    OpsGenieNotificationView.discriminator = undefined;
    OpsGenieNotificationView.attributeTypeMap = [
        {
            "name": "delayMin",
            "baseName": "delayMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "intervalMin",
            "baseName": "intervalMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "opsGenieApiKey",
            "baseName": "opsGenieApiKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "opsGenieRegion",
            "baseName": "opsGenieRegion",
            "type": "string",
            "format": ""
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        }
    ];
    return OpsGenieNotificationView;
}());
exports.OpsGenieNotificationView = OpsGenieNotificationView;
//# sourceMappingURL=OpsGenieNotificationView.js.map

/***/ }),

/***/ 84387:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=OrgEventTypeViewForOrg.js.map

/***/ }),

/***/ 53108:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OrgEventViewForOrg = void 0;
var OrgEventViewForOrg = (function () {
    function OrgEventViewForOrg() {
    }
    OrgEventViewForOrg.getAttributeTypeMap = function () {
        return OrgEventViewForOrg.attributeTypeMap;
    };
    OrgEventViewForOrg.discriminator = undefined;
    OrgEventViewForOrg.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "OrgEventTypeViewForOrg",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "invoiceId",
            "baseName": "invoiceId",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return OrgEventViewForOrg;
}());
exports.OrgEventViewForOrg = OrgEventViewForOrg;
//# sourceMappingURL=OrgEventViewForOrg.js.map

/***/ }),

/***/ 52386:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OrgFederationSettingsView = void 0;
var OrgFederationSettingsView = (function () {
    function OrgFederationSettingsView() {
    }
    OrgFederationSettingsView.getAttributeTypeMap = function () {
        return OrgFederationSettingsView.attributeTypeMap;
    };
    OrgFederationSettingsView.discriminator = undefined;
    OrgFederationSettingsView.attributeTypeMap = [
        {
            "name": "federatedDomains",
            "baseName": "federatedDomains",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "hasRoleMappings",
            "baseName": "hasRoleMappings",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "identityProviderId",
            "baseName": "identityProviderId",
            "type": "string",
            "format": ""
        },
        {
            "name": "identityProviderStatus",
            "baseName": "identityProviderStatus",
            "type": "string",
            "format": ""
        }
    ];
    return OrgFederationSettingsView;
}());
exports.OrgFederationSettingsView = OrgFederationSettingsView;
//# sourceMappingURL=OrgFederationSettingsView.js.map

/***/ }),

/***/ 77229:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OrgGroupView = void 0;
var OrgGroupView = (function () {
    function OrgGroupView() {
    }
    OrgGroupView.getAttributeTypeMap = function () {
        return OrgGroupView.attributeTypeMap;
    };
    OrgGroupView.discriminator = undefined;
    OrgGroupView.attributeTypeMap = [
        {
            "name": "clusters",
            "baseName": "clusters",
            "type": "Array<ClusterView>",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupName",
            "baseName": "groupName",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgName",
            "baseName": "orgName",
            "type": "string",
            "format": ""
        },
        {
            "name": "planType",
            "baseName": "planType",
            "type": "string",
            "format": ""
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "Array<string>",
            "format": ""
        }
    ];
    return OrgGroupView;
}());
exports.OrgGroupView = OrgGroupView;
//# sourceMappingURL=OrgGroupView.js.map

/***/ }),

/***/ 12611:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OrgNotificationView = void 0;
var OrgNotificationView = (function () {
    function OrgNotificationView() {
    }
    OrgNotificationView.getAttributeTypeMap = function () {
        return OrgNotificationView.attributeTypeMap;
    };
    OrgNotificationView.discriminator = undefined;
    OrgNotificationView.attributeTypeMap = [
        {
            "name": "delayMin",
            "baseName": "delayMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "emailEnabled",
            "baseName": "emailEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "intervalMin",
            "baseName": "intervalMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "smsEnabled",
            "baseName": "smsEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        }
    ];
    return OrgNotificationView;
}());
exports.OrgNotificationView = OrgNotificationView;
//# sourceMappingURL=OrgNotificationView.js.map

/***/ }),

/***/ 96032:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OrgPaginatedEventView = void 0;
var OrgPaginatedEventView = (function () {
    function OrgPaginatedEventView() {
    }
    OrgPaginatedEventView.getAttributeTypeMap = function () {
        return OrgPaginatedEventView.attributeTypeMap;
    };
    OrgPaginatedEventView.discriminator = undefined;
    OrgPaginatedEventView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<EventViewForOrg>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return OrgPaginatedEventView;
}());
exports.OrgPaginatedEventView = OrgPaginatedEventView;
//# sourceMappingURL=OrgPaginatedEventView.js.map

/***/ }),

/***/ 39500:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OrganizationSettings = void 0;
var OrganizationSettings = (function () {
    function OrganizationSettings() {
    }
    OrganizationSettings.getAttributeTypeMap = function () {
        return OrganizationSettings.attributeTypeMap;
    };
    OrganizationSettings.discriminator = undefined;
    OrganizationSettings.attributeTypeMap = [
        {
            "name": "apiAccessListRequired",
            "baseName": "apiAccessListRequired",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "multiFactorAuthRequired",
            "baseName": "multiFactorAuthRequired",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "restrictEmployeeAccess",
            "baseName": "restrictEmployeeAccess",
            "type": "boolean",
            "format": ""
        }
    ];
    return OrganizationSettings;
}());
exports.OrganizationSettings = OrganizationSettings;
//# sourceMappingURL=OrganizationSettings.js.map

/***/ }),

/***/ 96779:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PagerDutyNotificationView = void 0;
var PagerDutyNotificationView = (function () {
    function PagerDutyNotificationView() {
    }
    PagerDutyNotificationView.getAttributeTypeMap = function () {
        return PagerDutyNotificationView.attributeTypeMap;
    };
    PagerDutyNotificationView.discriminator = undefined;
    PagerDutyNotificationView.attributeTypeMap = [
        {
            "name": "delayMin",
            "baseName": "delayMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "intervalMin",
            "baseName": "intervalMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "region",
            "baseName": "region",
            "type": "string",
            "format": ""
        },
        {
            "name": "serviceKey",
            "baseName": "serviceKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        }
    ];
    return PagerDutyNotificationView;
}());
exports.PagerDutyNotificationView = PagerDutyNotificationView;
//# sourceMappingURL=PagerDutyNotificationView.js.map

/***/ }),

/***/ 14198:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedAWSPeerVpcView = void 0;
var PaginatedAWSPeerVpcView = (function () {
    function PaginatedAWSPeerVpcView() {
    }
    PaginatedAWSPeerVpcView.getAttributeTypeMap = function () {
        return PaginatedAWSPeerVpcView.attributeTypeMap;
    };
    PaginatedAWSPeerVpcView.discriminator = undefined;
    PaginatedAWSPeerVpcView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<AWSPeerVpc>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedAWSPeerVpcView;
}());
exports.PaginatedAWSPeerVpcView = PaginatedAWSPeerVpcView;
//# sourceMappingURL=PaginatedAWSPeerVpcView.js.map

/***/ }),

/***/ 99072:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedAlertConfigView = void 0;
var PaginatedAlertConfigView = (function () {
    function PaginatedAlertConfigView() {
    }
    PaginatedAlertConfigView.getAttributeTypeMap = function () {
        return PaginatedAlertConfigView.attributeTypeMap;
    };
    PaginatedAlertConfigView.discriminator = undefined;
    PaginatedAlertConfigView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<AlertConfigViewForNdsGroup>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedAlertConfigView;
}());
exports.PaginatedAlertConfigView = PaginatedAlertConfigView;
//# sourceMappingURL=PaginatedAlertConfigView.js.map

/***/ }),

/***/ 57737:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedAlertView = void 0;
var PaginatedAlertView = (function () {
    function PaginatedAlertView() {
    }
    PaginatedAlertView.getAttributeTypeMap = function () {
        return PaginatedAlertView.attributeTypeMap;
    };
    PaginatedAlertView.discriminator = undefined;
    PaginatedAlertView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<AlertViewForNdsGroup>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedAlertView;
}());
exports.PaginatedAlertView = PaginatedAlertView;
//# sourceMappingURL=PaginatedAlertView.js.map

/***/ }),

/***/ 87543:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedApiApiUserView = void 0;
var PaginatedApiApiUserView = (function () {
    function PaginatedApiApiUserView() {
    }
    PaginatedApiApiUserView.getAttributeTypeMap = function () {
        return PaginatedApiApiUserView.attributeTypeMap;
    };
    PaginatedApiApiUserView.discriminator = undefined;
    PaginatedApiApiUserView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<ApiApiUserView>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedApiApiUserView;
}());
exports.PaginatedApiApiUserView = PaginatedApiApiUserView;
//# sourceMappingURL=PaginatedApiApiUserView.js.map

/***/ }),

/***/ 45543:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedApiAppUserView = void 0;
var PaginatedApiAppUserView = (function () {
    function PaginatedApiAppUserView() {
    }
    PaginatedApiAppUserView.getAttributeTypeMap = function () {
        return PaginatedApiAppUserView.attributeTypeMap;
    };
    PaginatedApiAppUserView.discriminator = undefined;
    PaginatedApiAppUserView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<ApiAppUserView>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedApiAppUserView;
}());
exports.PaginatedApiAppUserView = PaginatedApiAppUserView;
//# sourceMappingURL=PaginatedApiAppUserView.js.map

/***/ }),

/***/ 96979:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedApiAtlasCheckpointView = void 0;
var PaginatedApiAtlasCheckpointView = (function () {
    function PaginatedApiAtlasCheckpointView() {
    }
    PaginatedApiAtlasCheckpointView.getAttributeTypeMap = function () {
        return PaginatedApiAtlasCheckpointView.attributeTypeMap;
    };
    PaginatedApiAtlasCheckpointView.discriminator = undefined;
    PaginatedApiAtlasCheckpointView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<Checkpoint>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedApiAtlasCheckpointView;
}());
exports.PaginatedApiAtlasCheckpointView = PaginatedApiAtlasCheckpointView;
//# sourceMappingURL=PaginatedApiAtlasCheckpointView.js.map

/***/ }),

/***/ 70739:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedApiAtlasDatabaseUserView = void 0;
var PaginatedApiAtlasDatabaseUserView = (function () {
    function PaginatedApiAtlasDatabaseUserView() {
    }
    PaginatedApiAtlasDatabaseUserView.getAttributeTypeMap = function () {
        return PaginatedApiAtlasDatabaseUserView.attributeTypeMap;
    };
    PaginatedApiAtlasDatabaseUserView.discriminator = undefined;
    PaginatedApiAtlasDatabaseUserView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<DatabaseUser>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedApiAtlasDatabaseUserView;
}());
exports.PaginatedApiAtlasDatabaseUserView = PaginatedApiAtlasDatabaseUserView;
//# sourceMappingURL=PaginatedApiAtlasDatabaseUserView.js.map

/***/ }),

/***/ 28305:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedApiAtlasDiskBackupExportJobView = void 0;
var PaginatedApiAtlasDiskBackupExportJobView = (function () {
    function PaginatedApiAtlasDiskBackupExportJobView() {
    }
    PaginatedApiAtlasDiskBackupExportJobView.getAttributeTypeMap = function () {
        return PaginatedApiAtlasDiskBackupExportJobView.attributeTypeMap;
    };
    PaginatedApiAtlasDiskBackupExportJobView.discriminator = undefined;
    PaginatedApiAtlasDiskBackupExportJobView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<DiskBackupExportJob>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedApiAtlasDiskBackupExportJobView;
}());
exports.PaginatedApiAtlasDiskBackupExportJobView = PaginatedApiAtlasDiskBackupExportJobView;
//# sourceMappingURL=PaginatedApiAtlasDiskBackupExportJobView.js.map

/***/ }),

/***/ 90186:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedApiAtlasProviderRegionsView = void 0;
var PaginatedApiAtlasProviderRegionsView = (function () {
    function PaginatedApiAtlasProviderRegionsView() {
    }
    PaginatedApiAtlasProviderRegionsView.getAttributeTypeMap = function () {
        return PaginatedApiAtlasProviderRegionsView.attributeTypeMap;
    };
    PaginatedApiAtlasProviderRegionsView.discriminator = undefined;
    PaginatedApiAtlasProviderRegionsView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<ProviderRegions>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedApiAtlasProviderRegionsView;
}());
exports.PaginatedApiAtlasProviderRegionsView = PaginatedApiAtlasProviderRegionsView;
//# sourceMappingURL=PaginatedApiAtlasProviderRegionsView.js.map

/***/ }),

/***/ 52224:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedApiAtlasServerlessBackupRestoreJobView = void 0;
var PaginatedApiAtlasServerlessBackupRestoreJobView = (function () {
    function PaginatedApiAtlasServerlessBackupRestoreJobView() {
    }
    PaginatedApiAtlasServerlessBackupRestoreJobView.getAttributeTypeMap = function () {
        return PaginatedApiAtlasServerlessBackupRestoreJobView.attributeTypeMap;
    };
    PaginatedApiAtlasServerlessBackupRestoreJobView.discriminator = undefined;
    PaginatedApiAtlasServerlessBackupRestoreJobView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<ServerlessBackupRestoreJob>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedApiAtlasServerlessBackupRestoreJobView;
}());
exports.PaginatedApiAtlasServerlessBackupRestoreJobView = PaginatedApiAtlasServerlessBackupRestoreJobView;
//# sourceMappingURL=PaginatedApiAtlasServerlessBackupRestoreJobView.js.map

/***/ }),

/***/ 17507:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedApiAtlasServerlessBackupSnapshotView = void 0;
var PaginatedApiAtlasServerlessBackupSnapshotView = (function () {
    function PaginatedApiAtlasServerlessBackupSnapshotView() {
    }
    PaginatedApiAtlasServerlessBackupSnapshotView.getAttributeTypeMap = function () {
        return PaginatedApiAtlasServerlessBackupSnapshotView.attributeTypeMap;
    };
    PaginatedApiAtlasServerlessBackupSnapshotView.discriminator = undefined;
    PaginatedApiAtlasServerlessBackupSnapshotView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<ServerlessBackupSnapshot>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedApiAtlasServerlessBackupSnapshotView;
}());
exports.PaginatedApiAtlasServerlessBackupSnapshotView = PaginatedApiAtlasServerlessBackupSnapshotView;
//# sourceMappingURL=PaginatedApiAtlasServerlessBackupSnapshotView.js.map

/***/ }),

/***/ 98279:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedApiInvoiceView = void 0;
var PaginatedApiInvoiceView = (function () {
    function PaginatedApiInvoiceView() {
    }
    PaginatedApiInvoiceView.getAttributeTypeMap = function () {
        return PaginatedApiInvoiceView.attributeTypeMap;
    };
    PaginatedApiInvoiceView.discriminator = undefined;
    PaginatedApiInvoiceView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<ApiInvoiceView>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedApiInvoiceView;
}());
exports.PaginatedApiInvoiceView = PaginatedApiInvoiceView;
//# sourceMappingURL=PaginatedApiInvoiceView.js.map

/***/ }),

/***/ 91523:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedApiUserAccessListView = void 0;
var PaginatedApiUserAccessListView = (function () {
    function PaginatedApiUserAccessListView() {
    }
    PaginatedApiUserAccessListView.getAttributeTypeMap = function () {
        return PaginatedApiUserAccessListView.attributeTypeMap;
    };
    PaginatedApiUserAccessListView.discriminator = undefined;
    PaginatedApiUserAccessListView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<ApiUserAccessListView>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedApiUserAccessListView;
}());
exports.PaginatedApiUserAccessListView = PaginatedApiUserAccessListView;
//# sourceMappingURL=PaginatedApiUserAccessListView.js.map

/***/ }),

/***/ 64247:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedAppUserView = void 0;
var PaginatedAppUserView = (function () {
    function PaginatedAppUserView() {
    }
    PaginatedAppUserView.getAttributeTypeMap = function () {
        return PaginatedAppUserView.attributeTypeMap;
    };
    PaginatedAppUserView.discriminator = undefined;
    PaginatedAppUserView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<ApiAppUserView>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedAppUserView;
}());
exports.PaginatedAppUserView = PaginatedAppUserView;
//# sourceMappingURL=PaginatedAppUserView.js.map

/***/ }),

/***/ 19845:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedAtlasGroupView = void 0;
var PaginatedAtlasGroupView = (function () {
    function PaginatedAtlasGroupView() {
    }
    PaginatedAtlasGroupView.getAttributeTypeMap = function () {
        return PaginatedAtlasGroupView.attributeTypeMap;
    };
    PaginatedAtlasGroupView.discriminator = undefined;
    PaginatedAtlasGroupView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<Group>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedAtlasGroupView;
}());
exports.PaginatedAtlasGroupView = PaginatedAtlasGroupView;
//# sourceMappingURL=PaginatedAtlasGroupView.js.map

/***/ }),

/***/ 80692:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedAzurePeerNetworkView = void 0;
var PaginatedAzurePeerNetworkView = (function () {
    function PaginatedAzurePeerNetworkView() {
    }
    PaginatedAzurePeerNetworkView.getAttributeTypeMap = function () {
        return PaginatedAzurePeerNetworkView.attributeTypeMap;
    };
    PaginatedAzurePeerNetworkView.discriminator = undefined;
    PaginatedAzurePeerNetworkView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<AzurePeerNetwork>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedAzurePeerNetworkView;
}());
exports.PaginatedAzurePeerNetworkView = PaginatedAzurePeerNetworkView;
//# sourceMappingURL=PaginatedAzurePeerNetworkView.js.map

/***/ }),

/***/ 82375:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedBackupSnapshotExportBucketView = void 0;
var PaginatedBackupSnapshotExportBucketView = (function () {
    function PaginatedBackupSnapshotExportBucketView() {
    }
    PaginatedBackupSnapshotExportBucketView.getAttributeTypeMap = function () {
        return PaginatedBackupSnapshotExportBucketView.attributeTypeMap;
    };
    PaginatedBackupSnapshotExportBucketView.discriminator = undefined;
    PaginatedBackupSnapshotExportBucketView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<DiskBackupSnapshotAWSExportBucket>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedBackupSnapshotExportBucketView;
}());
exports.PaginatedBackupSnapshotExportBucketView = PaginatedBackupSnapshotExportBucketView;
//# sourceMappingURL=PaginatedBackupSnapshotExportBucketView.js.map

/***/ }),

/***/ 46464:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedBackupSnapshotView = void 0;
var PaginatedBackupSnapshotView = (function () {
    function PaginatedBackupSnapshotView() {
    }
    PaginatedBackupSnapshotView.getAttributeTypeMap = function () {
        return PaginatedBackupSnapshotView.attributeTypeMap;
    };
    PaginatedBackupSnapshotView.discriminator = undefined;
    PaginatedBackupSnapshotView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<DiskBackupSnapshot>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedBackupSnapshotView;
}());
exports.PaginatedBackupSnapshotView = PaginatedBackupSnapshotView;
//# sourceMappingURL=PaginatedBackupSnapshotView.js.map

/***/ }),

/***/ 49242:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedCloudBackupReplicaSetView = void 0;
var PaginatedCloudBackupReplicaSetView = (function () {
    function PaginatedCloudBackupReplicaSetView() {
    }
    PaginatedCloudBackupReplicaSetView.getAttributeTypeMap = function () {
        return PaginatedCloudBackupReplicaSetView.attributeTypeMap;
    };
    PaginatedCloudBackupReplicaSetView.discriminator = undefined;
    PaginatedCloudBackupReplicaSetView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<DiskBackupReplicaSet>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedCloudBackupReplicaSetView;
}());
exports.PaginatedCloudBackupReplicaSetView = PaginatedCloudBackupReplicaSetView;
//# sourceMappingURL=PaginatedCloudBackupReplicaSetView.js.map

/***/ }),

/***/ 38098:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedCloudBackupRestoreJobView = void 0;
var PaginatedCloudBackupRestoreJobView = (function () {
    function PaginatedCloudBackupRestoreJobView() {
    }
    PaginatedCloudBackupRestoreJobView.getAttributeTypeMap = function () {
        return PaginatedCloudBackupRestoreJobView.attributeTypeMap;
    };
    PaginatedCloudBackupRestoreJobView.discriminator = undefined;
    PaginatedCloudBackupRestoreJobView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<DiskBackupRestoreJob>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedCloudBackupRestoreJobView;
}());
exports.PaginatedCloudBackupRestoreJobView = PaginatedCloudBackupRestoreJobView;
//# sourceMappingURL=PaginatedCloudBackupRestoreJobView.js.map

/***/ }),

/***/ 85997:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedCloudBackupShardedClusterSnapshotView = void 0;
var PaginatedCloudBackupShardedClusterSnapshotView = (function () {
    function PaginatedCloudBackupShardedClusterSnapshotView() {
    }
    PaginatedCloudBackupShardedClusterSnapshotView.getAttributeTypeMap = function () {
        return PaginatedCloudBackupShardedClusterSnapshotView.attributeTypeMap;
    };
    PaginatedCloudBackupShardedClusterSnapshotView.discriminator = undefined;
    PaginatedCloudBackupShardedClusterSnapshotView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<DiskBackupShardedClusterSnapshot>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedCloudBackupShardedClusterSnapshotView;
}());
exports.PaginatedCloudBackupShardedClusterSnapshotView = PaginatedCloudBackupShardedClusterSnapshotView;
//# sourceMappingURL=PaginatedCloudBackupShardedClusterSnapshotView.js.map

/***/ }),

/***/ 44373:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedCloudProviderContainerView = void 0;
var PaginatedCloudProviderContainerView = (function () {
    function PaginatedCloudProviderContainerView() {
    }
    PaginatedCloudProviderContainerView.getAttributeTypeMap = function () {
        return PaginatedCloudProviderContainerView.attributeTypeMap;
    };
    PaginatedCloudProviderContainerView.discriminator = undefined;
    PaginatedCloudProviderContainerView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<CloudProviderContainer>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedCloudProviderContainerView;
}());
exports.PaginatedCloudProviderContainerView = PaginatedCloudProviderContainerView;
//# sourceMappingURL=PaginatedCloudProviderContainerView.js.map

/***/ }),

/***/ 9540:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedClusterDescriptionV15View = void 0;
var PaginatedClusterDescriptionV15View = (function () {
    function PaginatedClusterDescriptionV15View() {
    }
    PaginatedClusterDescriptionV15View.getAttributeTypeMap = function () {
        return PaginatedClusterDescriptionV15View.attributeTypeMap;
    };
    PaginatedClusterDescriptionV15View.discriminator = undefined;
    PaginatedClusterDescriptionV15View.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<ClusterDescriptionV15>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedClusterDescriptionV15View;
}());
exports.PaginatedClusterDescriptionV15View = PaginatedClusterDescriptionV15View;
//# sourceMappingURL=PaginatedClusterDescriptionV15View.js.map

/***/ }),

/***/ 77325:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedDatabaseView = void 0;
var PaginatedDatabaseView = (function () {
    function PaginatedDatabaseView() {
    }
    PaginatedDatabaseView.getAttributeTypeMap = function () {
        return PaginatedDatabaseView.attributeTypeMap;
    };
    PaginatedDatabaseView.discriminator = undefined;
    PaginatedDatabaseView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<ApiDatabaseView>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedDatabaseView;
}());
exports.PaginatedDatabaseView = PaginatedDatabaseView;
//# sourceMappingURL=PaginatedDatabaseView.js.map

/***/ }),

/***/ 22143:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedDiskPartitionView = void 0;
var PaginatedDiskPartitionView = (function () {
    function PaginatedDiskPartitionView() {
    }
    PaginatedDiskPartitionView.getAttributeTypeMap = function () {
        return PaginatedDiskPartitionView.attributeTypeMap;
    };
    PaginatedDiskPartitionView.discriminator = undefined;
    PaginatedDiskPartitionView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<ApiDiskPartitionView>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedDiskPartitionView;
}());
exports.PaginatedDiskPartitionView = PaginatedDiskPartitionView;
//# sourceMappingURL=PaginatedDiskPartitionView.js.map

/***/ }),

/***/ 27042:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedGCPPeerVpcView = void 0;
var PaginatedGCPPeerVpcView = (function () {
    function PaginatedGCPPeerVpcView() {
    }
    PaginatedGCPPeerVpcView.getAttributeTypeMap = function () {
        return PaginatedGCPPeerVpcView.attributeTypeMap;
    };
    PaginatedGCPPeerVpcView.discriminator = undefined;
    PaginatedGCPPeerVpcView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<GCPPeerVpc>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedGCPPeerVpcView;
}());
exports.PaginatedGCPPeerVpcView = PaginatedGCPPeerVpcView;
//# sourceMappingURL=PaginatedGCPPeerVpcView.js.map

/***/ }),

/***/ 60047:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedHostViewAtlas = void 0;
var PaginatedHostViewAtlas = (function () {
    function PaginatedHostViewAtlas() {
    }
    PaginatedHostViewAtlas.getAttributeTypeMap = function () {
        return PaginatedHostViewAtlas.attributeTypeMap;
    };
    PaginatedHostViewAtlas.discriminator = undefined;
    PaginatedHostViewAtlas.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<LinkAtlas>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<ApiHostViewAtlas>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedHostViewAtlas;
}());
exports.PaginatedHostViewAtlas = PaginatedHostViewAtlas;
//# sourceMappingURL=PaginatedHostViewAtlas.js.map

/***/ }),

/***/ 30368:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedLegacyClusterView = void 0;
var PaginatedLegacyClusterView = (function () {
    function PaginatedLegacyClusterView() {
    }
    PaginatedLegacyClusterView.getAttributeTypeMap = function () {
        return PaginatedLegacyClusterView.attributeTypeMap;
    };
    PaginatedLegacyClusterView.discriminator = undefined;
    PaginatedLegacyClusterView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<LegacyClusterDescription>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedLegacyClusterView;
}());
exports.PaginatedLegacyClusterView = PaginatedLegacyClusterView;
//# sourceMappingURL=PaginatedLegacyClusterView.js.map

/***/ }),

/***/ 15444:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedNetworkAccessView = void 0;
var PaginatedNetworkAccessView = (function () {
    function PaginatedNetworkAccessView() {
    }
    PaginatedNetworkAccessView.getAttributeTypeMap = function () {
        return PaginatedNetworkAccessView.attributeTypeMap;
    };
    PaginatedNetworkAccessView.discriminator = undefined;
    PaginatedNetworkAccessView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<NetworkPermissionEntry>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedNetworkAccessView;
}());
exports.PaginatedNetworkAccessView = PaginatedNetworkAccessView;
//# sourceMappingURL=PaginatedNetworkAccessView.js.map

/***/ }),

/***/ 88748:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedOnlineArchiveView = void 0;
var PaginatedOnlineArchiveView = (function () {
    function PaginatedOnlineArchiveView() {
    }
    PaginatedOnlineArchiveView.getAttributeTypeMap = function () {
        return PaginatedOnlineArchiveView.attributeTypeMap;
    };
    PaginatedOnlineArchiveView.discriminator = undefined;
    PaginatedOnlineArchiveView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<OnlineArchive>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedOnlineArchiveView;
}());
exports.PaginatedOnlineArchiveView = PaginatedOnlineArchiveView;
//# sourceMappingURL=PaginatedOnlineArchiveView.js.map

/***/ }),

/***/ 29466:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedOrgGroupView = void 0;
var PaginatedOrgGroupView = (function () {
    function PaginatedOrgGroupView() {
    }
    PaginatedOrgGroupView.getAttributeTypeMap = function () {
        return PaginatedOrgGroupView.attributeTypeMap;
    };
    PaginatedOrgGroupView.discriminator = undefined;
    PaginatedOrgGroupView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<OrgGroupView>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedOrgGroupView;
}());
exports.PaginatedOrgGroupView = PaginatedOrgGroupView;
//# sourceMappingURL=PaginatedOrgGroupView.js.map

/***/ }),

/***/ 9719:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedOrganizationView = void 0;
var PaginatedOrganizationView = (function () {
    function PaginatedOrganizationView() {
    }
    PaginatedOrganizationView.getAttributeTypeMap = function () {
        return PaginatedOrganizationView.attributeTypeMap;
    };
    PaginatedOrganizationView.discriminator = undefined;
    PaginatedOrganizationView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<ApiOrganizationView>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedOrganizationView;
}());
exports.PaginatedOrganizationView = PaginatedOrganizationView;
//# sourceMappingURL=PaginatedOrganizationView.js.map

/***/ }),

/***/ 44632:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedPipelineRunView = void 0;
var PaginatedPipelineRunView = (function () {
    function PaginatedPipelineRunView() {
    }
    PaginatedPipelineRunView.getAttributeTypeMap = function () {
        return PaginatedPipelineRunView.attributeTypeMap;
    };
    PaginatedPipelineRunView.discriminator = undefined;
    PaginatedPipelineRunView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<IngestionPipelineRun>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedPipelineRunView;
}());
exports.PaginatedPipelineRunView = PaginatedPipelineRunView;
//# sourceMappingURL=PaginatedPipelineRunView.js.map

/***/ }),

/***/ 77067:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedPrivateLinkConnectionView = void 0;
var PaginatedPrivateLinkConnectionView = (function () {
    function PaginatedPrivateLinkConnectionView() {
    }
    PaginatedPrivateLinkConnectionView.getAttributeTypeMap = function () {
        return PaginatedPrivateLinkConnectionView.attributeTypeMap;
    };
    PaginatedPrivateLinkConnectionView.discriminator = undefined;
    PaginatedPrivateLinkConnectionView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<EndpointService>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedPrivateLinkConnectionView;
}());
exports.PaginatedPrivateLinkConnectionView = PaginatedPrivateLinkConnectionView;
//# sourceMappingURL=PaginatedPrivateLinkConnectionView.js.map

/***/ }),

/***/ 72537:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedRestoreJobView = void 0;
var PaginatedRestoreJobView = (function () {
    function PaginatedRestoreJobView() {
    }
    PaginatedRestoreJobView.getAttributeTypeMap = function () {
        return PaginatedRestoreJobView.attributeTypeMap;
    };
    PaginatedRestoreJobView.discriminator = undefined;
    PaginatedRestoreJobView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<ApiRestoreJobView>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedRestoreJobView;
}());
exports.PaginatedRestoreJobView = PaginatedRestoreJobView;
//# sourceMappingURL=PaginatedRestoreJobView.js.map

/***/ }),

/***/ 51042:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedServerlessInstanceDescriptionView = void 0;
var PaginatedServerlessInstanceDescriptionView = (function () {
    function PaginatedServerlessInstanceDescriptionView() {
    }
    PaginatedServerlessInstanceDescriptionView.getAttributeTypeMap = function () {
        return PaginatedServerlessInstanceDescriptionView.attributeTypeMap;
    };
    PaginatedServerlessInstanceDescriptionView.discriminator = undefined;
    PaginatedServerlessInstanceDescriptionView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<ServerlessInstanceDescription>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedServerlessInstanceDescriptionView;
}());
exports.PaginatedServerlessInstanceDescriptionView = PaginatedServerlessInstanceDescriptionView;
//# sourceMappingURL=PaginatedServerlessInstanceDescriptionView.js.map

/***/ }),

/***/ 78420:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedSnapshotView = void 0;
var PaginatedSnapshotView = (function () {
    function PaginatedSnapshotView() {
    }
    PaginatedSnapshotView.getAttributeTypeMap = function () {
        return PaginatedSnapshotView.attributeTypeMap;
    };
    PaginatedSnapshotView.discriminator = undefined;
    PaginatedSnapshotView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<ApiSnapshotView>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedSnapshotView;
}());
exports.PaginatedSnapshotView = PaginatedSnapshotView;
//# sourceMappingURL=PaginatedSnapshotView.js.map

/***/ }),

/***/ 65057:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedTeamRoleView = void 0;
var PaginatedTeamRoleView = (function () {
    function PaginatedTeamRoleView() {
    }
    PaginatedTeamRoleView.getAttributeTypeMap = function () {
        return PaginatedTeamRoleView.attributeTypeMap;
    };
    PaginatedTeamRoleView.discriminator = undefined;
    PaginatedTeamRoleView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<ApiTeamRoleView>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedTeamRoleView;
}());
exports.PaginatedTeamRoleView = PaginatedTeamRoleView;
//# sourceMappingURL=PaginatedTeamRoleView.js.map

/***/ }),

/***/ 64078:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedTeamView = void 0;
var PaginatedTeamView = (function () {
    function PaginatedTeamView() {
    }
    PaginatedTeamView.getAttributeTypeMap = function () {
        return PaginatedTeamView.attributeTypeMap;
    };
    PaginatedTeamView.discriminator = undefined;
    PaginatedTeamView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<ApiTeamResponseView>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedTeamView;
}());
exports.PaginatedTeamView = PaginatedTeamView;
//# sourceMappingURL=PaginatedTeamView.js.map

/***/ }),

/***/ 81140:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedTenantRestoreView = void 0;
var PaginatedTenantRestoreView = (function () {
    function PaginatedTenantRestoreView() {
    }
    PaginatedTenantRestoreView.getAttributeTypeMap = function () {
        return PaginatedTenantRestoreView.attributeTypeMap;
    };
    PaginatedTenantRestoreView.discriminator = undefined;
    PaginatedTenantRestoreView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<TenantRestore>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedTenantRestoreView;
}());
exports.PaginatedTenantRestoreView = PaginatedTenantRestoreView;
//# sourceMappingURL=PaginatedTenantRestoreView.js.map

/***/ }),

/***/ 93391:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedTenantSnapshotView = void 0;
var PaginatedTenantSnapshotView = (function () {
    function PaginatedTenantSnapshotView() {
    }
    PaginatedTenantSnapshotView.getAttributeTypeMap = function () {
        return PaginatedTenantSnapshotView.attributeTypeMap;
    };
    PaginatedTenantSnapshotView.discriminator = undefined;
    PaginatedTenantSnapshotView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<TenantSnapshot>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedTenantSnapshotView;
}());
exports.PaginatedTenantSnapshotView = PaginatedTenantSnapshotView;
//# sourceMappingURL=PaginatedTenantSnapshotView.js.map

/***/ }),

/***/ 68283:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginatedUserCertView = void 0;
var PaginatedUserCertView = (function () {
    function PaginatedUserCertView() {
    }
    PaginatedUserCertView.getAttributeTypeMap = function () {
        return PaginatedUserCertView.attributeTypeMap;
    };
    PaginatedUserCertView.discriminator = undefined;
    PaginatedUserCertView.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<UserCert>",
            "format": ""
        },
        {
            "name": "totalCount",
            "baseName": "totalCount",
            "type": "number",
            "format": "int32"
        }
    ];
    return PaginatedUserCertView;
}());
exports.PaginatedUserCertView = PaginatedUserCertView;
//# sourceMappingURL=PaginatedUserCertView.js.map

/***/ }),

/***/ 69512:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PartitionField = void 0;
var PartitionField = (function () {
    function PartitionField() {
    }
    PartitionField.getAttributeTypeMap = function () {
        return PartitionField.attributeTypeMap;
    };
    PartitionField.discriminator = undefined;
    PartitionField.attributeTypeMap = [
        {
            "name": "fieldName",
            "baseName": "fieldName",
            "type": "string",
            "format": ""
        },
        {
            "name": "order",
            "baseName": "order",
            "type": "number",
            "format": "int32"
        }
    ];
    return PartitionField;
}());
exports.PartitionField = PartitionField;
//# sourceMappingURL=PartitionField.js.map

/***/ }),

/***/ 83211:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PartitionFieldView = void 0;
var PartitionFieldView = (function () {
    function PartitionFieldView() {
    }
    PartitionFieldView.getAttributeTypeMap = function () {
        return PartitionFieldView.attributeTypeMap;
    };
    PartitionFieldView.discriminator = undefined;
    PartitionFieldView.attributeTypeMap = [
        {
            "name": "fieldName",
            "baseName": "fieldName",
            "type": "string",
            "format": ""
        },
        {
            "name": "fieldType",
            "baseName": "fieldType",
            "type": "string",
            "format": ""
        },
        {
            "name": "order",
            "baseName": "order",
            "type": "number",
            "format": "int32"
        }
    ];
    return PartitionFieldView;
}());
exports.PartitionFieldView = PartitionFieldView;
//# sourceMappingURL=PartitionFieldView.js.map

/***/ }),

/***/ 73031:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PemFileInfo = void 0;
var PemFileInfo = (function () {
    function PemFileInfo() {
    }
    PemFileInfo.getAttributeTypeMap = function () {
        return PemFileInfo.attributeTypeMap;
    };
    PemFileInfo.discriminator = undefined;
    PemFileInfo.attributeTypeMap = [
        {
            "name": "certificates",
            "baseName": "certificates",
            "type": "Array<X509Certificate>",
            "format": ""
        },
        {
            "name": "fileName",
            "baseName": "fileName",
            "type": "string",
            "format": ""
        }
    ];
    return PemFileInfo;
}());
exports.PemFileInfo = PemFileInfo;
//# sourceMappingURL=PemFileInfo.js.map

/***/ }),

/***/ 56229:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PemFileInfoView = void 0;
var PemFileInfoView = (function () {
    function PemFileInfoView() {
    }
    PemFileInfoView.getAttributeTypeMap = function () {
        return PemFileInfoView.attributeTypeMap;
    };
    PemFileInfoView.discriminator = undefined;
    PemFileInfoView.attributeTypeMap = [
        {
            "name": "certificates",
            "baseName": "certificates",
            "type": "Array<X509CertificateView>",
            "format": ""
        },
        {
            "name": "fileName",
            "baseName": "fileName",
            "type": "string",
            "format": ""
        }
    ];
    return PemFileInfoView;
}());
exports.PemFileInfoView = PemFileInfoView;
//# sourceMappingURL=PemFileInfoView.js.map

/***/ }),

/***/ 56889:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PerformanceAdvisorOpStatsView = void 0;
var PerformanceAdvisorOpStatsView = (function () {
    function PerformanceAdvisorOpStatsView() {
    }
    PerformanceAdvisorOpStatsView.getAttributeTypeMap = function () {
        return PerformanceAdvisorOpStatsView.attributeTypeMap;
    };
    PerformanceAdvisorOpStatsView.discriminator = undefined;
    PerformanceAdvisorOpStatsView.attributeTypeMap = [
        {
            "name": "ms",
            "baseName": "ms",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "nReturned",
            "baseName": "nReturned",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "nScanned",
            "baseName": "nScanned",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "ts",
            "baseName": "ts",
            "type": "number",
            "format": "int64"
        }
    ];
    return PerformanceAdvisorOpStatsView;
}());
exports.PerformanceAdvisorOpStatsView = PerformanceAdvisorOpStatsView;
//# sourceMappingURL=PerformanceAdvisorOpStatsView.js.map

/***/ }),

/***/ 17546:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PerformanceAdvisorOperationView = void 0;
var PerformanceAdvisorOperationView = (function () {
    function PerformanceAdvisorOperationView() {
    }
    PerformanceAdvisorOperationView.getAttributeTypeMap = function () {
        return PerformanceAdvisorOperationView.attributeTypeMap;
    };
    PerformanceAdvisorOperationView.discriminator = undefined;
    PerformanceAdvisorOperationView.attributeTypeMap = [
        {
            "name": "predicates",
            "baseName": "predicates",
            "type": "Array<any>",
            "format": ""
        },
        {
            "name": "stats",
            "baseName": "stats",
            "type": "PerformanceAdvisorOpStatsView",
            "format": ""
        }
    ];
    return PerformanceAdvisorOperationView;
}());
exports.PerformanceAdvisorOperationView = PerformanceAdvisorOperationView;
//# sourceMappingURL=PerformanceAdvisorOperationView.js.map

/***/ }),

/***/ 34963:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PeriodicCpsSnapshotSource = void 0;
var PeriodicCpsSnapshotSource = (function () {
    function PeriodicCpsSnapshotSource() {
    }
    PeriodicCpsSnapshotSource.getAttributeTypeMap = function () {
        return PeriodicCpsSnapshotSource.attributeTypeMap;
    };
    PeriodicCpsSnapshotSource.discriminator = undefined;
    PeriodicCpsSnapshotSource.attributeTypeMap = [
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "collectionName",
            "baseName": "collectionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "databaseName",
            "baseName": "databaseName",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "policyItemId",
            "baseName": "policyItemId",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return PeriodicCpsSnapshotSource;
}());
exports.PeriodicCpsSnapshotSource = PeriodicCpsSnapshotSource;
//# sourceMappingURL=PeriodicCpsSnapshotSource.js.map

/***/ }),

/***/ 10259:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PipelineRunStats = void 0;
var PipelineRunStats = (function () {
    function PipelineRunStats() {
    }
    PipelineRunStats.getAttributeTypeMap = function () {
        return PipelineRunStats.attributeTypeMap;
    };
    PipelineRunStats.discriminator = undefined;
    PipelineRunStats.attributeTypeMap = [
        {
            "name": "bytesExported",
            "baseName": "bytesExported",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "numDocs",
            "baseName": "numDocs",
            "type": "number",
            "format": "int64"
        }
    ];
    return PipelineRunStats;
}());
exports.PipelineRunStats = PipelineRunStats;
//# sourceMappingURL=PipelineRunStats.js.map

/***/ }),

/***/ 70924:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PrivateIPModeView = void 0;
var PrivateIPModeView = (function () {
    function PrivateIPModeView() {
    }
    PrivateIPModeView.getAttributeTypeMap = function () {
        return PrivateIPModeView.attributeTypeMap;
    };
    PrivateIPModeView.discriminator = undefined;
    PrivateIPModeView.attributeTypeMap = [
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        }
    ];
    return PrivateIPModeView;
}());
exports.PrivateIPModeView = PrivateIPModeView;
//# sourceMappingURL=PrivateIPModeView.js.map

/***/ }),

/***/ 62273:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PrivateNetworkEndpointIdEntry = void 0;
var PrivateNetworkEndpointIdEntry = (function () {
    function PrivateNetworkEndpointIdEntry() {
    }
    PrivateNetworkEndpointIdEntry.getAttributeTypeMap = function () {
        return PrivateNetworkEndpointIdEntry.attributeTypeMap;
    };
    PrivateNetworkEndpointIdEntry.discriminator = undefined;
    PrivateNetworkEndpointIdEntry.attributeTypeMap = [
        {
            "name": "comment",
            "baseName": "comment",
            "type": "string",
            "format": ""
        },
        {
            "name": "endpointId",
            "baseName": "endpointId",
            "type": "string",
            "format": ""
        },
        {
            "name": "provider",
            "baseName": "provider",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return PrivateNetworkEndpointIdEntry;
}());
exports.PrivateNetworkEndpointIdEntry = PrivateNetworkEndpointIdEntry;
//# sourceMappingURL=PrivateNetworkEndpointIdEntry.js.map

/***/ }),

/***/ 20348:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProjectSettingItemView = void 0;
var ProjectSettingItemView = (function () {
    function ProjectSettingItemView() {
    }
    ProjectSettingItemView.getAttributeTypeMap = function () {
        return ProjectSettingItemView.attributeTypeMap;
    };
    ProjectSettingItemView.discriminator = undefined;
    ProjectSettingItemView.attributeTypeMap = [
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        }
    ];
    return ProjectSettingItemView;
}());
exports.ProjectSettingItemView = ProjectSettingItemView;
//# sourceMappingURL=ProjectSettingItemView.js.map

/***/ }),

/***/ 36953:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProviderRegions = void 0;
var ProviderRegions = (function () {
    function ProviderRegions() {
    }
    ProviderRegions.getAttributeTypeMap = function () {
        return ProviderRegions.attributeTypeMap;
    };
    ProviderRegions.discriminator = undefined;
    ProviderRegions.attributeTypeMap = [
        {
            "name": "instanceSizes",
            "baseName": "instanceSizes",
            "type": "Array<ApiInstanceSizeView>",
            "format": ""
        },
        {
            "name": "provider",
            "baseName": "provider",
            "type": "string",
            "format": ""
        }
    ];
    return ProviderRegions;
}());
exports.ProviderRegions = ProviderRegions;
//# sourceMappingURL=ProviderRegions.js.map

/***/ }),

/***/ 68541:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RPUMetricThresholdView = void 0;
var RPUMetricThresholdView = (function () {
    function RPUMetricThresholdView() {
    }
    RPUMetricThresholdView.getAttributeTypeMap = function () {
        return RPUMetricThresholdView.attributeTypeMap;
    };
    RPUMetricThresholdView.discriminator = undefined;
    RPUMetricThresholdView.attributeTypeMap = [
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string",
            "format": ""
        },
        {
            "name": "mode",
            "baseName": "mode",
            "type": "string",
            "format": ""
        },
        {
            "name": "operator",
            "baseName": "operator",
            "type": "Operator",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "number",
            "format": "double"
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "ServerlessMetricUnits",
            "format": ""
        }
    ];
    return RPUMetricThresholdView;
}());
exports.RPUMetricThresholdView = RPUMetricThresholdView;
//# sourceMappingURL=RPUMetricThresholdView.js.map

/***/ }),

/***/ 84190:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Raw = void 0;
var Raw = (function () {
    function Raw() {
    }
    Raw.getAttributeTypeMap = function () {
        return Raw.attributeTypeMap;
    };
    Raw.discriminator = undefined;
    Raw.attributeTypeMap = [
        {
            "name": "t",
            "baseName": "_t",
            "type": "string",
            "format": ""
        },
        {
            "name": "alertConfigId",
            "baseName": "alertConfigId",
            "type": "string",
            "format": ""
        },
        {
            "name": "cid",
            "baseName": "cid",
            "type": "string",
            "format": ""
        },
        {
            "name": "cre",
            "baseName": "cre",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "gn",
            "baseName": "gn",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgName",
            "baseName": "orgName",
            "type": "string",
            "format": ""
        },
        {
            "name": "severity",
            "baseName": "severity",
            "type": "string",
            "format": ""
        }
    ];
    return Raw;
}());
exports.Raw = Raw;
//# sourceMappingURL=Raw.js.map

/***/ }),

/***/ 47721:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RawMetricAlertView = void 0;
var RawMetricAlertView = (function () {
    function RawMetricAlertView() {
    }
    RawMetricAlertView.getAttributeTypeMap = function () {
        return RawMetricAlertView.attributeTypeMap;
    };
    RawMetricAlertView.discriminator = undefined;
    RawMetricAlertView.attributeTypeMap = [
        {
            "name": "acknowledgedUntil",
            "baseName": "acknowledgedUntil",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "acknowledgementComment",
            "baseName": "acknowledgementComment",
            "type": "string",
            "format": ""
        },
        {
            "name": "acknowledgingUsername",
            "baseName": "acknowledgingUsername",
            "type": "string",
            "format": "email"
        },
        {
            "name": "alertConfigId",
            "baseName": "alertConfigId",
            "type": "string",
            "format": ""
        },
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "currentValue",
            "baseName": "currentValue",
            "type": "RawMetricValueView",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "HostMetricEventTypeViewAlertable",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "hostnameAndPort",
            "baseName": "hostnameAndPort",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "lastNotified",
            "baseName": "lastNotified",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "resolved",
            "baseName": "resolved",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return RawMetricAlertView;
}());
exports.RawMetricAlertView = RawMetricAlertView;
//# sourceMappingURL=RawMetricAlertView.js.map

/***/ }),

/***/ 71482:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RawMetricEventView = void 0;
var RawMetricEventView = (function () {
    function RawMetricEventView() {
    }
    RawMetricEventView.getAttributeTypeMap = function () {
        return RawMetricEventView.attributeTypeMap;
    };
    RawMetricEventView.discriminator = undefined;
    RawMetricEventView.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "currentValue",
            "baseName": "currentValue",
            "type": "RawMetricValueView",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "HostMetricEventTypeView",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "port",
            "baseName": "port",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "shardName",
            "baseName": "shardName",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return RawMetricEventView;
}());
exports.RawMetricEventView = RawMetricEventView;
//# sourceMappingURL=RawMetricEventView.js.map

/***/ }),

/***/ 13910:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RawMetricThresholdView = void 0;
var RawMetricThresholdView = (function () {
    function RawMetricThresholdView() {
    }
    RawMetricThresholdView.getAttributeTypeMap = function () {
        return RawMetricThresholdView.attributeTypeMap;
    };
    RawMetricThresholdView.discriminator = undefined;
    RawMetricThresholdView.attributeTypeMap = [
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string",
            "format": ""
        },
        {
            "name": "mode",
            "baseName": "mode",
            "type": "string",
            "format": ""
        },
        {
            "name": "operator",
            "baseName": "operator",
            "type": "Operator",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "number",
            "format": "double"
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "RawMetricUnits",
            "format": ""
        }
    ];
    return RawMetricThresholdView;
}());
exports.RawMetricThresholdView = RawMetricThresholdView;
//# sourceMappingURL=RawMetricThresholdView.js.map

/***/ }),

/***/ 78989:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=RawMetricUnits.js.map

/***/ }),

/***/ 30495:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RawMetricValueView = void 0;
var RawMetricValueView = (function () {
    function RawMetricValueView() {
    }
    RawMetricValueView.getAttributeTypeMap = function () {
        return RawMetricValueView.attributeTypeMap;
    };
    RawMetricValueView.discriminator = undefined;
    RawMetricValueView.attributeTypeMap = [
        {
            "name": "number",
            "baseName": "number",
            "type": "number",
            "format": "double"
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "RawMetricUnits",
            "format": ""
        }
    ];
    return RawMetricValueView;
}());
exports.RawMetricValueView = RawMetricValueView;
//# sourceMappingURL=RawMetricValueView.js.map

/***/ }),

/***/ 4040:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RegionConfig = void 0;
var RegionConfig = (function () {
    function RegionConfig() {
    }
    RegionConfig.getAttributeTypeMap = function () {
        return RegionConfig.attributeTypeMap;
    };
    RegionConfig.discriminator = "providerName";
    RegionConfig.attributeTypeMap = [
        {
            "name": "analyticsAutoScaling",
            "baseName": "analyticsAutoScaling",
            "type": "AutoScalingV15",
            "format": ""
        },
        {
            "name": "analyticsSpecs",
            "baseName": "analyticsSpecs",
            "type": "DedicatedHardwareSpec",
            "format": ""
        },
        {
            "name": "autoScaling",
            "baseName": "autoScaling",
            "type": "AutoScalingV15",
            "format": ""
        },
        {
            "name": "readOnlySpecs",
            "baseName": "readOnlySpecs",
            "type": "DedicatedHardwareSpec",
            "format": ""
        },
        {
            "name": "electableSpecs",
            "baseName": "electableSpecs",
            "type": "HardwareSpec",
            "format": ""
        },
        {
            "name": "priority",
            "baseName": "priority",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "regionName",
            "baseName": "regionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "backingProviderName",
            "baseName": "backingProviderName",
            "type": "string",
            "format": ""
        }
    ];
    return RegionConfig;
}());
exports.RegionConfig = RegionConfig;
//# sourceMappingURL=RegionConfig.js.map

/***/ }),

/***/ 350:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RegionSpec = void 0;
var RegionSpec = (function () {
    function RegionSpec() {
    }
    RegionSpec.getAttributeTypeMap = function () {
        return RegionSpec.attributeTypeMap;
    };
    RegionSpec.discriminator = undefined;
    RegionSpec.attributeTypeMap = [
        {
            "name": "analyticsNodes",
            "baseName": "analyticsNodes",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "electableNodes",
            "baseName": "electableNodes",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "priority",
            "baseName": "priority",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "readOnlyNodes",
            "baseName": "readOnlyNodes",
            "type": "number",
            "format": "int32"
        }
    ];
    return RegionSpec;
}());
exports.RegionSpec = RegionSpec;
//# sourceMappingURL=RegionSpec.js.map

/***/ }),

/***/ 68426:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReplicaSetAlertConfigViewForNdsGroup = void 0;
var ReplicaSetAlertConfigViewForNdsGroup = (function () {
    function ReplicaSetAlertConfigViewForNdsGroup() {
    }
    ReplicaSetAlertConfigViewForNdsGroup.getAttributeTypeMap = function () {
        return ReplicaSetAlertConfigViewForNdsGroup.attributeTypeMap;
    };
    ReplicaSetAlertConfigViewForNdsGroup.discriminator = undefined;
    ReplicaSetAlertConfigViewForNdsGroup.attributeTypeMap = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "ReplicaSetEventTypeViewForNdsGroupAlertableNoThreshold",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "matchers",
            "baseName": "matchers",
            "type": "Array<ReplicaSetMatcherView>",
            "format": ""
        },
        {
            "name": "notifications",
            "baseName": "notifications",
            "type": "Array<NotificationViewForNdsGroup>",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "ThresholdViewInteger",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return ReplicaSetAlertConfigViewForNdsGroup;
}());
exports.ReplicaSetAlertConfigViewForNdsGroup = ReplicaSetAlertConfigViewForNdsGroup;
//# sourceMappingURL=ReplicaSetAlertConfigViewForNdsGroup.js.map

/***/ }),

/***/ 82985:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReplicaSetAlertViewForNdsGroup = void 0;
var ReplicaSetAlertViewForNdsGroup = (function () {
    function ReplicaSetAlertViewForNdsGroup() {
    }
    ReplicaSetAlertViewForNdsGroup.getAttributeTypeMap = function () {
        return ReplicaSetAlertViewForNdsGroup.attributeTypeMap;
    };
    ReplicaSetAlertViewForNdsGroup.discriminator = undefined;
    ReplicaSetAlertViewForNdsGroup.attributeTypeMap = [
        {
            "name": "acknowledgedUntil",
            "baseName": "acknowledgedUntil",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "acknowledgementComment",
            "baseName": "acknowledgementComment",
            "type": "string",
            "format": ""
        },
        {
            "name": "acknowledgingUsername",
            "baseName": "acknowledgingUsername",
            "type": "string",
            "format": "email"
        },
        {
            "name": "alertConfigId",
            "baseName": "alertConfigId",
            "type": "string",
            "format": ""
        },
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "ReplicaSetEventTypeViewForNdsGroupAlertable",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "hostnameAndPort",
            "baseName": "hostnameAndPort",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "lastNotified",
            "baseName": "lastNotified",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "nonRunningHostIds",
            "baseName": "nonRunningHostIds",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "parentClusterId",
            "baseName": "parentClusterId",
            "type": "string",
            "format": ""
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "resolved",
            "baseName": "resolved",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return ReplicaSetAlertViewForNdsGroup;
}());
exports.ReplicaSetAlertViewForNdsGroup = ReplicaSetAlertViewForNdsGroup;
//# sourceMappingURL=ReplicaSetAlertViewForNdsGroup.js.map

/***/ }),

/***/ 29115:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=ReplicaSetEventTypeViewForNdsGroup.js.map

/***/ }),

/***/ 70909:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=ReplicaSetEventTypeViewForNdsGroupAlertable.js.map

/***/ }),

/***/ 87220:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=ReplicaSetEventTypeViewForNdsGroupAlertableNoThreshold.js.map

/***/ }),

/***/ 7892:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=ReplicaSetEventTypeViewForNdsGroupAlertableWithThreshold.js.map

/***/ }),

/***/ 453:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=ReplicaSetMatcherField.js.map

/***/ }),

/***/ 9636:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReplicaSetMatcherView = void 0;
var ReplicaSetMatcherView = (function () {
    function ReplicaSetMatcherView() {
    }
    ReplicaSetMatcherView.getAttributeTypeMap = function () {
        return ReplicaSetMatcherView.attributeTypeMap;
    };
    ReplicaSetMatcherView.discriminator = undefined;
    ReplicaSetMatcherView.attributeTypeMap = [
        {
            "name": "fieldName",
            "baseName": "fieldName",
            "type": "ReplicaSetMatcherField",
            "format": ""
        },
        {
            "name": "operator",
            "baseName": "operator",
            "type": "string",
            "format": ""
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string",
            "format": ""
        }
    ];
    return ReplicaSetMatcherView;
}());
exports.ReplicaSetMatcherView = ReplicaSetMatcherView;
//# sourceMappingURL=ReplicaSetMatcherView.js.map

/***/ }),

/***/ 39460:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReplicaSetThresholdAlertConfigViewForNdsGroup = void 0;
var ReplicaSetThresholdAlertConfigViewForNdsGroup = (function () {
    function ReplicaSetThresholdAlertConfigViewForNdsGroup() {
    }
    ReplicaSetThresholdAlertConfigViewForNdsGroup.getAttributeTypeMap = function () {
        return ReplicaSetThresholdAlertConfigViewForNdsGroup.attributeTypeMap;
    };
    ReplicaSetThresholdAlertConfigViewForNdsGroup.discriminator = "eventTypeName";
    ReplicaSetThresholdAlertConfigViewForNdsGroup.attributeTypeMap = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "ReplicaSetEventTypeViewForNdsGroupAlertableWithThreshold",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "matchers",
            "baseName": "matchers",
            "type": "Array<ReplicaSetMatcherView>",
            "format": ""
        },
        {
            "name": "notifications",
            "baseName": "notifications",
            "type": "Array<NotificationViewForNdsGroup>",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "GreaterThanRawThresholdView",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return ReplicaSetThresholdAlertConfigViewForNdsGroup;
}());
exports.ReplicaSetThresholdAlertConfigViewForNdsGroup = ReplicaSetThresholdAlertConfigViewForNdsGroup;
//# sourceMappingURL=ReplicaSetThresholdAlertConfigViewForNdsGroup.js.map

/***/ }),

/***/ 31711:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReplicationSpec = void 0;
var ReplicationSpec = (function () {
    function ReplicationSpec() {
    }
    ReplicationSpec.getAttributeTypeMap = function () {
        return ReplicationSpec.attributeTypeMap;
    };
    ReplicationSpec.discriminator = undefined;
    ReplicationSpec.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "numShards",
            "baseName": "numShards",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "regionConfigs",
            "baseName": "regionConfigs",
            "type": "Array<RegionConfig>",
            "format": ""
        },
        {
            "name": "zoneName",
            "baseName": "zoneName",
            "type": "string",
            "format": ""
        }
    ];
    return ReplicationSpec;
}());
exports.ReplicationSpec = ReplicationSpec;
//# sourceMappingURL=ReplicationSpec.js.map

/***/ }),

/***/ 52886:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Role = void 0;
var Role = (function () {
    function Role() {
    }
    Role.getAttributeTypeMap = function () {
        return Role.attributeTypeMap;
    };
    Role.discriminator = undefined;
    Role.attributeTypeMap = [
        {
            "name": "collectionName",
            "baseName": "collectionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "databaseName",
            "baseName": "databaseName",
            "type": "string",
            "format": ""
        },
        {
            "name": "roleName",
            "baseName": "roleName",
            "type": "string",
            "format": ""
        }
    ];
    return Role;
}());
exports.Role = Role;
//# sourceMappingURL=Role.js.map

/***/ }),

/***/ 52359:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RoleAssignment = void 0;
var RoleAssignment = (function () {
    function RoleAssignment() {
    }
    RoleAssignment.getAttributeTypeMap = function () {
        return RoleAssignment.attributeTypeMap;
    };
    RoleAssignment.discriminator = undefined;
    RoleAssignment.attributeTypeMap = [
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "role",
            "baseName": "role",
            "type": "string",
            "format": ""
        }
    ];
    return RoleAssignment;
}());
exports.RoleAssignment = RoleAssignment;
//# sourceMappingURL=RoleAssignment.js.map

/***/ }),

/***/ 86573:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RoleMappingView = void 0;
var RoleMappingView = (function () {
    function RoleMappingView() {
    }
    RoleMappingView.getAttributeTypeMap = function () {
        return RoleMappingView.attributeTypeMap;
    };
    RoleMappingView.discriminator = undefined;
    RoleMappingView.attributeTypeMap = [
        {
            "name": "externalGroupName",
            "baseName": "externalGroupName",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "roleAssignments",
            "baseName": "roleAssignments",
            "type": "Set<RoleAssignment>",
            "format": ""
        }
    ];
    return RoleMappingView;
}());
exports.RoleMappingView = RoleMappingView;
//# sourceMappingURL=RoleMappingView.js.map

/***/ }),

/***/ 57998:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SMSNotificationView = void 0;
var SMSNotificationView = (function () {
    function SMSNotificationView() {
    }
    SMSNotificationView.getAttributeTypeMap = function () {
        return SMSNotificationView.attributeTypeMap;
    };
    SMSNotificationView.discriminator = undefined;
    SMSNotificationView.attributeTypeMap = [
        {
            "name": "delayMin",
            "baseName": "delayMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "intervalMin",
            "baseName": "intervalMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "mobileNumber",
            "baseName": "mobileNumber",
            "type": "string",
            "format": ""
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        }
    ];
    return SMSNotificationView;
}());
exports.SMSNotificationView = SMSNotificationView;
//# sourceMappingURL=SMSNotificationView.js.map

/***/ }),

/***/ 44550:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SampleDatasetStatus = void 0;
var SampleDatasetStatus = (function () {
    function SampleDatasetStatus() {
    }
    SampleDatasetStatus.getAttributeTypeMap = function () {
        return SampleDatasetStatus.attributeTypeMap;
    };
    SampleDatasetStatus.discriminator = undefined;
    SampleDatasetStatus.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "completeDate",
            "baseName": "completeDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "createDate",
            "baseName": "createDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "errorMessage",
            "baseName": "errorMessage",
            "type": "string",
            "format": ""
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string",
            "format": ""
        }
    ];
    return SampleDatasetStatus;
}());
exports.SampleDatasetStatus = SampleDatasetStatus;
//# sourceMappingURL=SampleDatasetStatus.js.map

/***/ }),

/***/ 44499:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerlessAWSTenantEndpoint = void 0;
var ServerlessAWSTenantEndpoint = (function () {
    function ServerlessAWSTenantEndpoint() {
    }
    ServerlessAWSTenantEndpoint.getAttributeTypeMap = function () {
        return ServerlessAWSTenantEndpoint.attributeTypeMap;
    };
    ServerlessAWSTenantEndpoint.discriminator = undefined;
    ServerlessAWSTenantEndpoint.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "cloudProviderEndpointId",
            "baseName": "cloudProviderEndpointId",
            "type": "string",
            "format": ""
        },
        {
            "name": "comment",
            "baseName": "comment",
            "type": "string",
            "format": ""
        },
        {
            "name": "endpointServiceName",
            "baseName": "endpointServiceName",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorMessage",
            "baseName": "errorMessage",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        }
    ];
    return ServerlessAWSTenantEndpoint;
}());
exports.ServerlessAWSTenantEndpoint = ServerlessAWSTenantEndpoint;
//# sourceMappingURL=ServerlessAWSTenantEndpoint.js.map

/***/ }),

/***/ 87088:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerlessAWSTenantEndpointUpdate = void 0;
var ServerlessAWSTenantEndpointUpdate = (function () {
    function ServerlessAWSTenantEndpointUpdate() {
    }
    ServerlessAWSTenantEndpointUpdate.getAttributeTypeMap = function () {
        return ServerlessAWSTenantEndpointUpdate.attributeTypeMap;
    };
    ServerlessAWSTenantEndpointUpdate.discriminator = undefined;
    ServerlessAWSTenantEndpointUpdate.attributeTypeMap = [
        {
            "name": "cloudProviderEndpointId",
            "baseName": "cloudProviderEndpointId",
            "type": "string",
            "format": ""
        },
        {
            "name": "comment",
            "baseName": "comment",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        }
    ];
    return ServerlessAWSTenantEndpointUpdate;
}());
exports.ServerlessAWSTenantEndpointUpdate = ServerlessAWSTenantEndpointUpdate;
//# sourceMappingURL=ServerlessAWSTenantEndpointUpdate.js.map

/***/ }),

/***/ 98234:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerlessAzureTenantEndpoint = void 0;
var ServerlessAzureTenantEndpoint = (function () {
    function ServerlessAzureTenantEndpoint() {
    }
    ServerlessAzureTenantEndpoint.getAttributeTypeMap = function () {
        return ServerlessAzureTenantEndpoint.attributeTypeMap;
    };
    ServerlessAzureTenantEndpoint.discriminator = undefined;
    ServerlessAzureTenantEndpoint.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "cloudProviderEndpointId",
            "baseName": "cloudProviderEndpointId",
            "type": "string",
            "format": ""
        },
        {
            "name": "comment",
            "baseName": "comment",
            "type": "string",
            "format": ""
        },
        {
            "name": "endpointServiceName",
            "baseName": "endpointServiceName",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorMessage",
            "baseName": "errorMessage",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateEndpointIpAddress",
            "baseName": "privateEndpointIpAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateLinkServiceResourceId",
            "baseName": "privateLinkServiceResourceId",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        }
    ];
    return ServerlessAzureTenantEndpoint;
}());
exports.ServerlessAzureTenantEndpoint = ServerlessAzureTenantEndpoint;
//# sourceMappingURL=ServerlessAzureTenantEndpoint.js.map

/***/ }),

/***/ 99692:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerlessAzureTenantEndpointUpdate = void 0;
var ServerlessAzureTenantEndpointUpdate = (function () {
    function ServerlessAzureTenantEndpointUpdate() {
    }
    ServerlessAzureTenantEndpointUpdate.getAttributeTypeMap = function () {
        return ServerlessAzureTenantEndpointUpdate.attributeTypeMap;
    };
    ServerlessAzureTenantEndpointUpdate.discriminator = undefined;
    ServerlessAzureTenantEndpointUpdate.attributeTypeMap = [
        {
            "name": "cloudProviderEndpointId",
            "baseName": "cloudProviderEndpointId",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateEndpointIpAddress",
            "baseName": "privateEndpointIpAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "comment",
            "baseName": "comment",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        }
    ];
    return ServerlessAzureTenantEndpointUpdate;
}());
exports.ServerlessAzureTenantEndpointUpdate = ServerlessAzureTenantEndpointUpdate;
//# sourceMappingURL=ServerlessAzureTenantEndpointUpdate.js.map

/***/ }),

/***/ 6012:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerlessBackupOptions = void 0;
var ServerlessBackupOptions = (function () {
    function ServerlessBackupOptions() {
    }
    ServerlessBackupOptions.getAttributeTypeMap = function () {
        return ServerlessBackupOptions.attributeTypeMap;
    };
    ServerlessBackupOptions.discriminator = undefined;
    ServerlessBackupOptions.attributeTypeMap = [
        {
            "name": "serverlessContinuousBackupEnabled",
            "baseName": "serverlessContinuousBackupEnabled",
            "type": "boolean",
            "format": ""
        }
    ];
    return ServerlessBackupOptions;
}());
exports.ServerlessBackupOptions = ServerlessBackupOptions;
//# sourceMappingURL=ServerlessBackupOptions.js.map

/***/ }),

/***/ 32160:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerlessBackupRestoreJob = void 0;
var ServerlessBackupRestoreJob = (function () {
    function ServerlessBackupRestoreJob() {
    }
    ServerlessBackupRestoreJob.getAttributeTypeMap = function () {
        return ServerlessBackupRestoreJob.attributeTypeMap;
    };
    ServerlessBackupRestoreJob.discriminator = undefined;
    ServerlessBackupRestoreJob.attributeTypeMap = [
        {
            "name": "cancelled",
            "baseName": "cancelled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "deliveryType",
            "baseName": "deliveryType",
            "type": "string",
            "format": ""
        },
        {
            "name": "deliveryUrl",
            "baseName": "deliveryUrl",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "desiredTimestamp",
            "baseName": "desiredTimestamp",
            "type": "ApiBSONTimestampView",
            "format": ""
        },
        {
            "name": "expired",
            "baseName": "expired",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "expiresAt",
            "baseName": "expiresAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "failed",
            "baseName": "failed",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "finishedAt",
            "baseName": "finishedAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "oplogInc",
            "baseName": "oplogInc",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "oplogTs",
            "baseName": "oplogTs",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "pointInTimeUTCSeconds",
            "baseName": "pointInTimeUTCSeconds",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "snapshotId",
            "baseName": "snapshotId",
            "type": "string",
            "format": ""
        },
        {
            "name": "targetClusterName",
            "baseName": "targetClusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "targetGroupId",
            "baseName": "targetGroupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return ServerlessBackupRestoreJob;
}());
exports.ServerlessBackupRestoreJob = ServerlessBackupRestoreJob;
//# sourceMappingURL=ServerlessBackupRestoreJob.js.map

/***/ }),

/***/ 54179:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerlessBackupSnapshot = void 0;
var ServerlessBackupSnapshot = (function () {
    function ServerlessBackupSnapshot() {
    }
    ServerlessBackupSnapshot.getAttributeTypeMap = function () {
        return ServerlessBackupSnapshot.attributeTypeMap;
    };
    ServerlessBackupSnapshot.discriminator = undefined;
    ServerlessBackupSnapshot.attributeTypeMap = [
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "expiresAt",
            "baseName": "expiresAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "frequencyType",
            "baseName": "frequencyType",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "mongodVersion",
            "baseName": "mongodVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "serverlessInstanceName",
            "baseName": "serverlessInstanceName",
            "type": "string",
            "format": ""
        },
        {
            "name": "snapshotType",
            "baseName": "snapshotType",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "storageSizeBytes",
            "baseName": "storageSizeBytes",
            "type": "number",
            "format": "int64"
        }
    ];
    return ServerlessBackupSnapshot;
}());
exports.ServerlessBackupSnapshot = ServerlessBackupSnapshot;
//# sourceMappingURL=ServerlessBackupSnapshot.js.map

/***/ }),

/***/ 33098:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=ServerlessEventTypeViewAlertable.js.map

/***/ }),

/***/ 99616:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerlessInstanceDescription = void 0;
var ServerlessInstanceDescription = (function () {
    function ServerlessInstanceDescription() {
    }
    ServerlessInstanceDescription.getAttributeTypeMap = function () {
        return ServerlessInstanceDescription.attributeTypeMap;
    };
    ServerlessInstanceDescription.discriminator = undefined;
    ServerlessInstanceDescription.attributeTypeMap = [
        {
            "name": "connectionStrings",
            "baseName": "connectionStrings",
            "type": "ServerlessInstanceDescriptionConnectionStrings",
            "format": ""
        },
        {
            "name": "createDate",
            "baseName": "createDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "mongoDBVersion",
            "baseName": "mongoDBVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerSettings",
            "baseName": "providerSettings",
            "type": "ServerlessProviderSettings",
            "format": ""
        },
        {
            "name": "serverlessBackupOptions",
            "baseName": "serverlessBackupOptions",
            "type": "ServerlessBackupOptions",
            "format": ""
        },
        {
            "name": "stateName",
            "baseName": "stateName",
            "type": "string",
            "format": ""
        },
        {
            "name": "terminationProtectionEnabled",
            "baseName": "terminationProtectionEnabled",
            "type": "boolean",
            "format": ""
        }
    ];
    return ServerlessInstanceDescription;
}());
exports.ServerlessInstanceDescription = ServerlessInstanceDescription;
//# sourceMappingURL=ServerlessInstanceDescription.js.map

/***/ }),

/***/ 50019:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerlessInstanceDescriptionConnectionStrings = void 0;
var ServerlessInstanceDescriptionConnectionStrings = (function () {
    function ServerlessInstanceDescriptionConnectionStrings() {
    }
    ServerlessInstanceDescriptionConnectionStrings.getAttributeTypeMap = function () {
        return ServerlessInstanceDescriptionConnectionStrings.attributeTypeMap;
    };
    ServerlessInstanceDescriptionConnectionStrings.discriminator = undefined;
    ServerlessInstanceDescriptionConnectionStrings.attributeTypeMap = [
        {
            "name": "privateEndpoint",
            "baseName": "privateEndpoint",
            "type": "Array<ServerlessInstanceDescriptionConnectionStringsPrivateEndpoint>",
            "format": ""
        },
        {
            "name": "standardSrv",
            "baseName": "standardSrv",
            "type": "string",
            "format": ""
        }
    ];
    return ServerlessInstanceDescriptionConnectionStrings;
}());
exports.ServerlessInstanceDescriptionConnectionStrings = ServerlessInstanceDescriptionConnectionStrings;
//# sourceMappingURL=ServerlessInstanceDescriptionConnectionStrings.js.map

/***/ }),

/***/ 31737:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerlessInstanceDescriptionConnectionStringsPrivateEndpoint = void 0;
var ServerlessInstanceDescriptionConnectionStringsPrivateEndpoint = (function () {
    function ServerlessInstanceDescriptionConnectionStringsPrivateEndpoint() {
    }
    ServerlessInstanceDescriptionConnectionStringsPrivateEndpoint.getAttributeTypeMap = function () {
        return ServerlessInstanceDescriptionConnectionStringsPrivateEndpoint.attributeTypeMap;
    };
    ServerlessInstanceDescriptionConnectionStringsPrivateEndpoint.discriminator = undefined;
    ServerlessInstanceDescriptionConnectionStringsPrivateEndpoint.attributeTypeMap = [
        {
            "name": "endpoints",
            "baseName": "endpoints",
            "type": "Array<ServerlessInstanceDescriptionConnectionStringsPrivateEndpointEndpoint>",
            "format": ""
        },
        {
            "name": "srvConnectionString",
            "baseName": "srvConnectionString",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return ServerlessInstanceDescriptionConnectionStringsPrivateEndpoint;
}());
exports.ServerlessInstanceDescriptionConnectionStringsPrivateEndpoint = ServerlessInstanceDescriptionConnectionStringsPrivateEndpoint;
//# sourceMappingURL=ServerlessInstanceDescriptionConnectionStringsPrivateEndpoint.js.map

/***/ }),

/***/ 27346:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerlessInstanceDescriptionConnectionStringsPrivateEndpointEndpoint = void 0;
var ServerlessInstanceDescriptionConnectionStringsPrivateEndpointEndpoint = (function () {
    function ServerlessInstanceDescriptionConnectionStringsPrivateEndpointEndpoint() {
    }
    ServerlessInstanceDescriptionConnectionStringsPrivateEndpointEndpoint.getAttributeTypeMap = function () {
        return ServerlessInstanceDescriptionConnectionStringsPrivateEndpointEndpoint.attributeTypeMap;
    };
    ServerlessInstanceDescriptionConnectionStringsPrivateEndpointEndpoint.discriminator = undefined;
    ServerlessInstanceDescriptionConnectionStringsPrivateEndpointEndpoint.attributeTypeMap = [
        {
            "name": "endpointId",
            "baseName": "endpointId",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "region",
            "baseName": "region",
            "type": "string",
            "format": ""
        }
    ];
    return ServerlessInstanceDescriptionConnectionStringsPrivateEndpointEndpoint;
}());
exports.ServerlessInstanceDescriptionConnectionStringsPrivateEndpointEndpoint = ServerlessInstanceDescriptionConnectionStringsPrivateEndpointEndpoint;
//# sourceMappingURL=ServerlessInstanceDescriptionConnectionStringsPrivateEndpointEndpoint.js.map

/***/ }),

/***/ 71043:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerlessInstanceDescriptionCreate = void 0;
var ServerlessInstanceDescriptionCreate = (function () {
    function ServerlessInstanceDescriptionCreate() {
    }
    ServerlessInstanceDescriptionCreate.getAttributeTypeMap = function () {
        return ServerlessInstanceDescriptionCreate.attributeTypeMap;
    };
    ServerlessInstanceDescriptionCreate.discriminator = undefined;
    ServerlessInstanceDescriptionCreate.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerSettings",
            "baseName": "providerSettings",
            "type": "ServerlessProviderSettings",
            "format": ""
        },
        {
            "name": "serverlessBackupOptions",
            "baseName": "serverlessBackupOptions",
            "type": "ServerlessBackupOptions",
            "format": ""
        },
        {
            "name": "stateName",
            "baseName": "stateName",
            "type": "string",
            "format": ""
        },
        {
            "name": "terminationProtectionEnabled",
            "baseName": "terminationProtectionEnabled",
            "type": "boolean",
            "format": ""
        }
    ];
    return ServerlessInstanceDescriptionCreate;
}());
exports.ServerlessInstanceDescriptionCreate = ServerlessInstanceDescriptionCreate;
//# sourceMappingURL=ServerlessInstanceDescriptionCreate.js.map

/***/ }),

/***/ 4867:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerlessInstanceDescriptionUpdate = void 0;
var ServerlessInstanceDescriptionUpdate = (function () {
    function ServerlessInstanceDescriptionUpdate() {
    }
    ServerlessInstanceDescriptionUpdate.getAttributeTypeMap = function () {
        return ServerlessInstanceDescriptionUpdate.attributeTypeMap;
    };
    ServerlessInstanceDescriptionUpdate.discriminator = undefined;
    ServerlessInstanceDescriptionUpdate.attributeTypeMap = [
        {
            "name": "serverlessBackupOptions",
            "baseName": "serverlessBackupOptions",
            "type": "ServerlessBackupOptions",
            "format": ""
        },
        {
            "name": "terminationProtectionEnabled",
            "baseName": "terminationProtectionEnabled",
            "type": "boolean",
            "format": ""
        }
    ];
    return ServerlessInstanceDescriptionUpdate;
}());
exports.ServerlessInstanceDescriptionUpdate = ServerlessInstanceDescriptionUpdate;
//# sourceMappingURL=ServerlessInstanceDescriptionUpdate.js.map

/***/ }),

/***/ 18778:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerlessMetricAlertConfigViewForNdsGroup = void 0;
var ServerlessMetricAlertConfigViewForNdsGroup = (function () {
    function ServerlessMetricAlertConfigViewForNdsGroup() {
    }
    ServerlessMetricAlertConfigViewForNdsGroup.getAttributeTypeMap = function () {
        return ServerlessMetricAlertConfigViewForNdsGroup.attributeTypeMap;
    };
    ServerlessMetricAlertConfigViewForNdsGroup.discriminator = undefined;
    ServerlessMetricAlertConfigViewForNdsGroup.attributeTypeMap = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "ServerlessEventTypeViewAlertable",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "matchers",
            "baseName": "matchers",
            "type": "Array<MatcherView>",
            "format": ""
        },
        {
            "name": "metricThreshold",
            "baseName": "metricThreshold",
            "type": "ServerlessMetricThresholdView",
            "format": ""
        },
        {
            "name": "notifications",
            "baseName": "notifications",
            "type": "Array<NotificationViewForNdsGroup>",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return ServerlessMetricAlertConfigViewForNdsGroup;
}());
exports.ServerlessMetricAlertConfigViewForNdsGroup = ServerlessMetricAlertConfigViewForNdsGroup;
//# sourceMappingURL=ServerlessMetricAlertConfigViewForNdsGroup.js.map

/***/ }),

/***/ 19075:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerlessMetricThresholdView = void 0;
var ServerlessMetricThresholdView = (function () {
    function ServerlessMetricThresholdView() {
    }
    ServerlessMetricThresholdView.getAttributeTypeMap = function () {
        return ServerlessMetricThresholdView.attributeTypeMap;
    };
    ServerlessMetricThresholdView.discriminator = "metricName";
    ServerlessMetricThresholdView.attributeTypeMap = [
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string",
            "format": ""
        },
        {
            "name": "mode",
            "baseName": "mode",
            "type": "string",
            "format": ""
        },
        {
            "name": "operator",
            "baseName": "operator",
            "type": "Operator",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "number",
            "format": "double"
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "ServerlessMetricUnits",
            "format": ""
        }
    ];
    return ServerlessMetricThresholdView;
}());
exports.ServerlessMetricThresholdView = ServerlessMetricThresholdView;
//# sourceMappingURL=ServerlessMetricThresholdView.js.map

/***/ }),

/***/ 87412:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=ServerlessMetricUnits.js.map

/***/ }),

/***/ 94921:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerlessProviderSettings = void 0;
var ServerlessProviderSettings = (function () {
    function ServerlessProviderSettings() {
    }
    ServerlessProviderSettings.getAttributeTypeMap = function () {
        return ServerlessProviderSettings.attributeTypeMap;
    };
    ServerlessProviderSettings.discriminator = undefined;
    ServerlessProviderSettings.attributeTypeMap = [
        {
            "name": "backingProviderName",
            "baseName": "backingProviderName",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "regionName",
            "baseName": "regionName",
            "type": "string",
            "format": ""
        }
    ];
    return ServerlessProviderSettings;
}());
exports.ServerlessProviderSettings = ServerlessProviderSettings;
//# sourceMappingURL=ServerlessProviderSettings.js.map

/***/ }),

/***/ 93862:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerlessTenantEndpoint = void 0;
var ServerlessTenantEndpoint = (function () {
    function ServerlessTenantEndpoint() {
    }
    ServerlessTenantEndpoint.getAttributeTypeMap = function () {
        return ServerlessTenantEndpoint.attributeTypeMap;
    };
    ServerlessTenantEndpoint.discriminator = undefined;
    ServerlessTenantEndpoint.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "cloudProviderEndpointId",
            "baseName": "cloudProviderEndpointId",
            "type": "string",
            "format": ""
        },
        {
            "name": "comment",
            "baseName": "comment",
            "type": "string",
            "format": ""
        },
        {
            "name": "endpointServiceName",
            "baseName": "endpointServiceName",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorMessage",
            "baseName": "errorMessage",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateEndpointIpAddress",
            "baseName": "privateEndpointIpAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateLinkServiceResourceId",
            "baseName": "privateLinkServiceResourceId",
            "type": "string",
            "format": ""
        }
    ];
    return ServerlessTenantEndpoint;
}());
exports.ServerlessTenantEndpoint = ServerlessTenantEndpoint;
//# sourceMappingURL=ServerlessTenantEndpoint.js.map

/***/ }),

/***/ 42488:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerlessTenantEndpointCreate = void 0;
var ServerlessTenantEndpointCreate = (function () {
    function ServerlessTenantEndpointCreate() {
    }
    ServerlessTenantEndpointCreate.getAttributeTypeMap = function () {
        return ServerlessTenantEndpointCreate.attributeTypeMap;
    };
    ServerlessTenantEndpointCreate.discriminator = undefined;
    ServerlessTenantEndpointCreate.attributeTypeMap = [
        {
            "name": "comment",
            "baseName": "comment",
            "type": "string",
            "format": ""
        }
    ];
    return ServerlessTenantEndpointCreate;
}());
exports.ServerlessTenantEndpointCreate = ServerlessTenantEndpointCreate;
//# sourceMappingURL=ServerlessTenantEndpointCreate.js.map

/***/ }),

/***/ 22929:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerlessTenantEndpointUpdate = void 0;
var ServerlessTenantEndpointUpdate = (function () {
    function ServerlessTenantEndpointUpdate() {
    }
    ServerlessTenantEndpointUpdate.getAttributeTypeMap = function () {
        return ServerlessTenantEndpointUpdate.attributeTypeMap;
    };
    ServerlessTenantEndpointUpdate.discriminator = "providerName";
    ServerlessTenantEndpointUpdate.attributeTypeMap = [
        {
            "name": "cloudProviderEndpointId",
            "baseName": "cloudProviderEndpointId",
            "type": "string",
            "format": ""
        },
        {
            "name": "comment",
            "baseName": "comment",
            "type": "string",
            "format": ""
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateEndpointIpAddress",
            "baseName": "privateEndpointIpAddress",
            "type": "string",
            "format": ""
        }
    ];
    return ServerlessTenantEndpointUpdate;
}());
exports.ServerlessTenantEndpointUpdate = ServerlessTenantEndpointUpdate;
//# sourceMappingURL=ServerlessTenantEndpointUpdate.js.map

/***/ }),

/***/ 38646:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SlackNotificationView = void 0;
var SlackNotificationView = (function () {
    function SlackNotificationView() {
    }
    SlackNotificationView.getAttributeTypeMap = function () {
        return SlackNotificationView.attributeTypeMap;
    };
    SlackNotificationView.discriminator = undefined;
    SlackNotificationView.attributeTypeMap = [
        {
            "name": "apiToken",
            "baseName": "apiToken",
            "type": "string",
            "format": ""
        },
        {
            "name": "channelName",
            "baseName": "channelName",
            "type": "string",
            "format": ""
        },
        {
            "name": "delayMin",
            "baseName": "delayMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "intervalMin",
            "baseName": "intervalMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        }
    ];
    return SlackNotificationView;
}());
exports.SlackNotificationView = SlackNotificationView;
//# sourceMappingURL=SlackNotificationView.js.map

/***/ }),

/***/ 13842:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SnapshotRetention = void 0;
var SnapshotRetention = (function () {
    function SnapshotRetention() {
    }
    SnapshotRetention.getAttributeTypeMap = function () {
        return SnapshotRetention.attributeTypeMap;
    };
    SnapshotRetention.discriminator = undefined;
    SnapshotRetention.attributeTypeMap = [
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "retentionUnit",
            "baseName": "retentionUnit",
            "type": "string",
            "format": ""
        },
        {
            "name": "retentionValue",
            "baseName": "retentionValue",
            "type": "number",
            "format": "int32"
        }
    ];
    return SnapshotRetention;
}());
exports.SnapshotRetention = SnapshotRetention;
//# sourceMappingURL=SnapshotRetention.js.map

/***/ }),

/***/ 72273:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SnapshotSchedule = void 0;
var SnapshotSchedule = (function () {
    function SnapshotSchedule() {
    }
    SnapshotSchedule.getAttributeTypeMap = function () {
        return SnapshotSchedule.attributeTypeMap;
    };
    SnapshotSchedule.discriminator = undefined;
    SnapshotSchedule.attributeTypeMap = [
        {
            "name": "clusterCheckpointIntervalMin",
            "baseName": "clusterCheckpointIntervalMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "clusterId",
            "baseName": "clusterId",
            "type": "string",
            "format": ""
        },
        {
            "name": "dailySnapshotRetentionDays",
            "baseName": "dailySnapshotRetentionDays",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "monthlySnapshotRetentionMonths",
            "baseName": "monthlySnapshotRetentionMonths",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "pointInTimeWindowHours",
            "baseName": "pointInTimeWindowHours",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "snapshotIntervalHours",
            "baseName": "snapshotIntervalHours",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "snapshotRetentionDays",
            "baseName": "snapshotRetentionDays",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "weeklySnapshotRetentionWeeks",
            "baseName": "weeklySnapshotRetentionWeeks",
            "type": "number",
            "format": "int32"
        }
    ];
    return SnapshotSchedule;
}());
exports.SnapshotSchedule = SnapshotSchedule;
//# sourceMappingURL=SnapshotSchedule.js.map

/***/ }),

/***/ 11861:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Source = void 0;
var Source = (function () {
    function Source() {
    }
    Source.getAttributeTypeMap = function () {
        return Source.attributeTypeMap;
    };
    Source.discriminator = undefined;
    Source.attributeTypeMap = [
        {
            "name": "caCertificatePath",
            "baseName": "caCertificatePath",
            "type": "string",
            "format": ""
        },
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "managedAuthentication",
            "baseName": "managedAuthentication",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string",
            "format": ""
        },
        {
            "name": "ssl",
            "baseName": "ssl",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": ""
        }
    ];
    return Source;
}());
exports.Source = Source;
//# sourceMappingURL=Source.js.map

/***/ }),

/***/ 58790:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SummaryNotificationView = void 0;
var SummaryNotificationView = (function () {
    function SummaryNotificationView() {
    }
    SummaryNotificationView.getAttributeTypeMap = function () {
        return SummaryNotificationView.attributeTypeMap;
    };
    SummaryNotificationView.discriminator = undefined;
    SummaryNotificationView.attributeTypeMap = [
        {
            "name": "delayMin",
            "baseName": "delayMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "emailAddress",
            "baseName": "emailAddress",
            "type": "string",
            "format": "email"
        },
        {
            "name": "intervalMin",
            "baseName": "intervalMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        }
    ];
    return SummaryNotificationView;
}());
exports.SummaryNotificationView = SummaryNotificationView;
//# sourceMappingURL=SummaryNotificationView.js.map

/***/ }),

/***/ 13497:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SynonymSource = void 0;
var SynonymSource = (function () {
    function SynonymSource() {
    }
    SynonymSource.getAttributeTypeMap = function () {
        return SynonymSource.attributeTypeMap;
    };
    SynonymSource.discriminator = undefined;
    SynonymSource.attributeTypeMap = [
        {
            "name": "collection",
            "baseName": "collection",
            "type": "string",
            "format": ""
        }
    ];
    return SynonymSource;
}());
exports.SynonymSource = SynonymSource;
//# sourceMappingURL=SynonymSource.js.map

/***/ }),

/***/ 56073:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TargetOrgRequestView = void 0;
var TargetOrgRequestView = (function () {
    function TargetOrgRequestView() {
    }
    TargetOrgRequestView.getAttributeTypeMap = function () {
        return TargetOrgRequestView.attributeTypeMap;
    };
    TargetOrgRequestView.discriminator = undefined;
    TargetOrgRequestView.attributeTypeMap = [
        {
            "name": "accessListIps",
            "baseName": "accessListIps",
            "type": "Array<string>",
            "format": ""
        }
    ];
    return TargetOrgRequestView;
}());
exports.TargetOrgRequestView = TargetOrgRequestView;
//# sourceMappingURL=TargetOrgRequestView.js.map

/***/ }),

/***/ 74898:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TargetOrgView = void 0;
var TargetOrgView = (function () {
    function TargetOrgView() {
    }
    TargetOrgView.getAttributeTypeMap = function () {
        return TargetOrgView.attributeTypeMap;
    };
    TargetOrgView.discriminator = undefined;
    TargetOrgView.attributeTypeMap = [
        {
            "name": "linkToken",
            "baseName": "linkToken",
            "type": "string",
            "format": ""
        }
    ];
    return TargetOrgView;
}());
exports.TargetOrgView = TargetOrgView;
//# sourceMappingURL=TargetOrgView.js.map

/***/ }),

/***/ 30021:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=TeamEventTypeView.js.map

/***/ }),

/***/ 36786:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=TeamEventTypeViewForNdsGroup.js.map

/***/ }),

/***/ 59703:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TeamEventView = void 0;
var TeamEventView = (function () {
    function TeamEventView() {
    }
    TeamEventView.getAttributeTypeMap = function () {
        return TeamEventView.attributeTypeMap;
    };
    TeamEventView.discriminator = undefined;
    TeamEventView.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "TeamEventTypeView",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "teamId",
            "baseName": "teamId",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return TeamEventView;
}());
exports.TeamEventView = TeamEventView;
//# sourceMappingURL=TeamEventView.js.map

/***/ }),

/***/ 32758:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TeamEventViewForNdsGroup = void 0;
var TeamEventViewForNdsGroup = (function () {
    function TeamEventViewForNdsGroup() {
    }
    TeamEventViewForNdsGroup.getAttributeTypeMap = function () {
        return TeamEventViewForNdsGroup.attributeTypeMap;
    };
    TeamEventViewForNdsGroup.discriminator = undefined;
    TeamEventViewForNdsGroup.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "TeamEventTypeViewForNdsGroup",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "teamId",
            "baseName": "teamId",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return TeamEventViewForNdsGroup;
}());
exports.TeamEventViewForNdsGroup = TeamEventViewForNdsGroup;
//# sourceMappingURL=TeamEventViewForNdsGroup.js.map

/***/ }),

/***/ 63690:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TeamNotificationView = void 0;
var TeamNotificationView = (function () {
    function TeamNotificationView() {
    }
    TeamNotificationView.getAttributeTypeMap = function () {
        return TeamNotificationView.attributeTypeMap;
    };
    TeamNotificationView.discriminator = undefined;
    TeamNotificationView.attributeTypeMap = [
        {
            "name": "delayMin",
            "baseName": "delayMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "emailEnabled",
            "baseName": "emailEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "intervalMin",
            "baseName": "intervalMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "smsEnabled",
            "baseName": "smsEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "teamId",
            "baseName": "teamId",
            "type": "string",
            "format": ""
        },
        {
            "name": "teamName",
            "baseName": "teamName",
            "type": "string",
            "format": ""
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        }
    ];
    return TeamNotificationView;
}());
exports.TeamNotificationView = TeamNotificationView;
//# sourceMappingURL=TeamNotificationView.js.map

/***/ }),

/***/ 49179:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TenantHardwareSpec = void 0;
var TenantHardwareSpec = (function () {
    function TenantHardwareSpec() {
    }
    TenantHardwareSpec.getAttributeTypeMap = function () {
        return TenantHardwareSpec.attributeTypeMap;
    };
    TenantHardwareSpec.discriminator = undefined;
    TenantHardwareSpec.attributeTypeMap = [
        {
            "name": "instanceSize",
            "baseName": "instanceSize",
            "type": "string",
            "format": ""
        }
    ];
    return TenantHardwareSpec;
}());
exports.TenantHardwareSpec = TenantHardwareSpec;
//# sourceMappingURL=TenantHardwareSpec.js.map

/***/ }),

/***/ 26473:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TenantRegionConfig = void 0;
var TenantRegionConfig = (function () {
    function TenantRegionConfig() {
    }
    TenantRegionConfig.getAttributeTypeMap = function () {
        return TenantRegionConfig.attributeTypeMap;
    };
    TenantRegionConfig.discriminator = undefined;
    TenantRegionConfig.attributeTypeMap = [
        {
            "name": "backingProviderName",
            "baseName": "backingProviderName",
            "type": "string",
            "format": ""
        },
        {
            "name": "electableSpecs",
            "baseName": "electableSpecs",
            "type": "HardwareSpec",
            "format": ""
        },
        {
            "name": "priority",
            "baseName": "priority",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "providerName",
            "baseName": "providerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "regionName",
            "baseName": "regionName",
            "type": "string",
            "format": ""
        }
    ];
    return TenantRegionConfig;
}());
exports.TenantRegionConfig = TenantRegionConfig;
//# sourceMappingURL=TenantRegionConfig.js.map

/***/ }),

/***/ 72618:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TenantRestore = void 0;
var TenantRestore = (function () {
    function TenantRestore() {
    }
    TenantRestore.getAttributeTypeMap = function () {
        return TenantRestore.attributeTypeMap;
    };
    TenantRestore.discriminator = undefined;
    TenantRestore.attributeTypeMap = [
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "deliveryType",
            "baseName": "deliveryType",
            "type": "string",
            "format": ""
        },
        {
            "name": "expirationDate",
            "baseName": "expirationDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "projectId",
            "baseName": "projectId",
            "type": "string",
            "format": ""
        },
        {
            "name": "restoreFinishedDate",
            "baseName": "restoreFinishedDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "restoreScheduledDate",
            "baseName": "restoreScheduledDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "snapshotFinishedDate",
            "baseName": "snapshotFinishedDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "snapshotId",
            "baseName": "snapshotId",
            "type": "string",
            "format": ""
        },
        {
            "name": "snapshotUrl",
            "baseName": "snapshotUrl",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "targetDeploymentItemName",
            "baseName": "targetDeploymentItemName",
            "type": "string",
            "format": ""
        },
        {
            "name": "targetProjectId",
            "baseName": "targetProjectId",
            "type": "string",
            "format": ""
        }
    ];
    return TenantRestore;
}());
exports.TenantRestore = TenantRestore;
//# sourceMappingURL=TenantRestore.js.map

/***/ }),

/***/ 6559:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TenantSnapshot = void 0;
var TenantSnapshot = (function () {
    function TenantSnapshot() {
    }
    TenantSnapshot.getAttributeTypeMap = function () {
        return TenantSnapshot.attributeTypeMap;
    };
    TenantSnapshot.discriminator = undefined;
    TenantSnapshot.attributeTypeMap = [
        {
            "name": "expiration",
            "baseName": "expiration",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "finishTime",
            "baseName": "finishTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "mongoDBVersion",
            "baseName": "mongoDBVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "scheduledTime",
            "baseName": "scheduledTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "startTime",
            "baseName": "startTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        }
    ];
    return TenantSnapshot;
}());
exports.TenantSnapshot = TenantSnapshot;
//# sourceMappingURL=TenantSnapshot.js.map

/***/ }),

/***/ 83361:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ThresholdViewInteger = void 0;
var ThresholdViewInteger = (function () {
    function ThresholdViewInteger() {
    }
    ThresholdViewInteger.getAttributeTypeMap = function () {
        return ThresholdViewInteger.attributeTypeMap;
    };
    ThresholdViewInteger.discriminator = undefined;
    ThresholdViewInteger.attributeTypeMap = [
        {
            "name": "operator",
            "baseName": "operator",
            "type": "Operator",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "string",
            "format": ""
        }
    ];
    return ThresholdViewInteger;
}());
exports.ThresholdViewInteger = ThresholdViewInteger;
//# sourceMappingURL=ThresholdViewInteger.js.map

/***/ }),

/***/ 2537:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TimeMetricAlertView = void 0;
var TimeMetricAlertView = (function () {
    function TimeMetricAlertView() {
    }
    TimeMetricAlertView.getAttributeTypeMap = function () {
        return TimeMetricAlertView.attributeTypeMap;
    };
    TimeMetricAlertView.discriminator = undefined;
    TimeMetricAlertView.attributeTypeMap = [
        {
            "name": "acknowledgedUntil",
            "baseName": "acknowledgedUntil",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "acknowledgementComment",
            "baseName": "acknowledgementComment",
            "type": "string",
            "format": ""
        },
        {
            "name": "acknowledgingUsername",
            "baseName": "acknowledgingUsername",
            "type": "string",
            "format": "email"
        },
        {
            "name": "alertConfigId",
            "baseName": "alertConfigId",
            "type": "string",
            "format": ""
        },
        {
            "name": "clusterName",
            "baseName": "clusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "currentValue",
            "baseName": "currentValue",
            "type": "TimeMetricValueView",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "HostMetricEventTypeViewAlertable",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "hostnameAndPort",
            "baseName": "hostnameAndPort",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "lastNotified",
            "baseName": "lastNotified",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "resolved",
            "baseName": "resolved",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return TimeMetricAlertView;
}());
exports.TimeMetricAlertView = TimeMetricAlertView;
//# sourceMappingURL=TimeMetricAlertView.js.map

/***/ }),

/***/ 63955:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TimeMetricEventView = void 0;
var TimeMetricEventView = (function () {
    function TimeMetricEventView() {
    }
    TimeMetricEventView.getAttributeTypeMap = function () {
        return TimeMetricEventView.attributeTypeMap;
    };
    TimeMetricEventView.discriminator = undefined;
    TimeMetricEventView.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "currentValue",
            "baseName": "currentValue",
            "type": "TimeMetricValueView",
            "format": ""
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "HostMetricEventTypeView",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "port",
            "baseName": "port",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "shardName",
            "baseName": "shardName",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return TimeMetricEventView;
}());
exports.TimeMetricEventView = TimeMetricEventView;
//# sourceMappingURL=TimeMetricEventView.js.map

/***/ }),

/***/ 64138:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TimeMetricThresholdView = void 0;
var TimeMetricThresholdView = (function () {
    function TimeMetricThresholdView() {
    }
    TimeMetricThresholdView.getAttributeTypeMap = function () {
        return TimeMetricThresholdView.attributeTypeMap;
    };
    TimeMetricThresholdView.discriminator = undefined;
    TimeMetricThresholdView.attributeTypeMap = [
        {
            "name": "metricName",
            "baseName": "metricName",
            "type": "string",
            "format": ""
        },
        {
            "name": "mode",
            "baseName": "mode",
            "type": "string",
            "format": ""
        },
        {
            "name": "operator",
            "baseName": "operator",
            "type": "Operator",
            "format": ""
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "number",
            "format": "double"
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "TimeMetricUnits",
            "format": ""
        }
    ];
    return TimeMetricThresholdView;
}());
exports.TimeMetricThresholdView = TimeMetricThresholdView;
//# sourceMappingURL=TimeMetricThresholdView.js.map

/***/ }),

/***/ 55893:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=TimeMetricUnits.js.map

/***/ }),

/***/ 47088:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TimeMetricValueView = void 0;
var TimeMetricValueView = (function () {
    function TimeMetricValueView() {
    }
    TimeMetricValueView.getAttributeTypeMap = function () {
        return TimeMetricValueView.attributeTypeMap;
    };
    TimeMetricValueView.discriminator = undefined;
    TimeMetricValueView.attributeTypeMap = [
        {
            "name": "number",
            "baseName": "number",
            "type": "number",
            "format": "double"
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "TimeMetricUnits",
            "format": ""
        }
    ];
    return TimeMetricValueView;
}());
exports.TimeMetricValueView = TimeMetricValueView;
//# sourceMappingURL=TimeMetricValueView.js.map

/***/ }),

/***/ 52644:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ToggleView = void 0;
var ToggleView = (function () {
    function ToggleView() {
    }
    ToggleView.getAttributeTypeMap = function () {
        return ToggleView.attributeTypeMap;
    };
    ToggleView.discriminator = undefined;
    ToggleView.attributeTypeMap = [
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        }
    ];
    return ToggleView;
}());
exports.ToggleView = ToggleView;
//# sourceMappingURL=ToggleView.js.map

/***/ }),

/***/ 56673:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenFilterasciiFolding = void 0;
var TokenFilterasciiFolding = (function () {
    function TokenFilterasciiFolding() {
    }
    TokenFilterasciiFolding.getAttributeTypeMap = function () {
        return TokenFilterasciiFolding.attributeTypeMap;
    };
    TokenFilterasciiFolding.discriminator = undefined;
    TokenFilterasciiFolding.attributeTypeMap = [
        {
            "name": "originalTokens",
            "baseName": "originalTokens",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return TokenFilterasciiFolding;
}());
exports.TokenFilterasciiFolding = TokenFilterasciiFolding;
//# sourceMappingURL=TokenFilterasciiFolding.js.map

/***/ }),

/***/ 80028:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenFilterdaitchMokotoffSoundex = void 0;
var TokenFilterdaitchMokotoffSoundex = (function () {
    function TokenFilterdaitchMokotoffSoundex() {
    }
    TokenFilterdaitchMokotoffSoundex.getAttributeTypeMap = function () {
        return TokenFilterdaitchMokotoffSoundex.attributeTypeMap;
    };
    TokenFilterdaitchMokotoffSoundex.discriminator = undefined;
    TokenFilterdaitchMokotoffSoundex.attributeTypeMap = [
        {
            "name": "originalTokens",
            "baseName": "originalTokens",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return TokenFilterdaitchMokotoffSoundex;
}());
exports.TokenFilterdaitchMokotoffSoundex = TokenFilterdaitchMokotoffSoundex;
//# sourceMappingURL=TokenFilterdaitchMokotoffSoundex.js.map

/***/ }),

/***/ 52943:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenFilteredgeGram = void 0;
var TokenFilteredgeGram = (function () {
    function TokenFilteredgeGram() {
    }
    TokenFilteredgeGram.getAttributeTypeMap = function () {
        return TokenFilteredgeGram.attributeTypeMap;
    };
    TokenFilteredgeGram.discriminator = undefined;
    TokenFilteredgeGram.attributeTypeMap = [
        {
            "name": "maxGram",
            "baseName": "maxGram",
            "type": "number",
            "format": ""
        },
        {
            "name": "minGram",
            "baseName": "minGram",
            "type": "number",
            "format": ""
        },
        {
            "name": "termNotInBounds",
            "baseName": "termNotInBounds",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return TokenFilteredgeGram;
}());
exports.TokenFilteredgeGram = TokenFilteredgeGram;
//# sourceMappingURL=TokenFilteredgeGram.js.map

/***/ }),

/***/ 1709:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenFiltericuFolding = void 0;
var TokenFiltericuFolding = (function () {
    function TokenFiltericuFolding() {
    }
    TokenFiltericuFolding.getAttributeTypeMap = function () {
        return TokenFiltericuFolding.attributeTypeMap;
    };
    TokenFiltericuFolding.discriminator = undefined;
    TokenFiltericuFolding.attributeTypeMap = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return TokenFiltericuFolding;
}());
exports.TokenFiltericuFolding = TokenFiltericuFolding;
//# sourceMappingURL=TokenFiltericuFolding.js.map

/***/ }),

/***/ 77640:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenFiltericuNormalizer = void 0;
var TokenFiltericuNormalizer = (function () {
    function TokenFiltericuNormalizer() {
    }
    TokenFiltericuNormalizer.getAttributeTypeMap = function () {
        return TokenFiltericuNormalizer.attributeTypeMap;
    };
    TokenFiltericuNormalizer.discriminator = undefined;
    TokenFiltericuNormalizer.attributeTypeMap = [
        {
            "name": "normalizationForm",
            "baseName": "normalizationForm",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return TokenFiltericuNormalizer;
}());
exports.TokenFiltericuNormalizer = TokenFiltericuNormalizer;
//# sourceMappingURL=TokenFiltericuNormalizer.js.map

/***/ }),

/***/ 77829:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenFilterlength = void 0;
var TokenFilterlength = (function () {
    function TokenFilterlength() {
    }
    TokenFilterlength.getAttributeTypeMap = function () {
        return TokenFilterlength.attributeTypeMap;
    };
    TokenFilterlength.discriminator = undefined;
    TokenFilterlength.attributeTypeMap = [
        {
            "name": "max",
            "baseName": "max",
            "type": "number",
            "format": ""
        },
        {
            "name": "min",
            "baseName": "min",
            "type": "number",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return TokenFilterlength;
}());
exports.TokenFilterlength = TokenFilterlength;
//# sourceMappingURL=TokenFilterlength.js.map

/***/ }),

/***/ 50482:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenFilterlowercase = void 0;
var TokenFilterlowercase = (function () {
    function TokenFilterlowercase() {
    }
    TokenFilterlowercase.getAttributeTypeMap = function () {
        return TokenFilterlowercase.attributeTypeMap;
    };
    TokenFilterlowercase.discriminator = undefined;
    TokenFilterlowercase.attributeTypeMap = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return TokenFilterlowercase;
}());
exports.TokenFilterlowercase = TokenFilterlowercase;
//# sourceMappingURL=TokenFilterlowercase.js.map

/***/ }),

/***/ 75735:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenFilternGram = void 0;
var TokenFilternGram = (function () {
    function TokenFilternGram() {
    }
    TokenFilternGram.getAttributeTypeMap = function () {
        return TokenFilternGram.attributeTypeMap;
    };
    TokenFilternGram.discriminator = undefined;
    TokenFilternGram.attributeTypeMap = [
        {
            "name": "maxGram",
            "baseName": "maxGram",
            "type": "number",
            "format": ""
        },
        {
            "name": "minGram",
            "baseName": "minGram",
            "type": "number",
            "format": ""
        },
        {
            "name": "termNotInBounds",
            "baseName": "termNotInBounds",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return TokenFilternGram;
}());
exports.TokenFilternGram = TokenFilternGram;
//# sourceMappingURL=TokenFilternGram.js.map

/***/ }),

/***/ 25508:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenFilterregex = void 0;
var TokenFilterregex = (function () {
    function TokenFilterregex() {
    }
    TokenFilterregex.getAttributeTypeMap = function () {
        return TokenFilterregex.attributeTypeMap;
    };
    TokenFilterregex.discriminator = undefined;
    TokenFilterregex.attributeTypeMap = [
        {
            "name": "matches",
            "baseName": "matches",
            "type": "string",
            "format": ""
        },
        {
            "name": "pattern",
            "baseName": "pattern",
            "type": "string",
            "format": ""
        },
        {
            "name": "replacement",
            "baseName": "replacement",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return TokenFilterregex;
}());
exports.TokenFilterregex = TokenFilterregex;
//# sourceMappingURL=TokenFilterregex.js.map

/***/ }),

/***/ 90894:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenFilterreverse = void 0;
var TokenFilterreverse = (function () {
    function TokenFilterreverse() {
    }
    TokenFilterreverse.getAttributeTypeMap = function () {
        return TokenFilterreverse.attributeTypeMap;
    };
    TokenFilterreverse.discriminator = undefined;
    TokenFilterreverse.attributeTypeMap = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return TokenFilterreverse;
}());
exports.TokenFilterreverse = TokenFilterreverse;
//# sourceMappingURL=TokenFilterreverse.js.map

/***/ }),

/***/ 9520:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenFiltershingle = void 0;
var TokenFiltershingle = (function () {
    function TokenFiltershingle() {
    }
    TokenFiltershingle.getAttributeTypeMap = function () {
        return TokenFiltershingle.attributeTypeMap;
    };
    TokenFiltershingle.discriminator = undefined;
    TokenFiltershingle.attributeTypeMap = [
        {
            "name": "maxShingleSize",
            "baseName": "maxShingleSize",
            "type": "number",
            "format": ""
        },
        {
            "name": "minShingleSize",
            "baseName": "minShingleSize",
            "type": "number",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return TokenFiltershingle;
}());
exports.TokenFiltershingle = TokenFiltershingle;
//# sourceMappingURL=TokenFiltershingle.js.map

/***/ }),

/***/ 95716:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenFiltersnowballStemming = void 0;
var TokenFiltersnowballStemming = (function () {
    function TokenFiltersnowballStemming() {
    }
    TokenFiltersnowballStemming.getAttributeTypeMap = function () {
        return TokenFiltersnowballStemming.attributeTypeMap;
    };
    TokenFiltersnowballStemming.discriminator = undefined;
    TokenFiltersnowballStemming.attributeTypeMap = [
        {
            "name": "stemmerName",
            "baseName": "stemmerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return TokenFiltersnowballStemming;
}());
exports.TokenFiltersnowballStemming = TokenFiltersnowballStemming;
//# sourceMappingURL=TokenFiltersnowballStemming.js.map

/***/ }),

/***/ 15773:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenFilterstopword = void 0;
var TokenFilterstopword = (function () {
    function TokenFilterstopword() {
    }
    TokenFilterstopword.getAttributeTypeMap = function () {
        return TokenFilterstopword.attributeTypeMap;
    };
    TokenFilterstopword.discriminator = undefined;
    TokenFilterstopword.attributeTypeMap = [
        {
            "name": "ignoreCase",
            "baseName": "ignoreCase",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "tokens",
            "baseName": "tokens",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return TokenFilterstopword;
}());
exports.TokenFilterstopword = TokenFilterstopword;
//# sourceMappingURL=TokenFilterstopword.js.map

/***/ }),

/***/ 3500:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenFiltertrim = void 0;
var TokenFiltertrim = (function () {
    function TokenFiltertrim() {
    }
    TokenFiltertrim.getAttributeTypeMap = function () {
        return TokenFiltertrim.attributeTypeMap;
    };
    TokenFiltertrim.discriminator = undefined;
    TokenFiltertrim.attributeTypeMap = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return TokenFiltertrim;
}());
exports.TokenFiltertrim = TokenFiltertrim;
//# sourceMappingURL=TokenFiltertrim.js.map

/***/ }),

/***/ 37215:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenizeredgeGram = void 0;
var TokenizeredgeGram = (function () {
    function TokenizeredgeGram() {
    }
    TokenizeredgeGram.getAttributeTypeMap = function () {
        return TokenizeredgeGram.attributeTypeMap;
    };
    TokenizeredgeGram.discriminator = undefined;
    TokenizeredgeGram.attributeTypeMap = [
        {
            "name": "maxGram",
            "baseName": "maxGram",
            "type": "number",
            "format": ""
        },
        {
            "name": "minGram",
            "baseName": "minGram",
            "type": "number",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return TokenizeredgeGram;
}());
exports.TokenizeredgeGram = TokenizeredgeGram;
//# sourceMappingURL=TokenizeredgeGram.js.map

/***/ }),

/***/ 45815:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Tokenizerkeyword = void 0;
var Tokenizerkeyword = (function () {
    function Tokenizerkeyword() {
    }
    Tokenizerkeyword.getAttributeTypeMap = function () {
        return Tokenizerkeyword.attributeTypeMap;
    };
    Tokenizerkeyword.discriminator = undefined;
    Tokenizerkeyword.attributeTypeMap = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return Tokenizerkeyword;
}());
exports.Tokenizerkeyword = Tokenizerkeyword;
//# sourceMappingURL=Tokenizerkeyword.js.map

/***/ }),

/***/ 84324:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenizernGram = void 0;
var TokenizernGram = (function () {
    function TokenizernGram() {
    }
    TokenizernGram.getAttributeTypeMap = function () {
        return TokenizernGram.attributeTypeMap;
    };
    TokenizernGram.discriminator = undefined;
    TokenizernGram.attributeTypeMap = [
        {
            "name": "maxGram",
            "baseName": "maxGram",
            "type": "number",
            "format": ""
        },
        {
            "name": "minGram",
            "baseName": "minGram",
            "type": "number",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return TokenizernGram;
}());
exports.TokenizernGram = TokenizernGram;
//# sourceMappingURL=TokenizernGram.js.map

/***/ }),

/***/ 89100:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenizerregexCaptureGroup = void 0;
var TokenizerregexCaptureGroup = (function () {
    function TokenizerregexCaptureGroup() {
    }
    TokenizerregexCaptureGroup.getAttributeTypeMap = function () {
        return TokenizerregexCaptureGroup.attributeTypeMap;
    };
    TokenizerregexCaptureGroup.discriminator = undefined;
    TokenizerregexCaptureGroup.attributeTypeMap = [
        {
            "name": "group",
            "baseName": "group",
            "type": "number",
            "format": ""
        },
        {
            "name": "pattern",
            "baseName": "pattern",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return TokenizerregexCaptureGroup;
}());
exports.TokenizerregexCaptureGroup = TokenizerregexCaptureGroup;
//# sourceMappingURL=TokenizerregexCaptureGroup.js.map

/***/ }),

/***/ 46072:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenizerregexSplit = void 0;
var TokenizerregexSplit = (function () {
    function TokenizerregexSplit() {
    }
    TokenizerregexSplit.getAttributeTypeMap = function () {
        return TokenizerregexSplit.attributeTypeMap;
    };
    TokenizerregexSplit.discriminator = undefined;
    TokenizerregexSplit.attributeTypeMap = [
        {
            "name": "pattern",
            "baseName": "pattern",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return TokenizerregexSplit;
}());
exports.TokenizerregexSplit = TokenizerregexSplit;
//# sourceMappingURL=TokenizerregexSplit.js.map

/***/ }),

/***/ 60754:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Tokenizerstandard = void 0;
var Tokenizerstandard = (function () {
    function Tokenizerstandard() {
    }
    Tokenizerstandard.getAttributeTypeMap = function () {
        return Tokenizerstandard.attributeTypeMap;
    };
    Tokenizerstandard.discriminator = undefined;
    Tokenizerstandard.attributeTypeMap = [
        {
            "name": "maxTokenLength",
            "baseName": "maxTokenLength",
            "type": "number",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return Tokenizerstandard;
}());
exports.Tokenizerstandard = Tokenizerstandard;
//# sourceMappingURL=Tokenizerstandard.js.map

/***/ }),

/***/ 79147:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenizeruaxUrlEmail = void 0;
var TokenizeruaxUrlEmail = (function () {
    function TokenizeruaxUrlEmail() {
    }
    TokenizeruaxUrlEmail.getAttributeTypeMap = function () {
        return TokenizeruaxUrlEmail.attributeTypeMap;
    };
    TokenizeruaxUrlEmail.discriminator = undefined;
    TokenizeruaxUrlEmail.attributeTypeMap = [
        {
            "name": "maxTokenLength",
            "baseName": "maxTokenLength",
            "type": "number",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return TokenizeruaxUrlEmail;
}());
exports.TokenizeruaxUrlEmail = TokenizeruaxUrlEmail;
//# sourceMappingURL=TokenizeruaxUrlEmail.js.map

/***/ }),

/***/ 5642:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Tokenizerwhitespace = void 0;
var Tokenizerwhitespace = (function () {
    function Tokenizerwhitespace() {
    }
    Tokenizerwhitespace.getAttributeTypeMap = function () {
        return Tokenizerwhitespace.attributeTypeMap;
    };
    Tokenizerwhitespace.discriminator = undefined;
    Tokenizerwhitespace.attributeTypeMap = [
        {
            "name": "maxTokenLength",
            "baseName": "maxTokenLength",
            "type": "number",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return Tokenizerwhitespace;
}());
exports.Tokenizerwhitespace = Tokenizerwhitespace;
//# sourceMappingURL=Tokenizerwhitespace.js.map

/***/ }),

/***/ 40790:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TriggerIngestionRequest = void 0;
var TriggerIngestionRequest = (function () {
    function TriggerIngestionRequest() {
    }
    TriggerIngestionRequest.getAttributeTypeMap = function () {
        return TriggerIngestionRequest.attributeTypeMap;
    };
    TriggerIngestionRequest.discriminator = undefined;
    TriggerIngestionRequest.attributeTypeMap = [
        {
            "name": "snapshotId",
            "baseName": "snapshotId",
            "type": "string",
            "format": ""
        }
    ];
    return TriggerIngestionRequest;
}());
exports.TriggerIngestionRequest = TriggerIngestionRequest;
//# sourceMappingURL=TriggerIngestionRequest.js.map

/***/ }),

/***/ 39570:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UpdateCustomDBRole = void 0;
var UpdateCustomDBRole = (function () {
    function UpdateCustomDBRole() {
    }
    UpdateCustomDBRole.getAttributeTypeMap = function () {
        return UpdateCustomDBRole.attributeTypeMap;
    };
    UpdateCustomDBRole.discriminator = undefined;
    UpdateCustomDBRole.attributeTypeMap = [
        {
            "name": "actions",
            "baseName": "actions",
            "type": "Array<DBAction>",
            "format": ""
        },
        {
            "name": "inheritedRoles",
            "baseName": "inheritedRoles",
            "type": "Set<InheritedRole>",
            "format": ""
        }
    ];
    return UpdateCustomDBRole;
}());
exports.UpdateCustomDBRole = UpdateCustomDBRole;
//# sourceMappingURL=UpdateCustomDBRole.js.map

/***/ }),

/***/ 19091:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UserCert = void 0;
var UserCert = (function () {
    function UserCert() {
    }
    UserCert.getAttributeTypeMap = function () {
        return UserCert.attributeTypeMap;
    };
    UserCert.discriminator = undefined;
    UserCert.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "_id",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "monthsUntilExpiration",
            "baseName": "monthsUntilExpiration",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "notAfter",
            "baseName": "notAfter",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string",
            "format": ""
        }
    ];
    return UserCert;
}());
exports.UserCert = UserCert;
//# sourceMappingURL=UserCert.js.map

/***/ }),

/***/ 78951:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=UserEventTypeViewForNdsGroup.js.map

/***/ }),

/***/ 95171:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=UserEventTypeViewForOrg.js.map

/***/ }),

/***/ 88613:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UserEventViewForNdsGroup = void 0;
var UserEventViewForNdsGroup = (function () {
    function UserEventViewForNdsGroup() {
    }
    UserEventViewForNdsGroup.getAttributeTypeMap = function () {
        return UserEventViewForNdsGroup.attributeTypeMap;
    };
    UserEventViewForNdsGroup.discriminator = undefined;
    UserEventViewForNdsGroup.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "UserEventTypeViewForNdsGroup",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "targetUsername",
            "baseName": "targetUsername",
            "type": "string",
            "format": "email"
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return UserEventViewForNdsGroup;
}());
exports.UserEventViewForNdsGroup = UserEventViewForNdsGroup;
//# sourceMappingURL=UserEventViewForNdsGroup.js.map

/***/ }),

/***/ 46368:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UserEventViewForOrg = void 0;
var UserEventViewForOrg = (function () {
    function UserEventViewForOrg() {
    }
    UserEventViewForOrg.getAttributeTypeMap = function () {
        return UserEventViewForOrg.attributeTypeMap;
    };
    UserEventViewForOrg.discriminator = undefined;
    UserEventViewForOrg.attributeTypeMap = [
        {
            "name": "apiKeyId",
            "baseName": "apiKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "UserEventTypeViewForOrg",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "isGlobalAdmin",
            "baseName": "isGlobalAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicKey",
            "baseName": "publicKey",
            "type": "string",
            "format": "email"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "remoteAddress",
            "baseName": "remoteAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "targetUsername",
            "baseName": "targetUsername",
            "type": "string",
            "format": "email"
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return UserEventViewForOrg;
}());
exports.UserEventViewForOrg = UserEventViewForOrg;
//# sourceMappingURL=UserEventViewForOrg.js.map

/***/ }),

/***/ 45088:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UserNotificationView = void 0;
var UserNotificationView = (function () {
    function UserNotificationView() {
    }
    UserNotificationView.getAttributeTypeMap = function () {
        return UserNotificationView.attributeTypeMap;
    };
    UserNotificationView.discriminator = undefined;
    UserNotificationView.attributeTypeMap = [
        {
            "name": "delayMin",
            "baseName": "delayMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "emailEnabled",
            "baseName": "emailEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "intervalMin",
            "baseName": "intervalMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "smsEnabled",
            "baseName": "smsEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": "email"
        }
    ];
    return UserNotificationView;
}());
exports.UserNotificationView = UserNotificationView;
//# sourceMappingURL=UserNotificationView.js.map

/***/ }),

/***/ 51056:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UserScope = void 0;
var UserScope = (function () {
    function UserScope() {
    }
    UserScope.getAttributeTypeMap = function () {
        return UserScope.attributeTypeMap;
    };
    UserScope.discriminator = undefined;
    UserScope.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return UserScope;
}());
exports.UserScope = UserScope;
//# sourceMappingURL=UserScope.js.map

/***/ }),

/***/ 88283:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UserSecurity = void 0;
var UserSecurity = (function () {
    function UserSecurity() {
    }
    UserSecurity.getAttributeTypeMap = function () {
        return UserSecurity.attributeTypeMap;
    };
    UserSecurity.discriminator = undefined;
    UserSecurity.attributeTypeMap = [
        {
            "name": "customerX509",
            "baseName": "customerX509",
            "type": "CustomerX509",
            "format": ""
        },
        {
            "name": "ldap",
            "baseName": "ldap",
            "type": "NDSLDAP",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        }
    ];
    return UserSecurity;
}());
exports.UserSecurity = UserSecurity;
//# sourceMappingURL=UserSecurity.js.map

/***/ }),

/***/ 73471:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValidationView = void 0;
var ValidationView = (function () {
    function ValidationView() {
    }
    ValidationView.getAttributeTypeMap = function () {
        return ValidationView.attributeTypeMap;
    };
    ValidationView.discriminator = undefined;
    ValidationView.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorMessage",
            "baseName": "errorMessage",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "sourceGroupId",
            "baseName": "sourceGroupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        }
    ];
    return ValidationView;
}());
exports.ValidationView = ValidationView;
//# sourceMappingURL=ValidationView.js.map

/***/ }),

/***/ 94982:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VictorOpsNotificationView = void 0;
var VictorOpsNotificationView = (function () {
    function VictorOpsNotificationView() {
    }
    VictorOpsNotificationView.getAttributeTypeMap = function () {
        return VictorOpsNotificationView.attributeTypeMap;
    };
    VictorOpsNotificationView.discriminator = undefined;
    VictorOpsNotificationView.attributeTypeMap = [
        {
            "name": "delayMin",
            "baseName": "delayMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "intervalMin",
            "baseName": "intervalMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "victorOpsApiKey",
            "baseName": "victorOpsApiKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "victorOpsRoutingKey",
            "baseName": "victorOpsRoutingKey",
            "type": "string",
            "format": ""
        }
    ];
    return VictorOpsNotificationView;
}());
exports.VictorOpsNotificationView = VictorOpsNotificationView;
//# sourceMappingURL=VictorOpsNotificationView.js.map

/***/ }),

/***/ 5000:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebhookNotificationView = void 0;
var WebhookNotificationView = (function () {
    function WebhookNotificationView() {
    }
    WebhookNotificationView.getAttributeTypeMap = function () {
        return WebhookNotificationView.attributeTypeMap;
    };
    WebhookNotificationView.discriminator = undefined;
    WebhookNotificationView.attributeTypeMap = [
        {
            "name": "delayMin",
            "baseName": "delayMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "intervalMin",
            "baseName": "intervalMin",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "typeName",
            "baseName": "typeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "webhookSecret",
            "baseName": "webhookSecret",
            "type": "string",
            "format": ""
        },
        {
            "name": "webhookUrl",
            "baseName": "webhookUrl",
            "type": "string",
            "format": ""
        }
    ];
    return WebhookNotificationView;
}());
exports.WebhookNotificationView = WebhookNotificationView;
//# sourceMappingURL=WebhookNotificationView.js.map

/***/ }),

/***/ 67583:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WeeklyScheduleView = void 0;
var WeeklyScheduleView = (function () {
    function WeeklyScheduleView() {
    }
    WeeklyScheduleView.getAttributeTypeMap = function () {
        return WeeklyScheduleView.attributeTypeMap;
    };
    WeeklyScheduleView.discriminator = undefined;
    WeeklyScheduleView.attributeTypeMap = [
        {
            "name": "dayOfWeek",
            "baseName": "dayOfWeek",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "endHour",
            "baseName": "endHour",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "endMinute",
            "baseName": "endMinute",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "startHour",
            "baseName": "startHour",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "startMinute",
            "baseName": "startMinute",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    ];
    return WeeklyScheduleView;
}());
exports.WeeklyScheduleView = WeeklyScheduleView;
//# sourceMappingURL=WeeklyScheduleView.js.map

/***/ }),

/***/ 25573:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.X509Certificate = void 0;
var X509Certificate = (function () {
    function X509Certificate() {
    }
    X509Certificate.getAttributeTypeMap = function () {
        return X509Certificate.attributeTypeMap;
    };
    X509Certificate.discriminator = undefined;
    X509Certificate.attributeTypeMap = [
        {
            "name": "content",
            "baseName": "content",
            "type": "string",
            "format": ""
        },
        {
            "name": "notAfter",
            "baseName": "notAfter",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "notBefore",
            "baseName": "notBefore",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return X509Certificate;
}());
exports.X509Certificate = X509Certificate;
//# sourceMappingURL=X509Certificate.js.map

/***/ }),

/***/ 21689:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.X509CertificateView = void 0;
var X509CertificateView = (function () {
    function X509CertificateView() {
    }
    X509CertificateView.getAttributeTypeMap = function () {
        return X509CertificateView.attributeTypeMap;
    };
    X509CertificateView.discriminator = undefined;
    X509CertificateView.attributeTypeMap = [
        {
            "name": "notAfter",
            "baseName": "notAfter",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "notBefore",
            "baseName": "notBefore",
            "type": "Date",
            "format": "date-time"
        }
    ];
    return X509CertificateView;
}());
exports.X509CertificateView = X509CertificateView;
//# sourceMappingURL=X509CertificateView.js.map

/***/ }),

/***/ 48732:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ZoneMapping = void 0;
var ZoneMapping = (function () {
    function ZoneMapping() {
    }
    ZoneMapping.getAttributeTypeMap = function () {
        return ZoneMapping.attributeTypeMap;
    };
    ZoneMapping.discriminator = undefined;
    ZoneMapping.attributeTypeMap = [
        {
            "name": "location",
            "baseName": "location",
            "type": "string",
            "format": ""
        },
        {
            "name": "zone",
            "baseName": "zone",
            "type": "string",
            "format": ""
        }
    ];
    return ZoneMapping;
}());
exports.ZoneMapping = ZoneMapping;
//# sourceMappingURL=ZoneMapping.js.map

/***/ }),

/***/ 9309:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__nccwpck_require__(29746), exports);
__exportStar(__nccwpck_require__(48681), exports);
__exportStar(__nccwpck_require__(29236), exports);
__exportStar(__nccwpck_require__(65471), exports);
__exportStar(__nccwpck_require__(96643), exports);
__exportStar(__nccwpck_require__(16282), exports);
__exportStar(__nccwpck_require__(28366), exports);
__exportStar(__nccwpck_require__(94762), exports);
__exportStar(__nccwpck_require__(88198), exports);
__exportStar(__nccwpck_require__(98364), exports);
__exportStar(__nccwpck_require__(94419), exports);
__exportStar(__nccwpck_require__(40980), exports);
__exportStar(__nccwpck_require__(42387), exports);
__exportStar(__nccwpck_require__(77438), exports);
__exportStar(__nccwpck_require__(85042), exports);
__exportStar(__nccwpck_require__(864), exports);
__exportStar(__nccwpck_require__(90102), exports);
__exportStar(__nccwpck_require__(23261), exports);
__exportStar(__nccwpck_require__(31297), exports);
__exportStar(__nccwpck_require__(74164), exports);
__exportStar(__nccwpck_require__(89972), exports);
__exportStar(__nccwpck_require__(70841), exports);
__exportStar(__nccwpck_require__(94832), exports);
__exportStar(__nccwpck_require__(12737), exports);
__exportStar(__nccwpck_require__(13986), exports);
__exportStar(__nccwpck_require__(97674), exports);
__exportStar(__nccwpck_require__(5431), exports);
__exportStar(__nccwpck_require__(15815), exports);
__exportStar(__nccwpck_require__(24691), exports);
__exportStar(__nccwpck_require__(89363), exports);
__exportStar(__nccwpck_require__(68306), exports);
__exportStar(__nccwpck_require__(90071), exports);
__exportStar(__nccwpck_require__(32047), exports);
__exportStar(__nccwpck_require__(39360), exports);
__exportStar(__nccwpck_require__(85511), exports);
__exportStar(__nccwpck_require__(76309), exports);
__exportStar(__nccwpck_require__(95083), exports);
__exportStar(__nccwpck_require__(34027), exports);
__exportStar(__nccwpck_require__(21464), exports);
__exportStar(__nccwpck_require__(38365), exports);
__exportStar(__nccwpck_require__(16946), exports);
__exportStar(__nccwpck_require__(37262), exports);
__exportStar(__nccwpck_require__(15579), exports);
__exportStar(__nccwpck_require__(66888), exports);
__exportStar(__nccwpck_require__(50374), exports);
__exportStar(__nccwpck_require__(30100), exports);
__exportStar(__nccwpck_require__(83615), exports);
__exportStar(__nccwpck_require__(19924), exports);
__exportStar(__nccwpck_require__(37445), exports);
__exportStar(__nccwpck_require__(31954), exports);
__exportStar(__nccwpck_require__(75563), exports);
__exportStar(__nccwpck_require__(8995), exports);
__exportStar(__nccwpck_require__(90811), exports);
__exportStar(__nccwpck_require__(2196), exports);
__exportStar(__nccwpck_require__(86192), exports);
__exportStar(__nccwpck_require__(76345), exports);
__exportStar(__nccwpck_require__(19811), exports);
__exportStar(__nccwpck_require__(3265), exports);
__exportStar(__nccwpck_require__(27030), exports);
__exportStar(__nccwpck_require__(74401), exports);
__exportStar(__nccwpck_require__(8275), exports);
__exportStar(__nccwpck_require__(26270), exports);
__exportStar(__nccwpck_require__(20279), exports);
__exportStar(__nccwpck_require__(4845), exports);
__exportStar(__nccwpck_require__(71561), exports);
__exportStar(__nccwpck_require__(19788), exports);
__exportStar(__nccwpck_require__(37038), exports);
__exportStar(__nccwpck_require__(73813), exports);
__exportStar(__nccwpck_require__(89637), exports);
__exportStar(__nccwpck_require__(36169), exports);
__exportStar(__nccwpck_require__(40241), exports);
__exportStar(__nccwpck_require__(81694), exports);
__exportStar(__nccwpck_require__(37738), exports);
__exportStar(__nccwpck_require__(98127), exports);
__exportStar(__nccwpck_require__(89797), exports);
__exportStar(__nccwpck_require__(73361), exports);
__exportStar(__nccwpck_require__(74811), exports);
__exportStar(__nccwpck_require__(87738), exports);
__exportStar(__nccwpck_require__(77304), exports);
__exportStar(__nccwpck_require__(19082), exports);
__exportStar(__nccwpck_require__(77608), exports);
__exportStar(__nccwpck_require__(36985), exports);
__exportStar(__nccwpck_require__(37126), exports);
__exportStar(__nccwpck_require__(22496), exports);
__exportStar(__nccwpck_require__(74219), exports);
__exportStar(__nccwpck_require__(67733), exports);
__exportStar(__nccwpck_require__(16650), exports);
__exportStar(__nccwpck_require__(50215), exports);
__exportStar(__nccwpck_require__(6876), exports);
__exportStar(__nccwpck_require__(7295), exports);
__exportStar(__nccwpck_require__(51148), exports);
__exportStar(__nccwpck_require__(96478), exports);
__exportStar(__nccwpck_require__(18899), exports);
__exportStar(__nccwpck_require__(23380), exports);
__exportStar(__nccwpck_require__(99963), exports);
__exportStar(__nccwpck_require__(22721), exports);
__exportStar(__nccwpck_require__(17126), exports);
__exportStar(__nccwpck_require__(3198), exports);
__exportStar(__nccwpck_require__(71748), exports);
__exportStar(__nccwpck_require__(69245), exports);
__exportStar(__nccwpck_require__(7794), exports);
__exportStar(__nccwpck_require__(2804), exports);
__exportStar(__nccwpck_require__(45676), exports);
__exportStar(__nccwpck_require__(63243), exports);
__exportStar(__nccwpck_require__(91241), exports);
__exportStar(__nccwpck_require__(98818), exports);
__exportStar(__nccwpck_require__(79436), exports);
__exportStar(__nccwpck_require__(43212), exports);
__exportStar(__nccwpck_require__(17109), exports);
__exportStar(__nccwpck_require__(65180), exports);
__exportStar(__nccwpck_require__(87107), exports);
__exportStar(__nccwpck_require__(33757), exports);
__exportStar(__nccwpck_require__(12468), exports);
__exportStar(__nccwpck_require__(58270), exports);
__exportStar(__nccwpck_require__(76643), exports);
__exportStar(__nccwpck_require__(84994), exports);
__exportStar(__nccwpck_require__(74167), exports);
__exportStar(__nccwpck_require__(6992), exports);
__exportStar(__nccwpck_require__(99115), exports);
__exportStar(__nccwpck_require__(99849), exports);
__exportStar(__nccwpck_require__(73878), exports);
__exportStar(__nccwpck_require__(98996), exports);
__exportStar(__nccwpck_require__(93671), exports);
__exportStar(__nccwpck_require__(79009), exports);
__exportStar(__nccwpck_require__(88122), exports);
__exportStar(__nccwpck_require__(37889), exports);
__exportStar(__nccwpck_require__(8447), exports);
__exportStar(__nccwpck_require__(58704), exports);
__exportStar(__nccwpck_require__(53077), exports);
__exportStar(__nccwpck_require__(80978), exports);
__exportStar(__nccwpck_require__(86338), exports);
__exportStar(__nccwpck_require__(80857), exports);
__exportStar(__nccwpck_require__(50092), exports);
__exportStar(__nccwpck_require__(98952), exports);
__exportStar(__nccwpck_require__(4117), exports);
__exportStar(__nccwpck_require__(54882), exports);
__exportStar(__nccwpck_require__(36519), exports);
__exportStar(__nccwpck_require__(5399), exports);
__exportStar(__nccwpck_require__(43087), exports);
__exportStar(__nccwpck_require__(62930), exports);
__exportStar(__nccwpck_require__(3439), exports);
__exportStar(__nccwpck_require__(83670), exports);
__exportStar(__nccwpck_require__(72849), exports);
__exportStar(__nccwpck_require__(40897), exports);
__exportStar(__nccwpck_require__(49337), exports);
__exportStar(__nccwpck_require__(52853), exports);
__exportStar(__nccwpck_require__(64656), exports);
__exportStar(__nccwpck_require__(93713), exports);
__exportStar(__nccwpck_require__(74525), exports);
__exportStar(__nccwpck_require__(35014), exports);
__exportStar(__nccwpck_require__(17195), exports);
__exportStar(__nccwpck_require__(94564), exports);
__exportStar(__nccwpck_require__(68027), exports);
__exportStar(__nccwpck_require__(78657), exports);
__exportStar(__nccwpck_require__(98564), exports);
__exportStar(__nccwpck_require__(23896), exports);
__exportStar(__nccwpck_require__(76200), exports);
__exportStar(__nccwpck_require__(65872), exports);
__exportStar(__nccwpck_require__(39629), exports);
__exportStar(__nccwpck_require__(31757), exports);
__exportStar(__nccwpck_require__(40209), exports);
__exportStar(__nccwpck_require__(90151), exports);
__exportStar(__nccwpck_require__(14807), exports);
__exportStar(__nccwpck_require__(38768), exports);
__exportStar(__nccwpck_require__(22587), exports);
__exportStar(__nccwpck_require__(7665), exports);
__exportStar(__nccwpck_require__(2188), exports);
__exportStar(__nccwpck_require__(44511), exports);
__exportStar(__nccwpck_require__(48253), exports);
__exportStar(__nccwpck_require__(73257), exports);
__exportStar(__nccwpck_require__(79261), exports);
__exportStar(__nccwpck_require__(87407), exports);
__exportStar(__nccwpck_require__(36021), exports);
__exportStar(__nccwpck_require__(93977), exports);
__exportStar(__nccwpck_require__(56345), exports);
__exportStar(__nccwpck_require__(60556), exports);
__exportStar(__nccwpck_require__(53390), exports);
__exportStar(__nccwpck_require__(84468), exports);
__exportStar(__nccwpck_require__(7632), exports);
__exportStar(__nccwpck_require__(54155), exports);
__exportStar(__nccwpck_require__(71414), exports);
__exportStar(__nccwpck_require__(9389), exports);
__exportStar(__nccwpck_require__(51538), exports);
__exportStar(__nccwpck_require__(81168), exports);
__exportStar(__nccwpck_require__(16936), exports);
__exportStar(__nccwpck_require__(15587), exports);
__exportStar(__nccwpck_require__(89073), exports);
__exportStar(__nccwpck_require__(60686), exports);
__exportStar(__nccwpck_require__(21649), exports);
__exportStar(__nccwpck_require__(65774), exports);
__exportStar(__nccwpck_require__(28733), exports);
__exportStar(__nccwpck_require__(66335), exports);
__exportStar(__nccwpck_require__(34198), exports);
__exportStar(__nccwpck_require__(43184), exports);
__exportStar(__nccwpck_require__(15139), exports);
__exportStar(__nccwpck_require__(55784), exports);
__exportStar(__nccwpck_require__(12241), exports);
__exportStar(__nccwpck_require__(55955), exports);
__exportStar(__nccwpck_require__(98706), exports);
__exportStar(__nccwpck_require__(90644), exports);
__exportStar(__nccwpck_require__(82589), exports);
__exportStar(__nccwpck_require__(99441), exports);
__exportStar(__nccwpck_require__(65290), exports);
__exportStar(__nccwpck_require__(76371), exports);
__exportStar(__nccwpck_require__(77619), exports);
__exportStar(__nccwpck_require__(6667), exports);
__exportStar(__nccwpck_require__(37671), exports);
__exportStar(__nccwpck_require__(29277), exports);
__exportStar(__nccwpck_require__(14557), exports);
__exportStar(__nccwpck_require__(11148), exports);
__exportStar(__nccwpck_require__(24506), exports);
__exportStar(__nccwpck_require__(81131), exports);
__exportStar(__nccwpck_require__(24264), exports);
__exportStar(__nccwpck_require__(38273), exports);
__exportStar(__nccwpck_require__(90868), exports);
__exportStar(__nccwpck_require__(29363), exports);
__exportStar(__nccwpck_require__(45985), exports);
__exportStar(__nccwpck_require__(75383), exports);
__exportStar(__nccwpck_require__(65384), exports);
__exportStar(__nccwpck_require__(61963), exports);
__exportStar(__nccwpck_require__(45503), exports);
__exportStar(__nccwpck_require__(96750), exports);
__exportStar(__nccwpck_require__(77559), exports);
__exportStar(__nccwpck_require__(53820), exports);
__exportStar(__nccwpck_require__(24634), exports);
__exportStar(__nccwpck_require__(88589), exports);
__exportStar(__nccwpck_require__(10010), exports);
__exportStar(__nccwpck_require__(27171), exports);
__exportStar(__nccwpck_require__(91757), exports);
__exportStar(__nccwpck_require__(6227), exports);
__exportStar(__nccwpck_require__(83767), exports);
__exportStar(__nccwpck_require__(25223), exports);
__exportStar(__nccwpck_require__(55464), exports);
__exportStar(__nccwpck_require__(22509), exports);
__exportStar(__nccwpck_require__(55830), exports);
__exportStar(__nccwpck_require__(26449), exports);
__exportStar(__nccwpck_require__(33523), exports);
__exportStar(__nccwpck_require__(40499), exports);
__exportStar(__nccwpck_require__(78548), exports);
__exportStar(__nccwpck_require__(90031), exports);
__exportStar(__nccwpck_require__(90187), exports);
__exportStar(__nccwpck_require__(17250), exports);
__exportStar(__nccwpck_require__(25064), exports);
__exportStar(__nccwpck_require__(40869), exports);
__exportStar(__nccwpck_require__(71856), exports);
__exportStar(__nccwpck_require__(79870), exports);
__exportStar(__nccwpck_require__(2346), exports);
__exportStar(__nccwpck_require__(14877), exports);
__exportStar(__nccwpck_require__(75642), exports);
__exportStar(__nccwpck_require__(26653), exports);
__exportStar(__nccwpck_require__(97120), exports);
__exportStar(__nccwpck_require__(4728), exports);
__exportStar(__nccwpck_require__(25383), exports);
__exportStar(__nccwpck_require__(49682), exports);
__exportStar(__nccwpck_require__(44134), exports);
__exportStar(__nccwpck_require__(87684), exports);
__exportStar(__nccwpck_require__(14994), exports);
__exportStar(__nccwpck_require__(93002), exports);
__exportStar(__nccwpck_require__(89398), exports);
__exportStar(__nccwpck_require__(9256), exports);
__exportStar(__nccwpck_require__(42882), exports);
__exportStar(__nccwpck_require__(70765), exports);
__exportStar(__nccwpck_require__(89400), exports);
__exportStar(__nccwpck_require__(25896), exports);
__exportStar(__nccwpck_require__(22974), exports);
__exportStar(__nccwpck_require__(22500), exports);
__exportStar(__nccwpck_require__(28099), exports);
__exportStar(__nccwpck_require__(49309), exports);
__exportStar(__nccwpck_require__(65426), exports);
__exportStar(__nccwpck_require__(6512), exports);
__exportStar(__nccwpck_require__(78948), exports);
__exportStar(__nccwpck_require__(66506), exports);
__exportStar(__nccwpck_require__(86394), exports);
__exportStar(__nccwpck_require__(45143), exports);
__exportStar(__nccwpck_require__(982), exports);
__exportStar(__nccwpck_require__(2052), exports);
__exportStar(__nccwpck_require__(46486), exports);
__exportStar(__nccwpck_require__(82485), exports);
__exportStar(__nccwpck_require__(89790), exports);
__exportStar(__nccwpck_require__(87101), exports);
__exportStar(__nccwpck_require__(11900), exports);
__exportStar(__nccwpck_require__(3809), exports);
__exportStar(__nccwpck_require__(9449), exports);
__exportStar(__nccwpck_require__(36082), exports);
__exportStar(__nccwpck_require__(96428), exports);
__exportStar(__nccwpck_require__(6917), exports);
__exportStar(__nccwpck_require__(50080), exports);
__exportStar(__nccwpck_require__(16557), exports);
__exportStar(__nccwpck_require__(96310), exports);
__exportStar(__nccwpck_require__(4550), exports);
__exportStar(__nccwpck_require__(53666), exports);
__exportStar(__nccwpck_require__(66106), exports);
__exportStar(__nccwpck_require__(9205), exports);
__exportStar(__nccwpck_require__(97096), exports);
__exportStar(__nccwpck_require__(31898), exports);
__exportStar(__nccwpck_require__(56566), exports);
__exportStar(__nccwpck_require__(94850), exports);
__exportStar(__nccwpck_require__(62633), exports);
__exportStar(__nccwpck_require__(76383), exports);
__exportStar(__nccwpck_require__(7918), exports);
__exportStar(__nccwpck_require__(13873), exports);
__exportStar(__nccwpck_require__(77289), exports);
__exportStar(__nccwpck_require__(81220), exports);
__exportStar(__nccwpck_require__(80573), exports);
__exportStar(__nccwpck_require__(62435), exports);
__exportStar(__nccwpck_require__(43167), exports);
__exportStar(__nccwpck_require__(55034), exports);
__exportStar(__nccwpck_require__(11742), exports);
__exportStar(__nccwpck_require__(17830), exports);
__exportStar(__nccwpck_require__(84700), exports);
__exportStar(__nccwpck_require__(40076), exports);
__exportStar(__nccwpck_require__(38647), exports);
__exportStar(__nccwpck_require__(1260), exports);
__exportStar(__nccwpck_require__(66181), exports);
__exportStar(__nccwpck_require__(15397), exports);
__exportStar(__nccwpck_require__(65240), exports);
__exportStar(__nccwpck_require__(13298), exports);
__exportStar(__nccwpck_require__(63698), exports);
__exportStar(__nccwpck_require__(28145), exports);
__exportStar(__nccwpck_require__(38470), exports);
__exportStar(__nccwpck_require__(39783), exports);
__exportStar(__nccwpck_require__(7223), exports);
__exportStar(__nccwpck_require__(99302), exports);
__exportStar(__nccwpck_require__(30489), exports);
__exportStar(__nccwpck_require__(98195), exports);
__exportStar(__nccwpck_require__(82373), exports);
__exportStar(__nccwpck_require__(89768), exports);
__exportStar(__nccwpck_require__(39700), exports);
__exportStar(__nccwpck_require__(13667), exports);
__exportStar(__nccwpck_require__(66315), exports);
__exportStar(__nccwpck_require__(92876), exports);
__exportStar(__nccwpck_require__(24969), exports);
__exportStar(__nccwpck_require__(60011), exports);
__exportStar(__nccwpck_require__(83063), exports);
__exportStar(__nccwpck_require__(69320), exports);
__exportStar(__nccwpck_require__(21200), exports);
__exportStar(__nccwpck_require__(48667), exports);
__exportStar(__nccwpck_require__(26129), exports);
__exportStar(__nccwpck_require__(70258), exports);
__exportStar(__nccwpck_require__(63550), exports);
__exportStar(__nccwpck_require__(25211), exports);
__exportStar(__nccwpck_require__(72237), exports);
__exportStar(__nccwpck_require__(59466), exports);
__exportStar(__nccwpck_require__(31234), exports);
__exportStar(__nccwpck_require__(95052), exports);
__exportStar(__nccwpck_require__(1362), exports);
__exportStar(__nccwpck_require__(2787), exports);
__exportStar(__nccwpck_require__(6232), exports);
__exportStar(__nccwpck_require__(91565), exports);
__exportStar(__nccwpck_require__(55669), exports);
__exportStar(__nccwpck_require__(40477), exports);
__exportStar(__nccwpck_require__(39724), exports);
__exportStar(__nccwpck_require__(75681), exports);
__exportStar(__nccwpck_require__(47775), exports);
__exportStar(__nccwpck_require__(7470), exports);
__exportStar(__nccwpck_require__(76464), exports);
__exportStar(__nccwpck_require__(46878), exports);
__exportStar(__nccwpck_require__(46327), exports);
__exportStar(__nccwpck_require__(799), exports);
__exportStar(__nccwpck_require__(61046), exports);
__exportStar(__nccwpck_require__(88181), exports);
__exportStar(__nccwpck_require__(58032), exports);
__exportStar(__nccwpck_require__(25811), exports);
__exportStar(__nccwpck_require__(68786), exports);
__exportStar(__nccwpck_require__(64254), exports);
__exportStar(__nccwpck_require__(78443), exports);
__exportStar(__nccwpck_require__(35977), exports);
__exportStar(__nccwpck_require__(66713), exports);
__exportStar(__nccwpck_require__(63812), exports);
__exportStar(__nccwpck_require__(80656), exports);
__exportStar(__nccwpck_require__(79918), exports);
__exportStar(__nccwpck_require__(43074), exports);
__exportStar(__nccwpck_require__(94627), exports);
__exportStar(__nccwpck_require__(84387), exports);
__exportStar(__nccwpck_require__(53108), exports);
__exportStar(__nccwpck_require__(52386), exports);
__exportStar(__nccwpck_require__(77229), exports);
__exportStar(__nccwpck_require__(12611), exports);
__exportStar(__nccwpck_require__(96032), exports);
__exportStar(__nccwpck_require__(39500), exports);
__exportStar(__nccwpck_require__(96779), exports);
__exportStar(__nccwpck_require__(14198), exports);
__exportStar(__nccwpck_require__(99072), exports);
__exportStar(__nccwpck_require__(57737), exports);
__exportStar(__nccwpck_require__(87543), exports);
__exportStar(__nccwpck_require__(45543), exports);
__exportStar(__nccwpck_require__(96979), exports);
__exportStar(__nccwpck_require__(70739), exports);
__exportStar(__nccwpck_require__(28305), exports);
__exportStar(__nccwpck_require__(90186), exports);
__exportStar(__nccwpck_require__(52224), exports);
__exportStar(__nccwpck_require__(17507), exports);
__exportStar(__nccwpck_require__(98279), exports);
__exportStar(__nccwpck_require__(91523), exports);
__exportStar(__nccwpck_require__(64247), exports);
__exportStar(__nccwpck_require__(19845), exports);
__exportStar(__nccwpck_require__(80692), exports);
__exportStar(__nccwpck_require__(82375), exports);
__exportStar(__nccwpck_require__(46464), exports);
__exportStar(__nccwpck_require__(49242), exports);
__exportStar(__nccwpck_require__(38098), exports);
__exportStar(__nccwpck_require__(85997), exports);
__exportStar(__nccwpck_require__(44373), exports);
__exportStar(__nccwpck_require__(9540), exports);
__exportStar(__nccwpck_require__(77325), exports);
__exportStar(__nccwpck_require__(22143), exports);
__exportStar(__nccwpck_require__(27042), exports);
__exportStar(__nccwpck_require__(60047), exports);
__exportStar(__nccwpck_require__(30368), exports);
__exportStar(__nccwpck_require__(15444), exports);
__exportStar(__nccwpck_require__(88748), exports);
__exportStar(__nccwpck_require__(29466), exports);
__exportStar(__nccwpck_require__(9719), exports);
__exportStar(__nccwpck_require__(44632), exports);
__exportStar(__nccwpck_require__(77067), exports);
__exportStar(__nccwpck_require__(72537), exports);
__exportStar(__nccwpck_require__(51042), exports);
__exportStar(__nccwpck_require__(78420), exports);
__exportStar(__nccwpck_require__(65057), exports);
__exportStar(__nccwpck_require__(64078), exports);
__exportStar(__nccwpck_require__(81140), exports);
__exportStar(__nccwpck_require__(93391), exports);
__exportStar(__nccwpck_require__(68283), exports);
__exportStar(__nccwpck_require__(69512), exports);
__exportStar(__nccwpck_require__(83211), exports);
__exportStar(__nccwpck_require__(73031), exports);
__exportStar(__nccwpck_require__(56229), exports);
__exportStar(__nccwpck_require__(56889), exports);
__exportStar(__nccwpck_require__(17546), exports);
__exportStar(__nccwpck_require__(34963), exports);
__exportStar(__nccwpck_require__(10259), exports);
__exportStar(__nccwpck_require__(70924), exports);
__exportStar(__nccwpck_require__(62273), exports);
__exportStar(__nccwpck_require__(20348), exports);
__exportStar(__nccwpck_require__(36953), exports);
__exportStar(__nccwpck_require__(68541), exports);
__exportStar(__nccwpck_require__(84190), exports);
__exportStar(__nccwpck_require__(47721), exports);
__exportStar(__nccwpck_require__(71482), exports);
__exportStar(__nccwpck_require__(13910), exports);
__exportStar(__nccwpck_require__(78989), exports);
__exportStar(__nccwpck_require__(30495), exports);
__exportStar(__nccwpck_require__(4040), exports);
__exportStar(__nccwpck_require__(350), exports);
__exportStar(__nccwpck_require__(68426), exports);
__exportStar(__nccwpck_require__(82985), exports);
__exportStar(__nccwpck_require__(29115), exports);
__exportStar(__nccwpck_require__(70909), exports);
__exportStar(__nccwpck_require__(87220), exports);
__exportStar(__nccwpck_require__(7892), exports);
__exportStar(__nccwpck_require__(453), exports);
__exportStar(__nccwpck_require__(9636), exports);
__exportStar(__nccwpck_require__(39460), exports);
__exportStar(__nccwpck_require__(31711), exports);
__exportStar(__nccwpck_require__(52886), exports);
__exportStar(__nccwpck_require__(52359), exports);
__exportStar(__nccwpck_require__(86573), exports);
__exportStar(__nccwpck_require__(57998), exports);
__exportStar(__nccwpck_require__(44550), exports);
__exportStar(__nccwpck_require__(44499), exports);
__exportStar(__nccwpck_require__(87088), exports);
__exportStar(__nccwpck_require__(98234), exports);
__exportStar(__nccwpck_require__(99692), exports);
__exportStar(__nccwpck_require__(6012), exports);
__exportStar(__nccwpck_require__(32160), exports);
__exportStar(__nccwpck_require__(54179), exports);
__exportStar(__nccwpck_require__(33098), exports);
__exportStar(__nccwpck_require__(99616), exports);
__exportStar(__nccwpck_require__(50019), exports);
__exportStar(__nccwpck_require__(31737), exports);
__exportStar(__nccwpck_require__(27346), exports);
__exportStar(__nccwpck_require__(71043), exports);
__exportStar(__nccwpck_require__(4867), exports);
__exportStar(__nccwpck_require__(18778), exports);
__exportStar(__nccwpck_require__(19075), exports);
__exportStar(__nccwpck_require__(87412), exports);
__exportStar(__nccwpck_require__(94921), exports);
__exportStar(__nccwpck_require__(93862), exports);
__exportStar(__nccwpck_require__(42488), exports);
__exportStar(__nccwpck_require__(22929), exports);
__exportStar(__nccwpck_require__(38646), exports);
__exportStar(__nccwpck_require__(13842), exports);
__exportStar(__nccwpck_require__(72273), exports);
__exportStar(__nccwpck_require__(11861), exports);
__exportStar(__nccwpck_require__(58790), exports);
__exportStar(__nccwpck_require__(13497), exports);
__exportStar(__nccwpck_require__(56073), exports);
__exportStar(__nccwpck_require__(74898), exports);
__exportStar(__nccwpck_require__(30021), exports);
__exportStar(__nccwpck_require__(36786), exports);
__exportStar(__nccwpck_require__(59703), exports);
__exportStar(__nccwpck_require__(32758), exports);
__exportStar(__nccwpck_require__(63690), exports);
__exportStar(__nccwpck_require__(49179), exports);
__exportStar(__nccwpck_require__(26473), exports);
__exportStar(__nccwpck_require__(72618), exports);
__exportStar(__nccwpck_require__(6559), exports);
__exportStar(__nccwpck_require__(83361), exports);
__exportStar(__nccwpck_require__(2537), exports);
__exportStar(__nccwpck_require__(63955), exports);
__exportStar(__nccwpck_require__(64138), exports);
__exportStar(__nccwpck_require__(55893), exports);
__exportStar(__nccwpck_require__(47088), exports);
__exportStar(__nccwpck_require__(52644), exports);
__exportStar(__nccwpck_require__(56673), exports);
__exportStar(__nccwpck_require__(80028), exports);
__exportStar(__nccwpck_require__(52943), exports);
__exportStar(__nccwpck_require__(1709), exports);
__exportStar(__nccwpck_require__(77640), exports);
__exportStar(__nccwpck_require__(77829), exports);
__exportStar(__nccwpck_require__(50482), exports);
__exportStar(__nccwpck_require__(75735), exports);
__exportStar(__nccwpck_require__(25508), exports);
__exportStar(__nccwpck_require__(90894), exports);
__exportStar(__nccwpck_require__(9520), exports);
__exportStar(__nccwpck_require__(95716), exports);
__exportStar(__nccwpck_require__(15773), exports);
__exportStar(__nccwpck_require__(3500), exports);
__exportStar(__nccwpck_require__(37215), exports);
__exportStar(__nccwpck_require__(45815), exports);
__exportStar(__nccwpck_require__(84324), exports);
__exportStar(__nccwpck_require__(89100), exports);
__exportStar(__nccwpck_require__(46072), exports);
__exportStar(__nccwpck_require__(60754), exports);
__exportStar(__nccwpck_require__(79147), exports);
__exportStar(__nccwpck_require__(5642), exports);
__exportStar(__nccwpck_require__(40790), exports);
__exportStar(__nccwpck_require__(39570), exports);
__exportStar(__nccwpck_require__(19091), exports);
__exportStar(__nccwpck_require__(78951), exports);
__exportStar(__nccwpck_require__(95171), exports);
__exportStar(__nccwpck_require__(88613), exports);
__exportStar(__nccwpck_require__(46368), exports);
__exportStar(__nccwpck_require__(45088), exports);
__exportStar(__nccwpck_require__(51056), exports);
__exportStar(__nccwpck_require__(88283), exports);
__exportStar(__nccwpck_require__(73471), exports);
__exportStar(__nccwpck_require__(94982), exports);
__exportStar(__nccwpck_require__(5000), exports);
__exportStar(__nccwpck_require__(67583), exports);
__exportStar(__nccwpck_require__(25573), exports);
__exportStar(__nccwpck_require__(21689), exports);
__exportStar(__nccwpck_require__(48732), exports);
//# sourceMappingURL=all.js.map

/***/ }),

/***/ 78640:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.map = exports.mergeMap = exports.of = exports.from = exports.Observable = void 0;
var Observable = (function () {
    function Observable(promise) {
        this.promise = promise;
    }
    Observable.prototype.toPromise = function () {
        return this.promise;
    };
    Observable.prototype.pipe = function (callback) {
        return new Observable(this.promise.then(callback));
    };
    return Observable;
}());
exports.Observable = Observable;
function from(promise) {
    return new Observable(promise);
}
exports.from = from;
function of(value) {
    return new Observable(Promise.resolve(value));
}
exports.of = of;
function mergeMap(callback) {
    return function (value) { return callback(value).toPromise(); };
}
exports.mergeMap = mergeMap;
function map(callback) {
    return callback;
}
exports.map = map;
//# sourceMappingURL=rxjsStub.js.map

/***/ }),

/***/ 85188:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.servers = exports.server1 = exports.ServerConfiguration = void 0;
var http_1 = __nccwpck_require__(53094);
var ServerConfiguration = (function () {
    function ServerConfiguration(url, variableConfiguration) {
        this.url = url;
        this.variableConfiguration = variableConfiguration;
    }
    ServerConfiguration.prototype.setVariables = function (variableConfiguration) {
        Object.assign(this.variableConfiguration, variableConfiguration);
    };
    ServerConfiguration.prototype.getConfiguration = function () {
        return this.variableConfiguration;
    };
    ServerConfiguration.prototype.getUrl = function () {
        var replacedUrl = this.url;
        for (var key in this.variableConfiguration) {
            var re = new RegExp("{" + key + "}", "g");
            replacedUrl = replacedUrl.replace(re, this.variableConfiguration[key]);
        }
        return replacedUrl;
    };
    ServerConfiguration.prototype.makeRequestContext = function (endpoint, httpMethod) {
        return new http_1.RequestContext(this.getUrl() + endpoint, httpMethod);
    };
    return ServerConfiguration;
}());
exports.ServerConfiguration = ServerConfiguration;
exports.server1 = new ServerConfiguration("https://cloud.mongodb.com", {});
exports.servers = [exports.server1];
//# sourceMappingURL=servers.js.map

/***/ }),

/***/ 32372:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ObservableX509AuthenticationApi = exports.ObservableThirdPartyIntegrationsApi = exports.ObservableTestApi = exports.ObservableTeamsApi = exports.ObservableSharedTierSnapshotsApi = exports.ObservableSharedTierRestoreJobsApi = exports.ObservableServerlessPrivateEndpointsApi = exports.ObservableServerlessInstancesApi = exports.ObservableRootApi = exports.ObservableRollingIndexApi = exports.ObservableProjectsApi = exports.ObservableProjectIPAccessListApi = exports.ObservableProgrammaticAPIKeysApi = exports.ObservablePrivateEndpointServicesApi = exports.ObservablePerformanceAdvisorApi = exports.ObservableOrganizationsApi = exports.ObservableOnlineArchiveApi = exports.ObservableNetworkPeeringApi = exports.ObservableMultiCloudClustersApi = exports.ObservableMonitoringAndLogsApi = exports.ObservableMongoDBCloudUsersApi = exports.ObservableMaintenanceWindowsApi = exports.ObservableLegacyBackupRestoreJobsApi = exports.ObservableLegacyBackupApi = exports.ObservableLDAPConfigurationApi = exports.ObservableInvoicesApi = exports.ObservableGlobalClustersApi = exports.ObservableFederatedAuthenticationApi = exports.ObservableEventsApi = exports.ObservableEncryptionAtRestUsingCustomerKeyManagementApi = exports.ObservableDatabaseUsersApi = exports.ObservableDataLakePipelinesApi = exports.ObservableDataFederationApi = exports.ObservableCustomDatabaseRolesApi = exports.ObservableClustersApi = exports.ObservableClusterOutageSimulationApi = exports.ObservableCloudProviderAccessApi = exports.ObservableCloudMigrationServiceApi = exports.ObservableCloudBackupsApi = exports.ObservableAuditingApi = exports.ObservableAtlasSearchApi = exports.ObservableAlertsApi = exports.ObservableAlertConfigurationsApi = exports.ObservableAccessTrackingApi = exports.ObservableAWSClustersDNSApi = void 0;
var rxjsStub_1 = __nccwpck_require__(78640);
var rxjsStub_2 = __nccwpck_require__(78640);
var AWSClustersDNSApi_1 = __nccwpck_require__(98534);
var ObservableAWSClustersDNSApi = (function () {
    function ObservableAWSClustersDNSApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new AWSClustersDNSApi_1.AWSClustersDNSApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new AWSClustersDNSApi_1.AWSClustersDNSApiResponseProcessor();
    }
    ObservableAWSClustersDNSApi.prototype.getAWSCustomDNS = function (groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getAWSCustomDNS(groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_1 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_1(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_2 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_2(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getAWSCustomDNS(rsp); }));
        }));
    };
    ObservableAWSClustersDNSApi.prototype.toggleAWSCustomDNS = function (groupId, aWSCustomDNSEnabledView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.toggleAWSCustomDNS(groupId, aWSCustomDNSEnabledView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_3 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_3(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_4 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_4(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.toggleAWSCustomDNS(rsp); }));
        }));
    };
    return ObservableAWSClustersDNSApi;
}());
exports.ObservableAWSClustersDNSApi = ObservableAWSClustersDNSApi;
var AccessTrackingApi_1 = __nccwpck_require__(49100);
var ObservableAccessTrackingApi = (function () {
    function ObservableAccessTrackingApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new AccessTrackingApi_1.AccessTrackingApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new AccessTrackingApi_1.AccessTrackingApiResponseProcessor();
    }
    ObservableAccessTrackingApi.prototype.listAccessLogsByClusterName = function (groupId, clusterName, envelope, pretty, authResult, end, ipAddress, nLogs, start, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listAccessLogsByClusterName(groupId, clusterName, envelope, pretty, authResult, end, ipAddress, nLogs, start, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_5 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_5(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_6 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_6(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listAccessLogsByClusterName(rsp); }));
        }));
    };
    ObservableAccessTrackingApi.prototype.listAccessLogsByHostname = function (groupId, hostname, envelope, pretty, authResult, end, ipAddress, nLogs, start, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listAccessLogsByHostname(groupId, hostname, envelope, pretty, authResult, end, ipAddress, nLogs, start, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_7 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_7(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_8 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_8(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listAccessLogsByHostname(rsp); }));
        }));
    };
    return ObservableAccessTrackingApi;
}());
exports.ObservableAccessTrackingApi = ObservableAccessTrackingApi;
var AlertConfigurationsApi_1 = __nccwpck_require__(63864);
var ObservableAlertConfigurationsApi = (function () {
    function ObservableAlertConfigurationsApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new AlertConfigurationsApi_1.AlertConfigurationsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new AlertConfigurationsApi_1.AlertConfigurationsApiResponseProcessor();
    }
    ObservableAlertConfigurationsApi.prototype.createAlertConfiguration = function (groupId, alertConfigViewForNdsGroup, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createAlertConfiguration(groupId, alertConfigViewForNdsGroup, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_9 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_9(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_10 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_10(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createAlertConfiguration(rsp); }));
        }));
    };
    ObservableAlertConfigurationsApi.prototype.deleteAlertConfiguration = function (groupId, alertConfigId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteAlertConfiguration(groupId, alertConfigId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_11 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_11(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_12 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_12(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteAlertConfiguration(rsp); }));
        }));
    };
    ObservableAlertConfigurationsApi.prototype.getAlertConfiguration = function (groupId, alertConfigId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getAlertConfiguration(groupId, alertConfigId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_13 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_13(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_14 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_14(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getAlertConfiguration(rsp); }));
        }));
    };
    ObservableAlertConfigurationsApi.prototype.listAlertConfigurationMatchersFieldNames = function (envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listAlertConfigurationMatchersFieldNames(envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_15 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_15(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_16 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_16(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listAlertConfigurationMatchersFieldNames(rsp); }));
        }));
    };
    ObservableAlertConfigurationsApi.prototype.listAlertConfigurations = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listAlertConfigurations(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_17 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_17(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_18 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_18(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listAlertConfigurations(rsp); }));
        }));
    };
    ObservableAlertConfigurationsApi.prototype.listAlertConfigurationsByAlertId = function (groupId, alertId, envelope, pretty, includeCount, itemsPerPage, pageNum, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listAlertConfigurationsByAlertId(groupId, alertId, envelope, pretty, includeCount, itemsPerPage, pageNum, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_19 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_19(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_20 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_20(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listAlertConfigurationsByAlertId(rsp); }));
        }));
    };
    ObservableAlertConfigurationsApi.prototype.toggleAlertConfiguration = function (groupId, alertConfigId, toggleView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.toggleAlertConfiguration(groupId, alertConfigId, toggleView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_21 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_21(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_22 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_22(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.toggleAlertConfiguration(rsp); }));
        }));
    };
    ObservableAlertConfigurationsApi.prototype.updateAlertConfiguration = function (groupId, alertConfigId, alertConfigViewForNdsGroup, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateAlertConfiguration(groupId, alertConfigId, alertConfigViewForNdsGroup, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_23 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_23(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_24 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_24(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateAlertConfiguration(rsp); }));
        }));
    };
    return ObservableAlertConfigurationsApi;
}());
exports.ObservableAlertConfigurationsApi = ObservableAlertConfigurationsApi;
var AlertsApi_1 = __nccwpck_require__(25156);
var ObservableAlertsApi = (function () {
    function ObservableAlertsApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new AlertsApi_1.AlertsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new AlertsApi_1.AlertsApiResponseProcessor();
    }
    ObservableAlertsApi.prototype.acknowledgeAlert = function (groupId, alertId, alertViewForNdsGroup, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.acknowledgeAlert(groupId, alertId, alertViewForNdsGroup, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_25 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_25(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_26 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_26(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.acknowledgeAlert(rsp); }));
        }));
    };
    ObservableAlertsApi.prototype.getAlert = function (groupId, alertId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getAlert(groupId, alertId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_27 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_27(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_28 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_28(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getAlert(rsp); }));
        }));
    };
    ObservableAlertsApi.prototype.listAlerts = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, status, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listAlerts(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, status, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_29 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_29(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_30 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_30(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listAlerts(rsp); }));
        }));
    };
    ObservableAlertsApi.prototype.listAlertsByAlertConfigurationId = function (groupId, alertConfigId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listAlertsByAlertConfigurationId(groupId, alertConfigId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_31 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_31(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_32 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_32(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listAlertsByAlertConfigurationId(rsp); }));
        }));
    };
    return ObservableAlertsApi;
}());
exports.ObservableAlertsApi = ObservableAlertsApi;
var AtlasSearchApi_1 = __nccwpck_require__(50424);
var ObservableAtlasSearchApi = (function () {
    function ObservableAtlasSearchApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new AtlasSearchApi_1.AtlasSearchApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new AtlasSearchApi_1.AtlasSearchApiResponseProcessor();
    }
    ObservableAtlasSearchApi.prototype.createAtlasSearchIndex = function (groupId, clusterName, fTSIndex, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createAtlasSearchIndex(groupId, clusterName, fTSIndex, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_33 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_33(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_34 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_34(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createAtlasSearchIndex(rsp); }));
        }));
    };
    ObservableAtlasSearchApi.prototype.deleteAtlasSearchIndex = function (groupId, clusterName, indexId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteAtlasSearchIndex(groupId, clusterName, indexId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_35 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_35(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_36 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_36(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteAtlasSearchIndex(rsp); }));
        }));
    };
    ObservableAtlasSearchApi.prototype.getAtlasSearchIndex = function (groupId, clusterName, indexId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getAtlasSearchIndex(groupId, clusterName, indexId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_37 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_37(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_38 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_38(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getAtlasSearchIndex(rsp); }));
        }));
    };
    ObservableAtlasSearchApi.prototype.listAtlasSearchIndexes = function (groupId, clusterName, collectionName, databaseName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listAtlasSearchIndexes(groupId, clusterName, collectionName, databaseName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_39 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_39(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_40 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_40(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listAtlasSearchIndexes(rsp); }));
        }));
    };
    ObservableAtlasSearchApi.prototype.updateAtlasSearchIndex = function (groupId, clusterName, indexId, fTSIndex, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateAtlasSearchIndex(groupId, clusterName, indexId, fTSIndex, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_41 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_41(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_42 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_42(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateAtlasSearchIndex(rsp); }));
        }));
    };
    return ObservableAtlasSearchApi;
}());
exports.ObservableAtlasSearchApi = ObservableAtlasSearchApi;
var AuditingApi_1 = __nccwpck_require__(94658);
var ObservableAuditingApi = (function () {
    function ObservableAuditingApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new AuditingApi_1.AuditingApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new AuditingApi_1.AuditingApiResponseProcessor();
    }
    ObservableAuditingApi.prototype.getAuditingConfiguration = function (groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getAuditingConfiguration(groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_43 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_43(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_44 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_44(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getAuditingConfiguration(rsp); }));
        }));
    };
    ObservableAuditingApi.prototype.updateAuditingConfiguration = function (groupId, auditLog, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateAuditingConfiguration(groupId, auditLog, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_45 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_45(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_46 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_46(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateAuditingConfiguration(rsp); }));
        }));
    };
    return ObservableAuditingApi;
}());
exports.ObservableAuditingApi = ObservableAuditingApi;
var CloudBackupsApi_1 = __nccwpck_require__(98349);
var ObservableCloudBackupsApi = (function () {
    function ObservableCloudBackupsApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new CloudBackupsApi_1.CloudBackupsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new CloudBackupsApi_1.CloudBackupsApiResponseProcessor();
    }
    ObservableCloudBackupsApi.prototype.cancelBackupRestoreJob = function (groupId, clusterName, restoreJobId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.cancelBackupRestoreJob(groupId, clusterName, restoreJobId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_47 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_47(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_48 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_48(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.cancelBackupRestoreJob(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.createBackupExportJob = function (groupId, clusterName, diskBackupExportJobRequest, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createBackupExportJob(groupId, clusterName, diskBackupExportJobRequest, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_49 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_49(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_50 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_50(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createBackupExportJob(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.createBackupRestoreJob = function (groupId, clusterName, diskBackupRestoreJob, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createBackupRestoreJob(groupId, clusterName, diskBackupRestoreJob, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_51 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_51(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_52 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_52(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createBackupRestoreJob(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.createExportBucket = function (groupId, diskBackupSnapshotAWSExportBucket, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createExportBucket(groupId, diskBackupSnapshotAWSExportBucket, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_53 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_53(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_54 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_54(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createExportBucket(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.createServerlessBackupRestoreJob = function (groupId, clusterName, serverlessBackupRestoreJob, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createServerlessBackupRestoreJob(groupId, clusterName, serverlessBackupRestoreJob, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_55 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_55(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_56 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_56(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createServerlessBackupRestoreJob(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.deleteAllBackupSchedules = function (groupId, clusterName, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteAllBackupSchedules(groupId, clusterName, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_57 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_57(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_58 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_58(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteAllBackupSchedules(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.deleteExportBucket = function (groupId, exportBucketId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteExportBucket(groupId, exportBucketId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_59 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_59(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_60 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_60(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteExportBucket(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.deleteReplicaSetBackup = function (groupId, clusterName, snapshotId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteReplicaSetBackup(groupId, clusterName, snapshotId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_61 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_61(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_62 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_62(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteReplicaSetBackup(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.deleteShardedClusterBackup = function (groupId, clusterName, snapshotId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteShardedClusterBackup(groupId, clusterName, snapshotId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_63 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_63(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_64 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_64(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteShardedClusterBackup(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.getBackupExportJob = function (groupId, clusterName, exportId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getBackupExportJob(groupId, clusterName, exportId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_65 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_65(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_66 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_66(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getBackupExportJob(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.getBackupRestoreJob = function (groupId, clusterName, restoreJobId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getBackupRestoreJob(groupId, clusterName, restoreJobId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_67 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_67(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_68 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_68(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getBackupRestoreJob(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.getBackupSchedule = function (groupId, clusterName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getBackupSchedule(groupId, clusterName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_69 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_69(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_70 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_70(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getBackupSchedule(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.getDataProtectionSettings = function (groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getDataProtectionSettings(groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_71 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_71(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_72 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_72(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getDataProtectionSettings(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.getExportBucket = function (groupId, exportBucketId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getExportBucket(groupId, exportBucketId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_73 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_73(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_74 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_74(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getExportBucket(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.getReplicaSetBackup = function (groupId, clusterName, snapshotId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getReplicaSetBackup(groupId, clusterName, snapshotId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_75 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_75(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_76 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_76(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getReplicaSetBackup(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.getServerlessBackup = function (groupId, clusterName, snapshotId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getServerlessBackup(groupId, clusterName, snapshotId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_77 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_77(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_78 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_78(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getServerlessBackup(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.getServerlessBackupRestoreJob = function (groupId, clusterName, restoreJobId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getServerlessBackupRestoreJob(groupId, clusterName, restoreJobId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_79 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_79(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_80 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_80(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getServerlessBackupRestoreJob(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.getShardedClusterBackup = function (groupId, clusterName, snapshotId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getShardedClusterBackup(groupId, clusterName, snapshotId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_81 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_81(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_82 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_82(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getShardedClusterBackup(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.listBackupExportJobs = function (groupId, clusterName, envelope, pretty, includeCount, itemsPerPage, pageNum, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listBackupExportJobs(groupId, clusterName, envelope, pretty, includeCount, itemsPerPage, pageNum, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_83 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_83(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_84 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_84(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listBackupExportJobs(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.listBackupRestoreJobs = function (groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listBackupRestoreJobs(groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_85 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_85(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_86 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_86(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listBackupRestoreJobs(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.listExportBuckets = function (groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listExportBuckets(groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_87 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_87(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_88 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_88(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listExportBuckets(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.listReplicaSetBackups = function (groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listReplicaSetBackups(groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_89 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_89(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_90 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_90(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listReplicaSetBackups(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.listServerlessBackupRestoreJobs = function (groupId, clusterName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listServerlessBackupRestoreJobs(groupId, clusterName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_91 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_91(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_92 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_92(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listServerlessBackupRestoreJobs(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.listServerlessBackups = function (groupId, clusterName, envelope, pretty, includeCount, itemsPerPage, pageNum, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listServerlessBackups(groupId, clusterName, envelope, pretty, includeCount, itemsPerPage, pageNum, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_93 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_93(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_94 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_94(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listServerlessBackups(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.listShardedClusterBackups = function (groupId, clusterName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listShardedClusterBackups(groupId, clusterName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_95 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_95(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_96 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_96(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listShardedClusterBackups(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.takeSnapshot = function (groupId, clusterName, diskBackupOnDemandSnapshotRequest, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.takeSnapshot(groupId, clusterName, diskBackupOnDemandSnapshotRequest, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_97 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_97(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_98 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_98(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.takeSnapshot(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.updateBackupSchedule = function (groupId, clusterName, diskBackupSnapshotSchedule, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateBackupSchedule(groupId, clusterName, diskBackupSnapshotSchedule, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_99 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_99(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_100 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_100(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateBackupSchedule(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.updateDataProtectionSettings = function (groupId, dataProtectionSettings, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateDataProtectionSettings(groupId, dataProtectionSettings, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_101 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_101(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_102 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_102(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateDataProtectionSettings(rsp); }));
        }));
    };
    ObservableCloudBackupsApi.prototype.updateSnapshotRetention = function (groupId, clusterName, snapshotId, snapshotRetention, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateSnapshotRetention(groupId, clusterName, snapshotId, snapshotRetention, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_103 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_103(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_104 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_104(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateSnapshotRetention(rsp); }));
        }));
    };
    return ObservableCloudBackupsApi;
}());
exports.ObservableCloudBackupsApi = ObservableCloudBackupsApi;
var CloudMigrationServiceApi_1 = __nccwpck_require__(63986);
var ObservableCloudMigrationServiceApi = (function () {
    function ObservableCloudMigrationServiceApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new CloudMigrationServiceApi_1.CloudMigrationServiceApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new CloudMigrationServiceApi_1.CloudMigrationServiceApiResponseProcessor();
    }
    ObservableCloudMigrationServiceApi.prototype.createLinkToken = function (orgId, targetOrgRequestView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createLinkToken(orgId, targetOrgRequestView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_105 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_105(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_106 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_106(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createLinkToken(rsp); }));
        }));
    };
    ObservableCloudMigrationServiceApi.prototype.createPushMigration = function (groupId, liveMigrationRequestView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createPushMigration(groupId, liveMigrationRequestView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_107 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_107(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_108 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_108(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createPushMigration(rsp); }));
        }));
    };
    ObservableCloudMigrationServiceApi.prototype.cutoverMigration = function (groupId, liveMigrationId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.cutoverMigration(groupId, liveMigrationId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_109 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_109(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_110 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_110(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.cutoverMigration(rsp); }));
        }));
    };
    ObservableCloudMigrationServiceApi.prototype.deleteLinkToken = function (orgId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteLinkToken(orgId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_111 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_111(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_112 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_112(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteLinkToken(rsp); }));
        }));
    };
    ObservableCloudMigrationServiceApi.prototype.getPushMigration = function (groupId, liveMigrationId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getPushMigration(groupId, liveMigrationId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_113 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_113(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_114 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_114(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getPushMigration(rsp); }));
        }));
    };
    ObservableCloudMigrationServiceApi.prototype.getValidationStatus = function (groupId, validationId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getValidationStatus(groupId, validationId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_115 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_115(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_116 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_116(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getValidationStatus(rsp); }));
        }));
    };
    ObservableCloudMigrationServiceApi.prototype.listSourceProjects = function (orgId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listSourceProjects(orgId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_117 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_117(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_118 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_118(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listSourceProjects(rsp); }));
        }));
    };
    ObservableCloudMigrationServiceApi.prototype.validateMigration = function (groupId, liveMigrationRequestView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.validateMigration(groupId, liveMigrationRequestView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_119 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_119(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_120 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_120(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.validateMigration(rsp); }));
        }));
    };
    return ObservableCloudMigrationServiceApi;
}());
exports.ObservableCloudMigrationServiceApi = ObservableCloudMigrationServiceApi;
var CloudProviderAccessApi_1 = __nccwpck_require__(69833);
var ObservableCloudProviderAccessApi = (function () {
    function ObservableCloudProviderAccessApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new CloudProviderAccessApi_1.CloudProviderAccessApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new CloudProviderAccessApi_1.CloudProviderAccessApiResponseProcessor();
    }
    ObservableCloudProviderAccessApi.prototype.authorizeCloudProviderAccessRole = function (groupId, roleId, cloudProviderAccessRole, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.authorizeCloudProviderAccessRole(groupId, roleId, cloudProviderAccessRole, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_121 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_121(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_122 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_122(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.authorizeCloudProviderAccessRole(rsp); }));
        }));
    };
    ObservableCloudProviderAccessApi.prototype.createCloudProviderAccessRole = function (groupId, cloudProviderAccessRole, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createCloudProviderAccessRole(groupId, cloudProviderAccessRole, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_123 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_123(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_124 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_124(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createCloudProviderAccessRole(rsp); }));
        }));
    };
    ObservableCloudProviderAccessApi.prototype.deauthorizeCloudProviderAccessRole = function (groupId, cloudProvider, roleId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deauthorizeCloudProviderAccessRole(groupId, cloudProvider, roleId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_125 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_125(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_126 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_126(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deauthorizeCloudProviderAccessRole(rsp); }));
        }));
    };
    ObservableCloudProviderAccessApi.prototype.getCloudProviderAccessRole = function (groupId, roleId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getCloudProviderAccessRole(groupId, roleId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_127 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_127(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_128 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_128(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getCloudProviderAccessRole(rsp); }));
        }));
    };
    ObservableCloudProviderAccessApi.prototype.listCloudProviderAccessRoles = function (groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listCloudProviderAccessRoles(groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_129 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_129(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_130 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_130(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listCloudProviderAccessRoles(rsp); }));
        }));
    };
    return ObservableCloudProviderAccessApi;
}());
exports.ObservableCloudProviderAccessApi = ObservableCloudProviderAccessApi;
var ClusterOutageSimulationApi_1 = __nccwpck_require__(60858);
var ObservableClusterOutageSimulationApi = (function () {
    function ObservableClusterOutageSimulationApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new ClusterOutageSimulationApi_1.ClusterOutageSimulationApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new ClusterOutageSimulationApi_1.ClusterOutageSimulationApiResponseProcessor();
    }
    ObservableClusterOutageSimulationApi.prototype.endOutageSimulation = function (groupId, clusterName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.endOutageSimulation(groupId, clusterName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_131 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_131(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_132 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_132(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.endOutageSimulation(rsp); }));
        }));
    };
    ObservableClusterOutageSimulationApi.prototype.getOutageSimulation = function (groupId, clusterName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getOutageSimulation(groupId, clusterName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_133 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_133(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_134 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_134(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getOutageSimulation(rsp); }));
        }));
    };
    ObservableClusterOutageSimulationApi.prototype.startOutageSimulation = function (groupId, clusterName, clusterOutageSimulation, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.startOutageSimulation(groupId, clusterName, clusterOutageSimulation, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_135 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_135(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_136 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_136(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.startOutageSimulation(rsp); }));
        }));
    };
    return ObservableClusterOutageSimulationApi;
}());
exports.ObservableClusterOutageSimulationApi = ObservableClusterOutageSimulationApi;
var ClustersApi_1 = __nccwpck_require__(14886);
var ObservableClustersApi = (function () {
    function ObservableClustersApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new ClustersApi_1.ClustersApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new ClustersApi_1.ClustersApiResponseProcessor();
    }
    ObservableClustersApi.prototype.getClusterAdvancedConfiguration = function (groupId, clusterName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getClusterAdvancedConfiguration(groupId, clusterName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_137 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_137(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_138 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_138(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getClusterAdvancedConfiguration(rsp); }));
        }));
    };
    ObservableClustersApi.prototype.getClusterStatus = function (groupId, clusterName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getClusterStatus(groupId, clusterName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_139 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_139(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_140 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_140(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getClusterStatus(rsp); }));
        }));
    };
    ObservableClustersApi.prototype.getSampleDatasetLoadStatus = function (groupId, sampleDatasetId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getSampleDatasetLoadStatus(groupId, sampleDatasetId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_141 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_141(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_142 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_142(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getSampleDatasetLoadStatus(rsp); }));
        }));
    };
    ObservableClustersApi.prototype.listCloudProviderRegions = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, providers, tier, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listCloudProviderRegions(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, providers, tier, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_143 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_143(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_144 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_144(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listCloudProviderRegions(rsp); }));
        }));
    };
    ObservableClustersApi.prototype.listClustersForAllProjects = function (envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listClustersForAllProjects(envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_145 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_145(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_146 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_146(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listClustersForAllProjects(rsp); }));
        }));
    };
    ObservableClustersApi.prototype.loadSampleDataset = function (groupId, name, sampleDatasetStatus, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.loadSampleDataset(groupId, name, sampleDatasetStatus, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_147 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_147(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_148 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_148(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.loadSampleDataset(rsp); }));
        }));
    };
    ObservableClustersApi.prototype.updateClusterAdvancedConfiguration = function (groupId, clusterName, clusterDescriptionProcessArgs, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateClusterAdvancedConfiguration(groupId, clusterName, clusterDescriptionProcessArgs, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_149 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_149(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_150 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_150(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateClusterAdvancedConfiguration(rsp); }));
        }));
    };
    ObservableClustersApi.prototype.upgradeSharedCluster = function (groupId, legacyClusterDescription, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.upgradeSharedCluster(groupId, legacyClusterDescription, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_151 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_151(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_152 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_152(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.upgradeSharedCluster(rsp); }));
        }));
    };
    ObservableClustersApi.prototype.upgradeSharedClusterToServerless = function (groupId, serverlessInstanceDescription, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.upgradeSharedClusterToServerless(groupId, serverlessInstanceDescription, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_153 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_153(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_154 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_154(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.upgradeSharedClusterToServerless(rsp); }));
        }));
    };
    return ObservableClustersApi;
}());
exports.ObservableClustersApi = ObservableClustersApi;
var CustomDatabaseRolesApi_1 = __nccwpck_require__(73809);
var ObservableCustomDatabaseRolesApi = (function () {
    function ObservableCustomDatabaseRolesApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new CustomDatabaseRolesApi_1.CustomDatabaseRolesApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new CustomDatabaseRolesApi_1.CustomDatabaseRolesApiResponseProcessor();
    }
    ObservableCustomDatabaseRolesApi.prototype.createCustomDatabaseRole = function (groupId, customDBRole, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createCustomDatabaseRole(groupId, customDBRole, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_155 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_155(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_156 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_156(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createCustomDatabaseRole(rsp); }));
        }));
    };
    ObservableCustomDatabaseRolesApi.prototype.deleteCustomDatabaseRole = function (groupId, roleName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteCustomDatabaseRole(groupId, roleName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_157 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_157(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_158 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_158(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteCustomDatabaseRole(rsp); }));
        }));
    };
    ObservableCustomDatabaseRolesApi.prototype.getCustomDatabaseRole = function (groupId, roleName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getCustomDatabaseRole(groupId, roleName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_159 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_159(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_160 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_160(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getCustomDatabaseRole(rsp); }));
        }));
    };
    ObservableCustomDatabaseRolesApi.prototype.listCustomDatabaseRoles = function (groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listCustomDatabaseRoles(groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_161 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_161(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_162 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_162(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listCustomDatabaseRoles(rsp); }));
        }));
    };
    ObservableCustomDatabaseRolesApi.prototype.updateCustomDatabaseRole = function (groupId, roleName, updateCustomDBRole, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateCustomDatabaseRole(groupId, roleName, updateCustomDBRole, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_163 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_163(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_164 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_164(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateCustomDatabaseRole(rsp); }));
        }));
    };
    return ObservableCustomDatabaseRolesApi;
}());
exports.ObservableCustomDatabaseRolesApi = ObservableCustomDatabaseRolesApi;
var DataFederationApi_1 = __nccwpck_require__(21514);
var ObservableDataFederationApi = (function () {
    function ObservableDataFederationApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new DataFederationApi_1.DataFederationApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new DataFederationApi_1.DataFederationApiResponseProcessor();
    }
    ObservableDataFederationApi.prototype.createDataFederationPrivateEndpoint = function (groupId, privateNetworkEndpointIdEntry, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createDataFederationPrivateEndpoint(groupId, privateNetworkEndpointIdEntry, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_165 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_165(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_166 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_166(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createDataFederationPrivateEndpoint(rsp); }));
        }));
    };
    ObservableDataFederationApi.prototype.createFederatedDatabase = function (groupId, dataLakeTenant, envelope, pretty, skipRoleValidation, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createFederatedDatabase(groupId, dataLakeTenant, envelope, pretty, skipRoleValidation, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_167 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_167(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_168 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_168(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createFederatedDatabase(rsp); }));
        }));
    };
    ObservableDataFederationApi.prototype.createOneDataFederationQueryLimit = function (groupId, tenantName, limitName, dataFederationTenantQueryLimit, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createOneDataFederationQueryLimit(groupId, tenantName, limitName, dataFederationTenantQueryLimit, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_169 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_169(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_170 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_170(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createOneDataFederationQueryLimit(rsp); }));
        }));
    };
    ObservableDataFederationApi.prototype.deleteDataFederationPrivateEndpoint = function (groupId, endpointId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteDataFederationPrivateEndpoint(groupId, endpointId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_171 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_171(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_172 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_172(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteDataFederationPrivateEndpoint(rsp); }));
        }));
    };
    ObservableDataFederationApi.prototype.deleteFederatedDatabase = function (groupId, tenantName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteFederatedDatabase(groupId, tenantName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_173 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_173(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_174 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_174(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteFederatedDatabase(rsp); }));
        }));
    };
    ObservableDataFederationApi.prototype.deleteOneDataFederationInstanceQueryLimit = function (groupId, tenantName, limitName, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteOneDataFederationInstanceQueryLimit(groupId, tenantName, limitName, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_175 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_175(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_176 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_176(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteOneDataFederationInstanceQueryLimit(rsp); }));
        }));
    };
    ObservableDataFederationApi.prototype.downloadFederatedDatabaseQueryLogs = function (groupId, tenantName, endDate, startDate, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.downloadFederatedDatabaseQueryLogs(groupId, tenantName, endDate, startDate, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_177 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_177(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_178 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_178(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.downloadFederatedDatabaseQueryLogs(rsp); }));
        }));
    };
    ObservableDataFederationApi.prototype.getDataFederationPrivateEndpoint = function (groupId, endpointId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getDataFederationPrivateEndpoint(groupId, endpointId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_179 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_179(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_180 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_180(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getDataFederationPrivateEndpoint(rsp); }));
        }));
    };
    ObservableDataFederationApi.prototype.getFederatedDatabase = function (groupId, tenantName, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getFederatedDatabase(groupId, tenantName, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_181 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_181(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_182 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_182(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getFederatedDatabase(rsp); }));
        }));
    };
    ObservableDataFederationApi.prototype.listDataFederationPrivateEndpoints = function (groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listDataFederationPrivateEndpoints(groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_183 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_183(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_184 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_184(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listDataFederationPrivateEndpoints(rsp); }));
        }));
    };
    ObservableDataFederationApi.prototype.listFederatedDatabases = function (groupId, envelope, pretty, type, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listFederatedDatabases(groupId, envelope, pretty, type, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_185 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_185(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_186 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_186(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listFederatedDatabases(rsp); }));
        }));
    };
    ObservableDataFederationApi.prototype.returnFederatedDatabaseQueryLimit = function (groupId, tenantName, limitName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.returnFederatedDatabaseQueryLimit(groupId, tenantName, limitName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_187 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_187(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_188 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_188(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.returnFederatedDatabaseQueryLimit(rsp); }));
        }));
    };
    ObservableDataFederationApi.prototype.returnFederatedDatabaseQueryLimits = function (groupId, tenantName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.returnFederatedDatabaseQueryLimits(groupId, tenantName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_189 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_189(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_190 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_190(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.returnFederatedDatabaseQueryLimits(rsp); }));
        }));
    };
    ObservableDataFederationApi.prototype.updateFederatedDatabase = function (groupId, tenantName, skipRoleValidation, dataLakeTenant, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateFederatedDatabase(groupId, tenantName, skipRoleValidation, dataLakeTenant, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_191 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_191(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_192 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_192(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateFederatedDatabase(rsp); }));
        }));
    };
    return ObservableDataFederationApi;
}());
exports.ObservableDataFederationApi = ObservableDataFederationApi;
var DataLakePipelinesApi_1 = __nccwpck_require__(45396);
var ObservableDataLakePipelinesApi = (function () {
    function ObservableDataLakePipelinesApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new DataLakePipelinesApi_1.DataLakePipelinesApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new DataLakePipelinesApi_1.DataLakePipelinesApiResponseProcessor();
    }
    ObservableDataLakePipelinesApi.prototype.createPipeline = function (groupId, ingestionPipeline, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createPipeline(groupId, ingestionPipeline, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_193 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_193(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_194 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_194(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createPipeline(rsp); }));
        }));
    };
    ObservableDataLakePipelinesApi.prototype.deletePipeline = function (groupId, pipelineName, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deletePipeline(groupId, pipelineName, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_195 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_195(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_196 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_196(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deletePipeline(rsp); }));
        }));
    };
    ObservableDataLakePipelinesApi.prototype.deletePipelineRunDataset = function (groupId, pipelineName, pipelineRunId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deletePipelineRunDataset(groupId, pipelineName, pipelineRunId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_197 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_197(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_198 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_198(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deletePipelineRunDataset(rsp); }));
        }));
    };
    ObservableDataLakePipelinesApi.prototype.getPipeline = function (groupId, pipelineName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getPipeline(groupId, pipelineName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_199 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_199(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_200 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_200(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getPipeline(rsp); }));
        }));
    };
    ObservableDataLakePipelinesApi.prototype.getPipelineRun = function (groupId, pipelineName, pipelineRunId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getPipelineRun(groupId, pipelineName, pipelineRunId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_201 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_201(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_202 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_202(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getPipelineRun(rsp); }));
        }));
    };
    ObservableDataLakePipelinesApi.prototype.listPipelineRuns = function (groupId, pipelineName, envelope, includeCount, itemsPerPage, pageNum, pretty, createdBefore, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listPipelineRuns(groupId, pipelineName, envelope, includeCount, itemsPerPage, pageNum, pretty, createdBefore, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_203 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_203(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_204 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_204(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listPipelineRuns(rsp); }));
        }));
    };
    ObservableDataLakePipelinesApi.prototype.listPipelineSchedules = function (groupId, pipelineName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listPipelineSchedules(groupId, pipelineName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_205 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_205(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_206 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_206(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listPipelineSchedules(rsp); }));
        }));
    };
    ObservableDataLakePipelinesApi.prototype.listPipelineSnapshots = function (groupId, pipelineName, envelope, includeCount, itemsPerPage, pageNum, pretty, completedAfter, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listPipelineSnapshots(groupId, pipelineName, envelope, includeCount, itemsPerPage, pageNum, pretty, completedAfter, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_207 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_207(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_208 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_208(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listPipelineSnapshots(rsp); }));
        }));
    };
    ObservableDataLakePipelinesApi.prototype.listPipelines = function (groupId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listPipelines(groupId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_209 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_209(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_210 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_210(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listPipelines(rsp); }));
        }));
    };
    ObservableDataLakePipelinesApi.prototype.pausePipeline = function (groupId, pipelineName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.pausePipeline(groupId, pipelineName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_211 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_211(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_212 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_212(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.pausePipeline(rsp); }));
        }));
    };
    ObservableDataLakePipelinesApi.prototype.resumePipeline = function (groupId, pipelineName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.resumePipeline(groupId, pipelineName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_213 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_213(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_214 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_214(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.resumePipeline(rsp); }));
        }));
    };
    ObservableDataLakePipelinesApi.prototype.triggerSnapshotIngestion = function (groupId, pipelineName, triggerIngestionRequest, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.triggerSnapshotIngestion(groupId, pipelineName, triggerIngestionRequest, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_215 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_215(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_216 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_216(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.triggerSnapshotIngestion(rsp); }));
        }));
    };
    ObservableDataLakePipelinesApi.prototype.updatePipeline = function (groupId, pipelineName, ingestionPipeline, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updatePipeline(groupId, pipelineName, ingestionPipeline, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_217 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_217(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_218 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_218(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updatePipeline(rsp); }));
        }));
    };
    return ObservableDataLakePipelinesApi;
}());
exports.ObservableDataLakePipelinesApi = ObservableDataLakePipelinesApi;
var DatabaseUsersApi_1 = __nccwpck_require__(11352);
var ObservableDatabaseUsersApi = (function () {
    function ObservableDatabaseUsersApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new DatabaseUsersApi_1.DatabaseUsersApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new DatabaseUsersApi_1.DatabaseUsersApiResponseProcessor();
    }
    ObservableDatabaseUsersApi.prototype.createDatabaseUser = function (groupId, databaseUser, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createDatabaseUser(groupId, databaseUser, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_219 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_219(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_220 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_220(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createDatabaseUser(rsp); }));
        }));
    };
    ObservableDatabaseUsersApi.prototype.deleteDatabaseUser = function (groupId, databaseName, username, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteDatabaseUser(groupId, databaseName, username, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_221 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_221(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_222 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_222(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteDatabaseUser(rsp); }));
        }));
    };
    ObservableDatabaseUsersApi.prototype.getDatabaseUser = function (groupId, databaseName, username, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getDatabaseUser(groupId, databaseName, username, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_223 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_223(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_224 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_224(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getDatabaseUser(rsp); }));
        }));
    };
    ObservableDatabaseUsersApi.prototype.listDatabaseUsers = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listDatabaseUsers(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_225 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_225(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_226 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_226(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listDatabaseUsers(rsp); }));
        }));
    };
    ObservableDatabaseUsersApi.prototype.updateDatabaseUser = function (groupId, databaseName, username, databaseUser, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateDatabaseUser(groupId, databaseName, username, databaseUser, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_227 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_227(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_228 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_228(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateDatabaseUser(rsp); }));
        }));
    };
    return ObservableDatabaseUsersApi;
}());
exports.ObservableDatabaseUsersApi = ObservableDatabaseUsersApi;
var EncryptionAtRestUsingCustomerKeyManagementApi_1 = __nccwpck_require__(13631);
var ObservableEncryptionAtRestUsingCustomerKeyManagementApi = (function () {
    function ObservableEncryptionAtRestUsingCustomerKeyManagementApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new EncryptionAtRestUsingCustomerKeyManagementApi_1.EncryptionAtRestUsingCustomerKeyManagementApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new EncryptionAtRestUsingCustomerKeyManagementApi_1.EncryptionAtRestUsingCustomerKeyManagementApiResponseProcessor();
    }
    ObservableEncryptionAtRestUsingCustomerKeyManagementApi.prototype.returnOneConfigurationForEncryptionAtRestUsingCustomerManagedKeysForOneProject = function (groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.returnOneConfigurationForEncryptionAtRestUsingCustomerManagedKeysForOneProject(groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_229 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_229(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_230 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_230(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.returnOneConfigurationForEncryptionAtRestUsingCustomerManagedKeysForOneProject(rsp); }));
        }));
    };
    ObservableEncryptionAtRestUsingCustomerKeyManagementApi.prototype.updateEncryptionAtRest = function (groupId, encryptionAtRest, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateEncryptionAtRest(groupId, encryptionAtRest, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_231 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_231(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_232 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_232(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateEncryptionAtRest(rsp); }));
        }));
    };
    return ObservableEncryptionAtRestUsingCustomerKeyManagementApi;
}());
exports.ObservableEncryptionAtRestUsingCustomerKeyManagementApi = ObservableEncryptionAtRestUsingCustomerKeyManagementApi;
var EventsApi_1 = __nccwpck_require__(36938);
var ObservableEventsApi = (function () {
    function ObservableEventsApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new EventsApi_1.EventsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new EventsApi_1.EventsApiResponseProcessor();
    }
    ObservableEventsApi.prototype.getOrganizationEvent = function (orgId, eventId, envelope, pretty, includeRaw, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getOrganizationEvent(orgId, eventId, envelope, pretty, includeRaw, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_233 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_233(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_234 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_234(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getOrganizationEvent(rsp); }));
        }));
    };
    ObservableEventsApi.prototype.getProjectEvent = function (groupId, eventId, envelope, pretty, includeRaw, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getProjectEvent(groupId, eventId, envelope, pretty, includeRaw, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_235 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_235(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_236 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_236(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getProjectEvent(rsp); }));
        }));
    };
    ObservableEventsApi.prototype.listOrganizationEvents = function (orgId, envelope, includeCount, itemsPerPage, pageNum, pretty, eventType, includeRaw, maxDate, minDate, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listOrganizationEvents(orgId, envelope, includeCount, itemsPerPage, pageNum, pretty, eventType, includeRaw, maxDate, minDate, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_237 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_237(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_238 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_238(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listOrganizationEvents(rsp); }));
        }));
    };
    ObservableEventsApi.prototype.listProjectEvents = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, clusterNames, eventType, includeRaw, maxDate, minDate, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listProjectEvents(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, clusterNames, eventType, includeRaw, maxDate, minDate, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_239 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_239(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_240 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_240(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listProjectEvents(rsp); }));
        }));
    };
    return ObservableEventsApi;
}());
exports.ObservableEventsApi = ObservableEventsApi;
var FederatedAuthenticationApi_1 = __nccwpck_require__(63539);
var ObservableFederatedAuthenticationApi = (function () {
    function ObservableFederatedAuthenticationApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new FederatedAuthenticationApi_1.FederatedAuthenticationApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new FederatedAuthenticationApi_1.FederatedAuthenticationApiResponseProcessor();
    }
    ObservableFederatedAuthenticationApi.prototype.createRoleMapping = function (federationSettingsId, orgId, roleMappingView, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createRoleMapping(federationSettingsId, orgId, roleMappingView, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_241 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_241(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_242 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_242(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createRoleMapping(rsp); }));
        }));
    };
    ObservableFederatedAuthenticationApi.prototype.deleteFederationApp = function (federationSettingsId, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteFederationApp(federationSettingsId, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_243 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_243(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_244 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_244(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteFederationApp(rsp); }));
        }));
    };
    ObservableFederatedAuthenticationApi.prototype.deleteRoleMapping = function (federationSettingsId, id, orgId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteRoleMapping(federationSettingsId, id, orgId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_245 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_245(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_246 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_246(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteRoleMapping(rsp); }));
        }));
    };
    ObservableFederatedAuthenticationApi.prototype.getConnectedOrgConfig = function (federationSettingsId, orgId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getConnectedOrgConfig(federationSettingsId, orgId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_247 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_247(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_248 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_248(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getConnectedOrgConfig(rsp); }));
        }));
    };
    ObservableFederatedAuthenticationApi.prototype.getFederationSettings = function (orgId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getFederationSettings(orgId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_249 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_249(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_250 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_250(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getFederationSettings(rsp); }));
        }));
    };
    ObservableFederatedAuthenticationApi.prototype.getIdentityProvider = function (federationSettingsId, identityProviderId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getIdentityProvider(federationSettingsId, identityProviderId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_251 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_251(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_252 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_252(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getIdentityProvider(rsp); }));
        }));
    };
    ObservableFederatedAuthenticationApi.prototype.getIdentityProviderMetadata = function (federationSettingsId, identityProviderId, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getIdentityProviderMetadata(federationSettingsId, identityProviderId, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_253 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_253(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_254 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_254(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getIdentityProviderMetadata(rsp); }));
        }));
    };
    ObservableFederatedAuthenticationApi.prototype.getRoleMapping = function (federationSettingsId, id, orgId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getRoleMapping(federationSettingsId, id, orgId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_255 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_255(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_256 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_256(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getRoleMapping(rsp); }));
        }));
    };
    ObservableFederatedAuthenticationApi.prototype.listConnectedOrgConfigs = function (federationSettingsId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listConnectedOrgConfigs(federationSettingsId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_257 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_257(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_258 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_258(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listConnectedOrgConfigs(rsp); }));
        }));
    };
    ObservableFederatedAuthenticationApi.prototype.listIdentityProviders = function (federationSettingsId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listIdentityProviders(federationSettingsId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_259 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_259(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_260 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_260(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listIdentityProviders(rsp); }));
        }));
    };
    ObservableFederatedAuthenticationApi.prototype.listRoleMappings = function (federationSettingsId, orgId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listRoleMappings(federationSettingsId, orgId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_261 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_261(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_262 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_262(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listRoleMappings(rsp); }));
        }));
    };
    ObservableFederatedAuthenticationApi.prototype.removeConnectedOrgConfig = function (federationSettingsId, orgId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.removeConnectedOrgConfig(federationSettingsId, orgId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_263 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_263(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_264 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_264(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.removeConnectedOrgConfig(rsp); }));
        }));
    };
    ObservableFederatedAuthenticationApi.prototype.updateConnectedOrgConfig = function (federationSettingsId, orgId, connectedOrgConfigView, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateConnectedOrgConfig(federationSettingsId, orgId, connectedOrgConfigView, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_265 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_265(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_266 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_266(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateConnectedOrgConfig(rsp); }));
        }));
    };
    ObservableFederatedAuthenticationApi.prototype.updateIdentityProvider = function (federationSettingsId, identityProviderId, identityProviderUpdate, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateIdentityProvider(federationSettingsId, identityProviderId, identityProviderUpdate, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_267 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_267(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_268 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_268(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateIdentityProvider(rsp); }));
        }));
    };
    ObservableFederatedAuthenticationApi.prototype.updateRoleMapping = function (federationSettingsId, id, orgId, roleMappingView, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateRoleMapping(federationSettingsId, id, orgId, roleMappingView, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_269 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_269(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_270 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_270(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateRoleMapping(rsp); }));
        }));
    };
    return ObservableFederatedAuthenticationApi;
}());
exports.ObservableFederatedAuthenticationApi = ObservableFederatedAuthenticationApi;
var GlobalClustersApi_1 = __nccwpck_require__(17349);
var ObservableGlobalClustersApi = (function () {
    function ObservableGlobalClustersApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new GlobalClustersApi_1.GlobalClustersApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new GlobalClustersApi_1.GlobalClustersApiResponseProcessor();
    }
    ObservableGlobalClustersApi.prototype.createCustomZoneMapping = function (groupId, clusterName, geoSharding, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createCustomZoneMapping(groupId, clusterName, geoSharding, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_271 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_271(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_272 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_272(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createCustomZoneMapping(rsp); }));
        }));
    };
    ObservableGlobalClustersApi.prototype.createManagedNamespace = function (groupId, clusterName, managedNamespaceView, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createManagedNamespace(groupId, clusterName, managedNamespaceView, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_273 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_273(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_274 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_274(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createManagedNamespace(rsp); }));
        }));
    };
    ObservableGlobalClustersApi.prototype.deleteAllCustomZoneMappings = function (groupId, clusterName, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteAllCustomZoneMappings(groupId, clusterName, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_275 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_275(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_276 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_276(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteAllCustomZoneMappings(rsp); }));
        }));
    };
    ObservableGlobalClustersApi.prototype.deleteManagedNamespace = function (clusterName, groupId, envelope, pretty, db, collection, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteManagedNamespace(clusterName, groupId, envelope, pretty, db, collection, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_277 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_277(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_278 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_278(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteManagedNamespace(rsp); }));
        }));
    };
    ObservableGlobalClustersApi.prototype.getManagedNamespace = function (groupId, clusterName, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getManagedNamespace(groupId, clusterName, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_279 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_279(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_280 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_280(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getManagedNamespace(rsp); }));
        }));
    };
    return ObservableGlobalClustersApi;
}());
exports.ObservableGlobalClustersApi = ObservableGlobalClustersApi;
var InvoicesApi_1 = __nccwpck_require__(69069);
var ObservableInvoicesApi = (function () {
    function ObservableInvoicesApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new InvoicesApi_1.InvoicesApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new InvoicesApi_1.InvoicesApiResponseProcessor();
    }
    ObservableInvoicesApi.prototype.downloadInvoiceCSV = function (orgId, invoiceId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.downloadInvoiceCSV(orgId, invoiceId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_281 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_281(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_282 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_282(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.downloadInvoiceCSV(rsp); }));
        }));
    };
    ObservableInvoicesApi.prototype.getInvoice = function (orgId, invoiceId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getInvoice(orgId, invoiceId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_283 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_283(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_284 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_284(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getInvoice(rsp); }));
        }));
    };
    ObservableInvoicesApi.prototype.listInvoices = function (orgId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listInvoices(orgId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_285 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_285(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_286 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_286(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listInvoices(rsp); }));
        }));
    };
    ObservableInvoicesApi.prototype.listPendingInvoices = function (orgId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listPendingInvoices(orgId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_287 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_287(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_288 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_288(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listPendingInvoices(rsp); }));
        }));
    };
    return ObservableInvoicesApi;
}());
exports.ObservableInvoicesApi = ObservableInvoicesApi;
var LDAPConfigurationApi_1 = __nccwpck_require__(26649);
var ObservableLDAPConfigurationApi = (function () {
    function ObservableLDAPConfigurationApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new LDAPConfigurationApi_1.LDAPConfigurationApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new LDAPConfigurationApi_1.LDAPConfigurationApiResponseProcessor();
    }
    ObservableLDAPConfigurationApi.prototype.deleteLDAPConfiguration = function (groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteLDAPConfiguration(groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_289 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_289(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_290 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_290(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteLDAPConfiguration(rsp); }));
        }));
    };
    ObservableLDAPConfigurationApi.prototype.getLDAPConfiguration = function (groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getLDAPConfiguration(groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_291 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_291(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_292 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_292(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getLDAPConfiguration(rsp); }));
        }));
    };
    ObservableLDAPConfigurationApi.prototype.getLDAPConfigurationStatus = function (groupId, requestId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getLDAPConfigurationStatus(groupId, requestId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_293 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_293(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_294 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_294(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getLDAPConfigurationStatus(rsp); }));
        }));
    };
    ObservableLDAPConfigurationApi.prototype.saveLDAPConfiguration = function (groupId, userSecurity, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.saveLDAPConfiguration(groupId, userSecurity, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_295 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_295(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_296 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_296(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.saveLDAPConfiguration(rsp); }));
        }));
    };
    ObservableLDAPConfigurationApi.prototype.verifyLDAPConfiguration = function (groupId, nDSLDAPVerifyConnectivityJobRequestParams, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.verifyLDAPConfiguration(groupId, nDSLDAPVerifyConnectivityJobRequestParams, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_297 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_297(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_298 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_298(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.verifyLDAPConfiguration(rsp); }));
        }));
    };
    return ObservableLDAPConfigurationApi;
}());
exports.ObservableLDAPConfigurationApi = ObservableLDAPConfigurationApi;
var LegacyBackupApi_1 = __nccwpck_require__(96025);
var ObservableLegacyBackupApi = (function () {
    function ObservableLegacyBackupApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new LegacyBackupApi_1.LegacyBackupApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new LegacyBackupApi_1.LegacyBackupApiResponseProcessor();
    }
    ObservableLegacyBackupApi.prototype.deleteLegacySnapshot = function (groupId, clusterName, snapshotId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteLegacySnapshot(groupId, clusterName, snapshotId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_299 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_299(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_300 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_300(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteLegacySnapshot(rsp); }));
        }));
    };
    ObservableLegacyBackupApi.prototype.getLegacyBackupCheckpoint = function (groupId, checkpointId, clusterName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getLegacyBackupCheckpoint(groupId, checkpointId, clusterName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_301 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_301(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_302 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_302(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getLegacyBackupCheckpoint(rsp); }));
        }));
    };
    ObservableLegacyBackupApi.prototype.getLegacyBackupRestoreJob = function (groupId, clusterName, jobId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getLegacyBackupRestoreJob(groupId, clusterName, jobId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_303 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_303(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_304 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_304(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getLegacyBackupRestoreJob(rsp); }));
        }));
    };
    ObservableLegacyBackupApi.prototype.getLegacySnapshot = function (groupId, clusterName, snapshotId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getLegacySnapshot(groupId, clusterName, snapshotId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_305 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_305(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_306 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_306(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getLegacySnapshot(rsp); }));
        }));
    };
    ObservableLegacyBackupApi.prototype.getLegacySnapshotSchedule = function (groupId, clusterName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getLegacySnapshotSchedule(groupId, clusterName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_307 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_307(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_308 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_308(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getLegacySnapshotSchedule(rsp); }));
        }));
    };
    ObservableLegacyBackupApi.prototype.listLegacyBackupCheckpoints = function (groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listLegacyBackupCheckpoints(groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_309 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_309(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_310 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_310(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listLegacyBackupCheckpoints(rsp); }));
        }));
    };
    ObservableLegacyBackupApi.prototype.listLegacyBackupRestoreJobs = function (groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, batchId, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listLegacyBackupRestoreJobs(groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, batchId, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_311 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_311(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_312 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_312(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listLegacyBackupRestoreJobs(rsp); }));
        }));
    };
    ObservableLegacyBackupApi.prototype.listLegacySnapshots = function (groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, completed, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listLegacySnapshots(groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, completed, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_313 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_313(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_314 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_314(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listLegacySnapshots(rsp); }));
        }));
    };
    ObservableLegacyBackupApi.prototype.updateLegacySnapshotRetention = function (groupId, clusterName, snapshotId, apiSnapshotView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateLegacySnapshotRetention(groupId, clusterName, snapshotId, apiSnapshotView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_315 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_315(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_316 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_316(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateLegacySnapshotRetention(rsp); }));
        }));
    };
    ObservableLegacyBackupApi.prototype.updateLegacySnapshotSchedule = function (groupId, clusterName, snapshotSchedule, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateLegacySnapshotSchedule(groupId, clusterName, snapshotSchedule, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_317 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_317(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_318 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_318(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateLegacySnapshotSchedule(rsp); }));
        }));
    };
    return ObservableLegacyBackupApi;
}());
exports.ObservableLegacyBackupApi = ObservableLegacyBackupApi;
var LegacyBackupRestoreJobsApi_1 = __nccwpck_require__(99687);
var ObservableLegacyBackupRestoreJobsApi = (function () {
    function ObservableLegacyBackupRestoreJobsApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new LegacyBackupRestoreJobsApi_1.LegacyBackupRestoreJobsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new LegacyBackupRestoreJobsApi_1.LegacyBackupRestoreJobsApiResponseProcessor();
    }
    ObservableLegacyBackupRestoreJobsApi.prototype.createLegacyBackupRestoreJob = function (groupId, clusterName, apiRestoreJobView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createLegacyBackupRestoreJob(groupId, clusterName, apiRestoreJobView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_319 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_319(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_320 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_320(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createLegacyBackupRestoreJob(rsp); }));
        }));
    };
    return ObservableLegacyBackupRestoreJobsApi;
}());
exports.ObservableLegacyBackupRestoreJobsApi = ObservableLegacyBackupRestoreJobsApi;
var MaintenanceWindowsApi_1 = __nccwpck_require__(60865);
var ObservableMaintenanceWindowsApi = (function () {
    function ObservableMaintenanceWindowsApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new MaintenanceWindowsApi_1.MaintenanceWindowsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new MaintenanceWindowsApi_1.MaintenanceWindowsApiResponseProcessor();
    }
    ObservableMaintenanceWindowsApi.prototype.deferMaintenanceWindow = function (groupId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deferMaintenanceWindow(groupId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_321 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_321(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_322 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_322(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deferMaintenanceWindow(rsp); }));
        }));
    };
    ObservableMaintenanceWindowsApi.prototype.getMaintenanceWindow = function (groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getMaintenanceWindow(groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_323 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_323(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_324 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_324(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getMaintenanceWindow(rsp); }));
        }));
    };
    ObservableMaintenanceWindowsApi.prototype.resetMaintenanceWindow = function (groupId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.resetMaintenanceWindow(groupId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_325 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_325(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_326 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_326(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.resetMaintenanceWindow(rsp); }));
        }));
    };
    ObservableMaintenanceWindowsApi.prototype.toggleMaintenanceAutoDefer = function (groupId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.toggleMaintenanceAutoDefer(groupId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_327 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_327(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_328 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_328(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.toggleMaintenanceAutoDefer(rsp); }));
        }));
    };
    ObservableMaintenanceWindowsApi.prototype.updateMaintenanceWindow = function (groupId, groupMaintenanceWindow, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateMaintenanceWindow(groupId, groupMaintenanceWindow, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_329 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_329(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_330 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_330(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateMaintenanceWindow(rsp); }));
        }));
    };
    return ObservableMaintenanceWindowsApi;
}());
exports.ObservableMaintenanceWindowsApi = ObservableMaintenanceWindowsApi;
var MongoDBCloudUsersApi_1 = __nccwpck_require__(31735);
var ObservableMongoDBCloudUsersApi = (function () {
    function ObservableMongoDBCloudUsersApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new MongoDBCloudUsersApi_1.MongoDBCloudUsersApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new MongoDBCloudUsersApi_1.MongoDBCloudUsersApiResponseProcessor();
    }
    ObservableMongoDBCloudUsersApi.prototype.createUser = function (apiAppUserView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createUser(apiAppUserView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_331 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_331(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_332 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_332(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createUser(rsp); }));
        }));
    };
    ObservableMongoDBCloudUsersApi.prototype.getUser = function (userId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getUser(userId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_333 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_333(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_334 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_334(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getUser(rsp); }));
        }));
    };
    ObservableMongoDBCloudUsersApi.prototype.getUserByUsername = function (userName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getUserByUsername(userName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_335 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_335(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_336 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_336(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getUserByUsername(rsp); }));
        }));
    };
    return ObservableMongoDBCloudUsersApi;
}());
exports.ObservableMongoDBCloudUsersApi = ObservableMongoDBCloudUsersApi;
var MonitoringAndLogsApi_1 = __nccwpck_require__(90873);
var ObservableMonitoringAndLogsApi = (function () {
    function ObservableMonitoringAndLogsApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new MonitoringAndLogsApi_1.MonitoringAndLogsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new MonitoringAndLogsApi_1.MonitoringAndLogsApiResponseProcessor();
    }
    ObservableMonitoringAndLogsApi.prototype.getAtlasProcess = function (groupId, processId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getAtlasProcess(groupId, processId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_337 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_337(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_338 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_338(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getAtlasProcess(rsp); }));
        }));
    };
    ObservableMonitoringAndLogsApi.prototype.getDatabase = function (groupId, databaseName, processId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getDatabase(groupId, databaseName, processId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_339 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_339(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_340 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_340(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getDatabase(rsp); }));
        }));
    };
    ObservableMonitoringAndLogsApi.prototype.getDatabaseMeasurements = function (groupId, databaseName, processId, envelope, pretty, m, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getDatabaseMeasurements(groupId, databaseName, processId, envelope, pretty, m, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_341 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_341(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_342 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_342(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getDatabaseMeasurements(rsp); }));
        }));
    };
    ObservableMonitoringAndLogsApi.prototype.getDiskMeasurements = function (groupId, partitionName, processId, envelope, pretty, m, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getDiskMeasurements(groupId, partitionName, processId, envelope, pretty, m, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_343 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_343(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_344 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_344(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getDiskMeasurements(rsp); }));
        }));
    };
    ObservableMonitoringAndLogsApi.prototype.getHostLogs = function (groupId, hostName, logName, endDate, startDate, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getHostLogs(groupId, hostName, logName, endDate, startDate, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_345 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_345(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_346 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_346(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getHostLogs(rsp); }));
        }));
    };
    ObservableMonitoringAndLogsApi.prototype.getHostMeasurements = function (groupId, processId, envelope, pretty, m, period, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getHostMeasurements(groupId, processId, envelope, pretty, m, period, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_347 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_347(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_348 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_348(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getHostMeasurements(rsp); }));
        }));
    };
    ObservableMonitoringAndLogsApi.prototype.getIndexMetrics = function (processId, indexName, databaseName, collectionName, groupId, granularity, metrics, period, start, end, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getIndexMetrics(processId, indexName, databaseName, collectionName, groupId, granularity, metrics, period, start, end, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_349 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_349(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_350 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_350(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getIndexMetrics(rsp); }));
        }));
    };
    ObservableMonitoringAndLogsApi.prototype.getMeasurements = function (processId, groupId, granularity, metrics, period, start, end, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getMeasurements(processId, groupId, granularity, metrics, period, start, end, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_351 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_351(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_352 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_352(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getMeasurements(rsp); }));
        }));
    };
    ObservableMonitoringAndLogsApi.prototype.listAtlasProcesses = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listAtlasProcesses(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_353 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_353(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_354 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_354(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listAtlasProcesses(rsp); }));
        }));
    };
    ObservableMonitoringAndLogsApi.prototype.listDatabases = function (groupId, processId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listDatabases(groupId, processId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_355 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_355(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_356 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_356(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listDatabases(rsp); }));
        }));
    };
    ObservableMonitoringAndLogsApi.prototype.listDiskMeasurements = function (partitionName, groupId, processId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listDiskMeasurements(partitionName, groupId, processId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_357 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_357(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_358 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_358(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listDiskMeasurements(rsp); }));
        }));
    };
    ObservableMonitoringAndLogsApi.prototype.listDiskPartitions = function (groupId, processId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listDiskPartitions(groupId, processId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_359 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_359(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_360 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_360(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listDiskPartitions(rsp); }));
        }));
    };
    ObservableMonitoringAndLogsApi.prototype.listIndexMetrics = function (processId, databaseName, collectionName, groupId, granularity, metrics, period, start, end, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listIndexMetrics(processId, databaseName, collectionName, groupId, granularity, metrics, period, start, end, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_361 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_361(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_362 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_362(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listIndexMetrics(rsp); }));
        }));
    };
    ObservableMonitoringAndLogsApi.prototype.listMetricTypes = function (processId, groupId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listMetricTypes(processId, groupId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_363 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_363(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_364 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_364(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listMetricTypes(rsp); }));
        }));
    };
    return ObservableMonitoringAndLogsApi;
}());
exports.ObservableMonitoringAndLogsApi = ObservableMonitoringAndLogsApi;
var MultiCloudClustersApi_1 = __nccwpck_require__(12458);
var ObservableMultiCloudClustersApi = (function () {
    function ObservableMultiCloudClustersApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new MultiCloudClustersApi_1.MultiCloudClustersApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new MultiCloudClustersApi_1.MultiCloudClustersApiResponseProcessor();
    }
    ObservableMultiCloudClustersApi.prototype.createCluster = function (groupId, clusterDescriptionV15, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createCluster(groupId, clusterDescriptionV15, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_365 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_365(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_366 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_366(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createCluster(rsp); }));
        }));
    };
    ObservableMultiCloudClustersApi.prototype.deleteCluster = function (groupId, clusterName, envelope, retainBackups, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteCluster(groupId, clusterName, envelope, retainBackups, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_367 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_367(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_368 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_368(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteCluster(rsp); }));
        }));
    };
    ObservableMultiCloudClustersApi.prototype.getCluster = function (groupId, clusterName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getCluster(groupId, clusterName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_369 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_369(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_370 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_370(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getCluster(rsp); }));
        }));
    };
    ObservableMultiCloudClustersApi.prototype.listClusters = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listClusters(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_371 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_371(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_372 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_372(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listClusters(rsp); }));
        }));
    };
    ObservableMultiCloudClustersApi.prototype.testFailover = function (groupId, clusterName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.testFailover(groupId, clusterName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_373 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_373(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_374 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_374(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.testFailover(rsp); }));
        }));
    };
    ObservableMultiCloudClustersApi.prototype.updateCluster = function (groupId, clusterName, clusterDescriptionV15, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateCluster(groupId, clusterName, clusterDescriptionV15, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_375 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_375(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_376 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_376(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateCluster(rsp); }));
        }));
    };
    return ObservableMultiCloudClustersApi;
}());
exports.ObservableMultiCloudClustersApi = ObservableMultiCloudClustersApi;
var NetworkPeeringApi_1 = __nccwpck_require__(24201);
var ObservableNetworkPeeringApi = (function () {
    function ObservableNetworkPeeringApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new NetworkPeeringApi_1.NetworkPeeringApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new NetworkPeeringApi_1.NetworkPeeringApiResponseProcessor();
    }
    ObservableNetworkPeeringApi.prototype.createPeeringConnection = function (groupId, apiAtlasContainerPeerViewRequest, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createPeeringConnection(groupId, apiAtlasContainerPeerViewRequest, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_377 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_377(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_378 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_378(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createPeeringConnection(rsp); }));
        }));
    };
    ObservableNetworkPeeringApi.prototype.createPeeringContainer = function (groupId, cloudProviderContainer, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createPeeringContainer(groupId, cloudProviderContainer, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_379 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_379(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_380 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_380(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createPeeringContainer(rsp); }));
        }));
    };
    ObservableNetworkPeeringApi.prototype.deletePeeringConnection = function (groupId, peerId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deletePeeringConnection(groupId, peerId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_381 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_381(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_382 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_382(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deletePeeringConnection(rsp); }));
        }));
    };
    ObservableNetworkPeeringApi.prototype.deletePeeringContainer = function (groupId, containerId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deletePeeringContainer(groupId, containerId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_383 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_383(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_384 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_384(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deletePeeringContainer(rsp); }));
        }));
    };
    ObservableNetworkPeeringApi.prototype.disablePeering = function (groupId, privateIPModeView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.disablePeering(groupId, privateIPModeView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_385 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_385(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_386 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_386(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.disablePeering(rsp); }));
        }));
    };
    ObservableNetworkPeeringApi.prototype.getPeeringConnection = function (groupId, peerId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getPeeringConnection(groupId, peerId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_387 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_387(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_388 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_388(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getPeeringConnection(rsp); }));
        }));
    };
    ObservableNetworkPeeringApi.prototype.getPeeringContainer = function (groupId, containerId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getPeeringContainer(groupId, containerId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_389 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_389(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_390 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_390(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getPeeringContainer(rsp); }));
        }));
    };
    ObservableNetworkPeeringApi.prototype.listPeeringConnections = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, providerName, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listPeeringConnections(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, providerName, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_391 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_391(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_392 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_392(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listPeeringConnections(rsp); }));
        }));
    };
    ObservableNetworkPeeringApi.prototype.listPeeringContainerByCloudProvider = function (groupId, providerName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listPeeringContainerByCloudProvider(groupId, providerName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_393 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_393(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_394 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_394(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listPeeringContainerByCloudProvider(rsp); }));
        }));
    };
    ObservableNetworkPeeringApi.prototype.listPeeringContainers = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listPeeringContainers(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_395 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_395(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_396 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_396(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listPeeringContainers(rsp); }));
        }));
    };
    ObservableNetworkPeeringApi.prototype.updatePeeringConnection = function (groupId, peerId, apiAtlasContainerPeerViewRequest, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updatePeeringConnection(groupId, peerId, apiAtlasContainerPeerViewRequest, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_397 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_397(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_398 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_398(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updatePeeringConnection(rsp); }));
        }));
    };
    ObservableNetworkPeeringApi.prototype.updatePeeringContainer = function (groupId, containerId, cloudProviderContainer, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updatePeeringContainer(groupId, containerId, cloudProviderContainer, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_399 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_399(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_400 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_400(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updatePeeringContainer(rsp); }));
        }));
    };
    ObservableNetworkPeeringApi.prototype.verifyConnectViaPeeringOnlyModeForOneProject = function (groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.verifyConnectViaPeeringOnlyModeForOneProject(groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_401 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_401(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_402 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_402(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.verifyConnectViaPeeringOnlyModeForOneProject(rsp); }));
        }));
    };
    return ObservableNetworkPeeringApi;
}());
exports.ObservableNetworkPeeringApi = ObservableNetworkPeeringApi;
var OnlineArchiveApi_1 = __nccwpck_require__(56766);
var ObservableOnlineArchiveApi = (function () {
    function ObservableOnlineArchiveApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new OnlineArchiveApi_1.OnlineArchiveApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new OnlineArchiveApi_1.OnlineArchiveApiResponseProcessor();
    }
    ObservableOnlineArchiveApi.prototype.createOnlineArchive = function (groupId, clusterName, onlineArchive, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createOnlineArchive(groupId, clusterName, onlineArchive, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_403 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_403(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_404 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_404(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createOnlineArchive(rsp); }));
        }));
    };
    ObservableOnlineArchiveApi.prototype.deleteOnlineArchive = function (groupId, archiveId, clusterName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteOnlineArchive(groupId, archiveId, clusterName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_405 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_405(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_406 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_406(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteOnlineArchive(rsp); }));
        }));
    };
    ObservableOnlineArchiveApi.prototype.downloadOnlineArchiveQueryLogs = function (groupId, clusterName, envelope, startDate, endDate, archiveOnly, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.downloadOnlineArchiveQueryLogs(groupId, clusterName, envelope, startDate, endDate, archiveOnly, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_407 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_407(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_408 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_408(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.downloadOnlineArchiveQueryLogs(rsp); }));
        }));
    };
    ObservableOnlineArchiveApi.prototype.getOnlineArchive = function (groupId, archiveId, clusterName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getOnlineArchive(groupId, archiveId, clusterName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_409 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_409(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_410 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_410(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getOnlineArchive(rsp); }));
        }));
    };
    ObservableOnlineArchiveApi.prototype.listOnlineArchives = function (groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listOnlineArchives(groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_411 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_411(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_412 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_412(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listOnlineArchives(rsp); }));
        }));
    };
    ObservableOnlineArchiveApi.prototype.updateOnlineArchive = function (groupId, archiveId, clusterName, onlineArchive, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateOnlineArchive(groupId, archiveId, clusterName, onlineArchive, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_413 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_413(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_414 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_414(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateOnlineArchive(rsp); }));
        }));
    };
    return ObservableOnlineArchiveApi;
}());
exports.ObservableOnlineArchiveApi = ObservableOnlineArchiveApi;
var OrganizationsApi_1 = __nccwpck_require__(56642);
var ObservableOrganizationsApi = (function () {
    function ObservableOrganizationsApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new OrganizationsApi_1.OrganizationsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new OrganizationsApi_1.OrganizationsApiResponseProcessor();
    }
    ObservableOrganizationsApi.prototype.createOrganization = function (createOrganizationRequest, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createOrganization(createOrganizationRequest, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_415 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_415(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_416 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_416(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createOrganization(rsp); }));
        }));
    };
    ObservableOrganizationsApi.prototype.createOrganizationInvitation = function (orgId, apiOrganizationInvitationRequestView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createOrganizationInvitation(orgId, apiOrganizationInvitationRequestView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_417 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_417(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_418 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_418(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createOrganizationInvitation(rsp); }));
        }));
    };
    ObservableOrganizationsApi.prototype.deleteOrganization = function (orgId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteOrganization(orgId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_419 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_419(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_420 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_420(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteOrganization(rsp); }));
        }));
    };
    ObservableOrganizationsApi.prototype.deleteOrganizationInvitation = function (orgId, invitationId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteOrganizationInvitation(orgId, invitationId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_421 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_421(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_422 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_422(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteOrganizationInvitation(rsp); }));
        }));
    };
    ObservableOrganizationsApi.prototype.getOrganization = function (orgId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getOrganization(orgId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_423 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_423(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_424 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_424(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getOrganization(rsp); }));
        }));
    };
    ObservableOrganizationsApi.prototype.getOrganizationInvitation = function (orgId, invitationId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getOrganizationInvitation(orgId, invitationId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_425 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_425(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_426 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_426(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getOrganizationInvitation(rsp); }));
        }));
    };
    ObservableOrganizationsApi.prototype.getOrganizationSettings = function (orgId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getOrganizationSettings(orgId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_427 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_427(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_428 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_428(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getOrganizationSettings(rsp); }));
        }));
    };
    ObservableOrganizationsApi.prototype.listOrganizationInvitations = function (orgId, envelope, pretty, username, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listOrganizationInvitations(orgId, envelope, pretty, username, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_429 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_429(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_430 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_430(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listOrganizationInvitations(rsp); }));
        }));
    };
    ObservableOrganizationsApi.prototype.listOrganizationProjects = function (orgId, envelope, includeCount, itemsPerPage, pageNum, pretty, name, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listOrganizationProjects(orgId, envelope, includeCount, itemsPerPage, pageNum, pretty, name, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_431 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_431(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_432 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_432(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listOrganizationProjects(rsp); }));
        }));
    };
    ObservableOrganizationsApi.prototype.listOrganizationUsers = function (orgId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listOrganizationUsers(orgId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_433 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_433(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_434 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_434(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listOrganizationUsers(rsp); }));
        }));
    };
    ObservableOrganizationsApi.prototype.listOrganizations = function (envelope, includeCount, itemsPerPage, pageNum, pretty, name, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listOrganizations(envelope, includeCount, itemsPerPage, pageNum, pretty, name, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_435 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_435(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_436 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_436(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listOrganizations(rsp); }));
        }));
    };
    ObservableOrganizationsApi.prototype.renameOrganization = function (orgId, apiOrganizationView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.renameOrganization(orgId, apiOrganizationView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_437 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_437(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_438 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_438(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.renameOrganization(rsp); }));
        }));
    };
    ObservableOrganizationsApi.prototype.updateOrganizationInvitation = function (orgId, apiOrganizationInvitationRequestView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateOrganizationInvitation(orgId, apiOrganizationInvitationRequestView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_439 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_439(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_440 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_440(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateOrganizationInvitation(rsp); }));
        }));
    };
    ObservableOrganizationsApi.prototype.updateOrganizationInvitationById = function (orgId, invitationId, apiOrganizationInvitationUpdateRequestView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateOrganizationInvitationById(orgId, invitationId, apiOrganizationInvitationUpdateRequestView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_441 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_441(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_442 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_442(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateOrganizationInvitationById(rsp); }));
        }));
    };
    ObservableOrganizationsApi.prototype.updateOrganizationSettings = function (orgId, organizationSettings, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateOrganizationSettings(orgId, organizationSettings, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_443 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_443(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_444 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_444(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateOrganizationSettings(rsp); }));
        }));
    };
    return ObservableOrganizationsApi;
}());
exports.ObservableOrganizationsApi = ObservableOrganizationsApi;
var PerformanceAdvisorApi_1 = __nccwpck_require__(57109);
var ObservablePerformanceAdvisorApi = (function () {
    function ObservablePerformanceAdvisorApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new PerformanceAdvisorApi_1.PerformanceAdvisorApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new PerformanceAdvisorApi_1.PerformanceAdvisorApiResponseProcessor();
    }
    ObservablePerformanceAdvisorApi.prototype.disableSlowOperationThresholding = function (groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.disableSlowOperationThresholding(groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_445 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_445(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_446 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_446(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.disableSlowOperationThresholding(rsp); }));
        }));
    };
    ObservablePerformanceAdvisorApi.prototype.enableSlowOperationThresholding = function (groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.enableSlowOperationThresholding(groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_447 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_447(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_448 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_448(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.enableSlowOperationThresholding(rsp); }));
        }));
    };
    ObservablePerformanceAdvisorApi.prototype.listSlowQueries = function (groupId, processId, envelope, pretty, duration, namespaces, nLogs, since, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listSlowQueries(groupId, processId, envelope, pretty, duration, namespaces, nLogs, since, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_449 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_449(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_450 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_450(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listSlowQueries(rsp); }));
        }));
    };
    ObservablePerformanceAdvisorApi.prototype.listSlowQueryNamespaces = function (groupId, processId, envelope, pretty, duration, since, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listSlowQueryNamespaces(groupId, processId, envelope, pretty, duration, since, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_451 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_451(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_452 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_452(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listSlowQueryNamespaces(rsp); }));
        }));
    };
    ObservablePerformanceAdvisorApi.prototype.listSuggestedIndexes = function (groupId, processId, envelope, includeCount, itemsPerPage, pageNum, pretty, duration, namespaces, nExamples, nIndexes, since, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listSuggestedIndexes(groupId, processId, envelope, includeCount, itemsPerPage, pageNum, pretty, duration, namespaces, nExamples, nIndexes, since, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_453 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_453(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_454 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_454(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listSuggestedIndexes(rsp); }));
        }));
    };
    return ObservablePerformanceAdvisorApi;
}());
exports.ObservablePerformanceAdvisorApi = ObservablePerformanceAdvisorApi;
var PrivateEndpointServicesApi_1 = __nccwpck_require__(42931);
var ObservablePrivateEndpointServicesApi = (function () {
    function ObservablePrivateEndpointServicesApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new PrivateEndpointServicesApi_1.PrivateEndpointServicesApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new PrivateEndpointServicesApi_1.PrivateEndpointServicesApiResponseProcessor();
    }
    ObservablePrivateEndpointServicesApi.prototype.createPrivateEndpoint = function (groupId, cloudProvider, endpointServiceId, createPrivateEndpointRequest, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createPrivateEndpoint(groupId, cloudProvider, endpointServiceId, createPrivateEndpointRequest, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_455 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_455(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_456 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_456(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createPrivateEndpoint(rsp); }));
        }));
    };
    ObservablePrivateEndpointServicesApi.prototype.createPrivateEndpointService = function (groupId, createEndpointServiceRequest, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createPrivateEndpointService(groupId, createEndpointServiceRequest, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_457 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_457(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_458 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_458(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createPrivateEndpointService(rsp); }));
        }));
    };
    ObservablePrivateEndpointServicesApi.prototype.deletePrivateEndpoint = function (groupId, cloudProvider, endpointId, endpointServiceId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deletePrivateEndpoint(groupId, cloudProvider, endpointId, endpointServiceId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_459 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_459(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_460 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_460(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deletePrivateEndpoint(rsp); }));
        }));
    };
    ObservablePrivateEndpointServicesApi.prototype.deletePrivateEndpointService = function (groupId, cloudProvider, endpointServiceId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deletePrivateEndpointService(groupId, cloudProvider, endpointServiceId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_461 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_461(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_462 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_462(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deletePrivateEndpointService(rsp); }));
        }));
    };
    ObservablePrivateEndpointServicesApi.prototype.getPrivateEndpoint = function (groupId, cloudProvider, endpointId, endpointServiceId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getPrivateEndpoint(groupId, cloudProvider, endpointId, endpointServiceId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_463 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_463(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_464 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_464(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getPrivateEndpoint(rsp); }));
        }));
    };
    ObservablePrivateEndpointServicesApi.prototype.getPrivateEndpointService = function (groupId, cloudProvider, endpointServiceId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getPrivateEndpointService(groupId, cloudProvider, endpointServiceId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_465 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_465(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_466 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_466(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getPrivateEndpointService(rsp); }));
        }));
    };
    ObservablePrivateEndpointServicesApi.prototype.getRegionalizedPrivateEndpointSetting = function (groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getRegionalizedPrivateEndpointSetting(groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_467 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_467(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_468 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_468(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getRegionalizedPrivateEndpointSetting(rsp); }));
        }));
    };
    ObservablePrivateEndpointServicesApi.prototype.listPrivateEndpointServices = function (groupId, cloudProvider, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listPrivateEndpointServices(groupId, cloudProvider, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_469 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_469(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_470 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_470(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listPrivateEndpointServices(rsp); }));
        }));
    };
    ObservablePrivateEndpointServicesApi.prototype.toggleRegionalizedPrivateEndpointSetting = function (groupId, projectSettingItemView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.toggleRegionalizedPrivateEndpointSetting(groupId, projectSettingItemView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_471 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_471(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_472 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_472(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.toggleRegionalizedPrivateEndpointSetting(rsp); }));
        }));
    };
    return ObservablePrivateEndpointServicesApi;
}());
exports.ObservablePrivateEndpointServicesApi = ObservablePrivateEndpointServicesApi;
var ProgrammaticAPIKeysApi_1 = __nccwpck_require__(92725);
var ObservableProgrammaticAPIKeysApi = (function () {
    function ObservableProgrammaticAPIKeysApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new ProgrammaticAPIKeysApi_1.ProgrammaticAPIKeysApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new ProgrammaticAPIKeysApi_1.ProgrammaticAPIKeysApiResponseProcessor();
    }
    ObservableProgrammaticAPIKeysApi.prototype.addProjectApiKey = function (groupId, apiUserId, apiUserRoleAssignment, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.addProjectApiKey(groupId, apiUserId, apiUserRoleAssignment, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_473 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_473(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_474 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_474(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.addProjectApiKey(rsp); }));
        }));
    };
    ObservableProgrammaticAPIKeysApi.prototype.createApiKey = function (orgId, apiCreateApiKeyView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createApiKey(orgId, apiCreateApiKeyView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_475 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_475(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_476 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_476(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createApiKey(rsp); }));
        }));
    };
    ObservableProgrammaticAPIKeysApi.prototype.createApiKeyAccessList = function (orgId, apiUserId, apiUserAccessListView, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createApiKeyAccessList(orgId, apiUserId, apiUserAccessListView, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_477 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_477(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_478 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_478(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createApiKeyAccessList(rsp); }));
        }));
    };
    ObservableProgrammaticAPIKeysApi.prototype.createProjectApiKey = function (groupId, apiCreateApiKeyView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createProjectApiKey(groupId, apiCreateApiKeyView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_479 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_479(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_480 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_480(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createProjectApiKey(rsp); }));
        }));
    };
    ObservableProgrammaticAPIKeysApi.prototype.deleteApiKey = function (orgId, apiUserId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteApiKey(orgId, apiUserId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_481 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_481(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_482 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_482(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteApiKey(rsp); }));
        }));
    };
    ObservableProgrammaticAPIKeysApi.prototype.deleteApiKeyAcessList = function (orgId, apiUserId, ipAddress, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteApiKeyAcessList(orgId, apiUserId, ipAddress, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_483 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_483(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_484 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_484(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteApiKeyAcessList(rsp); }));
        }));
    };
    ObservableProgrammaticAPIKeysApi.prototype.getApiKey = function (orgId, apiUserId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getApiKey(orgId, apiUserId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_485 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_485(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_486 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_486(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getApiKey(rsp); }));
        }));
    };
    ObservableProgrammaticAPIKeysApi.prototype.getApiKeyAccessList = function (orgId, ipAddress, apiUserId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getApiKeyAccessList(orgId, ipAddress, apiUserId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_487 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_487(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_488 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_488(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getApiKeyAccessList(rsp); }));
        }));
    };
    ObservableProgrammaticAPIKeysApi.prototype.listApiKeyAccessListsEntries = function (orgId, apiUserId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listApiKeyAccessListsEntries(orgId, apiUserId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_489 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_489(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_490 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_490(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listApiKeyAccessListsEntries(rsp); }));
        }));
    };
    ObservableProgrammaticAPIKeysApi.prototype.listApiKeys = function (orgId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listApiKeys(orgId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_491 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_491(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_492 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_492(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listApiKeys(rsp); }));
        }));
    };
    ObservableProgrammaticAPIKeysApi.prototype.listProjectApiKeys = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listProjectApiKeys(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_493 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_493(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_494 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_494(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listProjectApiKeys(rsp); }));
        }));
    };
    ObservableProgrammaticAPIKeysApi.prototype.removeProjectApiKey = function (groupId, apiUserId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.removeProjectApiKey(groupId, apiUserId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_495 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_495(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_496 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_496(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.removeProjectApiKey(rsp); }));
        }));
    };
    ObservableProgrammaticAPIKeysApi.prototype.updateApiKey = function (orgId, apiUserId, apiApiUserView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateApiKey(orgId, apiUserId, apiApiUserView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_497 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_497(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_498 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_498(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateApiKey(rsp); }));
        }));
    };
    ObservableProgrammaticAPIKeysApi.prototype.updateApiKeyRoles = function (groupId, apiUserId, apiCreateApiKeyView, pageNum, itemsPerPage, includeCount, pretty, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateApiKeyRoles(groupId, apiUserId, apiCreateApiKeyView, pageNum, itemsPerPage, includeCount, pretty, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_499 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_499(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_500 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_500(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateApiKeyRoles(rsp); }));
        }));
    };
    return ObservableProgrammaticAPIKeysApi;
}());
exports.ObservableProgrammaticAPIKeysApi = ObservableProgrammaticAPIKeysApi;
var ProjectIPAccessListApi_1 = __nccwpck_require__(19008);
var ObservableProjectIPAccessListApi = (function () {
    function ObservableProjectIPAccessListApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new ProjectIPAccessListApi_1.ProjectIPAccessListApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new ProjectIPAccessListApi_1.ProjectIPAccessListApiResponseProcessor();
    }
    ObservableProjectIPAccessListApi.prototype.createProjectIpAccessList = function (groupId, networkPermissionEntry, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createProjectIpAccessList(groupId, networkPermissionEntry, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_501 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_501(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_502 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_502(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createProjectIpAccessList(rsp); }));
        }));
    };
    ObservableProjectIPAccessListApi.prototype.deleteProjectIpAccessList = function (groupId, entryValue, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteProjectIpAccessList(groupId, entryValue, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_503 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_503(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_504 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_504(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteProjectIpAccessList(rsp); }));
        }));
    };
    ObservableProjectIPAccessListApi.prototype.getProjectIpAccessListStatus = function (groupId, entryValue, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getProjectIpAccessListStatus(groupId, entryValue, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_505 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_505(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_506 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_506(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getProjectIpAccessListStatus(rsp); }));
        }));
    };
    ObservableProjectIPAccessListApi.prototype.getProjectIpList = function (groupId, entryValue, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getProjectIpList(groupId, entryValue, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_507 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_507(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_508 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_508(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getProjectIpList(rsp); }));
        }));
    };
    ObservableProjectIPAccessListApi.prototype.listProjectIpAccessLists = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listProjectIpAccessLists(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_509 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_509(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_510 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_510(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listProjectIpAccessLists(rsp); }));
        }));
    };
    return ObservableProjectIPAccessListApi;
}());
exports.ObservableProjectIPAccessListApi = ObservableProjectIPAccessListApi;
var ProjectsApi_1 = __nccwpck_require__(92943);
var ObservableProjectsApi = (function () {
    function ObservableProjectsApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new ProjectsApi_1.ProjectsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new ProjectsApi_1.ProjectsApiResponseProcessor();
    }
    ObservableProjectsApi.prototype.createProject = function (group, envelope, pretty, projectOwnerId, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createProject(group, envelope, pretty, projectOwnerId, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_511 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_511(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_512 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_512(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createProject(rsp); }));
        }));
    };
    ObservableProjectsApi.prototype.createProjectInvitation = function (groupId, apiGroupInvitationRequestView, pretty, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createProjectInvitation(groupId, apiGroupInvitationRequestView, pretty, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_513 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_513(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_514 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_514(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createProjectInvitation(rsp); }));
        }));
    };
    ObservableProjectsApi.prototype.deleteProject = function (groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteProject(groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_515 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_515(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_516 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_516(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteProject(rsp); }));
        }));
    };
    ObservableProjectsApi.prototype.deleteProjectInvitation = function (groupId, invitationId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteProjectInvitation(groupId, invitationId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_517 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_517(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_518 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_518(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteProjectInvitation(rsp); }));
        }));
    };
    ObservableProjectsApi.prototype.deleteProjectLimit = function (limitName, groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteProjectLimit(limitName, groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_519 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_519(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_520 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_520(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteProjectLimit(rsp); }));
        }));
    };
    ObservableProjectsApi.prototype.getProject = function (groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getProject(groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_521 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_521(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_522 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_522(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getProject(rsp); }));
        }));
    };
    ObservableProjectsApi.prototype.getProjectByName = function (groupName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getProjectByName(groupName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_523 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_523(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_524 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_524(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getProjectByName(rsp); }));
        }));
    };
    ObservableProjectsApi.prototype.getProjectInvitation = function (groupId, invitationId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getProjectInvitation(groupId, invitationId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_525 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_525(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_526 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_526(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getProjectInvitation(rsp); }));
        }));
    };
    ObservableProjectsApi.prototype.getProjectLimit = function (limitName, groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getProjectLimit(limitName, groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_527 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_527(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_528 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_528(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getProjectLimit(rsp); }));
        }));
    };
    ObservableProjectsApi.prototype.getProjectSettings = function (groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getProjectSettings(groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_529 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_529(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_530 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_530(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getProjectSettings(rsp); }));
        }));
    };
    ObservableProjectsApi.prototype.listProjectInvitations = function (groupId, envelope, pretty, username, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listProjectInvitations(groupId, envelope, pretty, username, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_531 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_531(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_532 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_532(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listProjectInvitations(rsp); }));
        }));
    };
    ObservableProjectsApi.prototype.listProjectLimits = function (groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listProjectLimits(groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_533 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_533(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_534 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_534(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listProjectLimits(rsp); }));
        }));
    };
    ObservableProjectsApi.prototype.listProjectUsers = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, flattenTeams, includeOrgUsers, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listProjectUsers(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, flattenTeams, includeOrgUsers, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_535 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_535(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_536 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_536(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listProjectUsers(rsp); }));
        }));
    };
    ObservableProjectsApi.prototype.listProjects = function (envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listProjects(envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_537 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_537(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_538 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_538(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listProjects(rsp); }));
        }));
    };
    ObservableProjectsApi.prototype.removeProjectUser = function (groupId, userId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.removeProjectUser(groupId, userId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_539 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_539(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_540 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_540(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.removeProjectUser(rsp); }));
        }));
    };
    ObservableProjectsApi.prototype.setProjectLimit = function (limitName, groupId, envelope, pretty, apiLimitView, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.setProjectLimit(limitName, groupId, envelope, pretty, apiLimitView, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_541 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_541(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_542 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_542(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.setProjectLimit(rsp); }));
        }));
    };
    ObservableProjectsApi.prototype.updateProject = function (groupId, envelope, pretty, groupName, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateProject(groupId, envelope, pretty, groupName, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_543 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_543(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_544 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_544(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateProject(rsp); }));
        }));
    };
    ObservableProjectsApi.prototype.updateProjectInvitation = function (groupId, apiGroupInvitationRequestView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateProjectInvitation(groupId, apiGroupInvitationRequestView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_545 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_545(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_546 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_546(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateProjectInvitation(rsp); }));
        }));
    };
    ObservableProjectsApi.prototype.updateProjectInvitationById = function (groupId, invitationId, apiGroupInvitationUpdateRequestView, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateProjectInvitationById(groupId, invitationId, apiGroupInvitationUpdateRequestView, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_547 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_547(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_548 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_548(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateProjectInvitationById(rsp); }));
        }));
    };
    ObservableProjectsApi.prototype.updateProjectSettings = function (groupId, envelope, pretty, groupSettings, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateProjectSettings(groupId, envelope, pretty, groupSettings, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_549 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_549(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_550 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_550(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateProjectSettings(rsp); }));
        }));
    };
    return ObservableProjectsApi;
}());
exports.ObservableProjectsApi = ObservableProjectsApi;
var RollingIndexApi_1 = __nccwpck_require__(28218);
var ObservableRollingIndexApi = (function () {
    function ObservableRollingIndexApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new RollingIndexApi_1.RollingIndexApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new RollingIndexApi_1.RollingIndexApiResponseProcessor();
    }
    ObservableRollingIndexApi.prototype.createRollingIndex = function (groupId, clusterName, apiIndexRequestView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createRollingIndex(groupId, clusterName, apiIndexRequestView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_551 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_551(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_552 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_552(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createRollingIndex(rsp); }));
        }));
    };
    return ObservableRollingIndexApi;
}());
exports.ObservableRollingIndexApi = ObservableRollingIndexApi;
var RootApi_1 = __nccwpck_require__(55033);
var ObservableRootApi = (function () {
    function ObservableRootApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new RootApi_1.RootApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new RootApi_1.RootApiResponseProcessor();
    }
    ObservableRootApi.prototype.getSystemStatus = function (envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getSystemStatus(envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_553 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_553(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_554 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_554(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getSystemStatus(rsp); }));
        }));
    };
    return ObservableRootApi;
}());
exports.ObservableRootApi = ObservableRootApi;
var ServerlessInstancesApi_1 = __nccwpck_require__(50055);
var ObservableServerlessInstancesApi = (function () {
    function ObservableServerlessInstancesApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new ServerlessInstancesApi_1.ServerlessInstancesApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new ServerlessInstancesApi_1.ServerlessInstancesApiResponseProcessor();
    }
    ObservableServerlessInstancesApi.prototype.createServerlessInstance = function (groupId, serverlessInstanceDescriptionCreate, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createServerlessInstance(groupId, serverlessInstanceDescriptionCreate, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_555 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_555(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_556 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_556(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createServerlessInstance(rsp); }));
        }));
    };
    ObservableServerlessInstancesApi.prototype.deleteServerlessInstance = function (groupId, name, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteServerlessInstance(groupId, name, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_557 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_557(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_558 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_558(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteServerlessInstance(rsp); }));
        }));
    };
    ObservableServerlessInstancesApi.prototype.getServerlessInstance = function (groupId, name, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getServerlessInstance(groupId, name, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_559 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_559(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_560 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_560(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getServerlessInstance(rsp); }));
        }));
    };
    ObservableServerlessInstancesApi.prototype.listServerlessInstances = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listServerlessInstances(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_561 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_561(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_562 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_562(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listServerlessInstances(rsp); }));
        }));
    };
    ObservableServerlessInstancesApi.prototype.updateServerlessInstance = function (groupId, name, serverlessInstanceDescriptionUpdate, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateServerlessInstance(groupId, name, serverlessInstanceDescriptionUpdate, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_563 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_563(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_564 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_564(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateServerlessInstance(rsp); }));
        }));
    };
    return ObservableServerlessInstancesApi;
}());
exports.ObservableServerlessInstancesApi = ObservableServerlessInstancesApi;
var ServerlessPrivateEndpointsApi_1 = __nccwpck_require__(866);
var ObservableServerlessPrivateEndpointsApi = (function () {
    function ObservableServerlessPrivateEndpointsApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new ServerlessPrivateEndpointsApi_1.ServerlessPrivateEndpointsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new ServerlessPrivateEndpointsApi_1.ServerlessPrivateEndpointsApiResponseProcessor();
    }
    ObservableServerlessPrivateEndpointsApi.prototype.createServerlessPrivateEndpoint = function (groupId, instanceName, serverlessTenantEndpointCreate, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createServerlessPrivateEndpoint(groupId, instanceName, serverlessTenantEndpointCreate, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_565 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_565(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_566 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_566(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createServerlessPrivateEndpoint(rsp); }));
        }));
    };
    ObservableServerlessPrivateEndpointsApi.prototype.deleteServerlessPrivateEndpoint = function (groupId, instanceName, endpointId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteServerlessPrivateEndpoint(groupId, instanceName, endpointId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_567 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_567(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_568 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_568(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteServerlessPrivateEndpoint(rsp); }));
        }));
    };
    ObservableServerlessPrivateEndpointsApi.prototype.getServerlessPrivateEndpoint = function (groupId, instanceName, endpointId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getServerlessPrivateEndpoint(groupId, instanceName, endpointId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_569 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_569(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_570 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_570(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getServerlessPrivateEndpoint(rsp); }));
        }));
    };
    ObservableServerlessPrivateEndpointsApi.prototype.listServerlessPrivateEndpoints = function (groupId, instanceName, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listServerlessPrivateEndpoints(groupId, instanceName, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_571 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_571(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_572 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_572(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listServerlessPrivateEndpoints(rsp); }));
        }));
    };
    ObservableServerlessPrivateEndpointsApi.prototype.updateServerlessPrivateEndpoint = function (groupId, instanceName, endpointId, envelope, serverlessTenantEndpointUpdate, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateServerlessPrivateEndpoint(groupId, instanceName, endpointId, envelope, serverlessTenantEndpointUpdate, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_573 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_573(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_574 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_574(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateServerlessPrivateEndpoint(rsp); }));
        }));
    };
    return ObservableServerlessPrivateEndpointsApi;
}());
exports.ObservableServerlessPrivateEndpointsApi = ObservableServerlessPrivateEndpointsApi;
var SharedTierRestoreJobsApi_1 = __nccwpck_require__(95222);
var ObservableSharedTierRestoreJobsApi = (function () {
    function ObservableSharedTierRestoreJobsApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new SharedTierRestoreJobsApi_1.SharedTierRestoreJobsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new SharedTierRestoreJobsApi_1.SharedTierRestoreJobsApiResponseProcessor();
    }
    ObservableSharedTierRestoreJobsApi.prototype.createSharedClusterBackupRestoreJob = function (clusterName, groupId, tenantRestore, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createSharedClusterBackupRestoreJob(clusterName, groupId, tenantRestore, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_575 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_575(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_576 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_576(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createSharedClusterBackupRestoreJob(rsp); }));
        }));
    };
    ObservableSharedTierRestoreJobsApi.prototype.getSharedClusterBackupRestoreJob = function (clusterName, groupId, restoreId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getSharedClusterBackupRestoreJob(clusterName, groupId, restoreId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_577 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_577(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_578 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_578(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getSharedClusterBackupRestoreJob(rsp); }));
        }));
    };
    ObservableSharedTierRestoreJobsApi.prototype.listSharedClusterBackupRestoreJobs = function (clusterName, groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listSharedClusterBackupRestoreJobs(clusterName, groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_579 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_579(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_580 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_580(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listSharedClusterBackupRestoreJobs(rsp); }));
        }));
    };
    return ObservableSharedTierRestoreJobsApi;
}());
exports.ObservableSharedTierRestoreJobsApi = ObservableSharedTierRestoreJobsApi;
var SharedTierSnapshotsApi_1 = __nccwpck_require__(83898);
var ObservableSharedTierSnapshotsApi = (function () {
    function ObservableSharedTierSnapshotsApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new SharedTierSnapshotsApi_1.SharedTierSnapshotsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new SharedTierSnapshotsApi_1.SharedTierSnapshotsApiResponseProcessor();
    }
    ObservableSharedTierSnapshotsApi.prototype.downloadSharedClusterBackup = function (clusterName, groupId, tenantRestore, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.downloadSharedClusterBackup(clusterName, groupId, tenantRestore, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_581 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_581(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_582 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_582(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.downloadSharedClusterBackup(rsp); }));
        }));
    };
    ObservableSharedTierSnapshotsApi.prototype.getSharedClusterBackup = function (groupId, clusterName, snapshotId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getSharedClusterBackup(groupId, clusterName, snapshotId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_583 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_583(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_584 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_584(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getSharedClusterBackup(rsp); }));
        }));
    };
    ObservableSharedTierSnapshotsApi.prototype.listSharedClusterBackups = function (groupId, clusterName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listSharedClusterBackups(groupId, clusterName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_585 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_585(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_586 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_586(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listSharedClusterBackups(rsp); }));
        }));
    };
    return ObservableSharedTierSnapshotsApi;
}());
exports.ObservableSharedTierSnapshotsApi = ObservableSharedTierSnapshotsApi;
var TeamsApi_1 = __nccwpck_require__(54194);
var ObservableTeamsApi = (function () {
    function ObservableTeamsApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new TeamsApi_1.TeamsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new TeamsApi_1.TeamsApiResponseProcessor();
    }
    ObservableTeamsApi.prototype.addAllTeamsToProject = function (groupId, apiTeamRoleView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.addAllTeamsToProject(groupId, apiTeamRoleView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_587 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_587(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_588 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_588(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.addAllTeamsToProject(rsp); }));
        }));
    };
    ObservableTeamsApi.prototype.addTeamUser = function (orgId, teamId, apiAddUserToTeamView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.addTeamUser(orgId, teamId, apiAddUserToTeamView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_589 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_589(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_590 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_590(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.addTeamUser(rsp); }));
        }));
    };
    ObservableTeamsApi.prototype.createTeam = function (orgId, apiTeamView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createTeam(orgId, apiTeamView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_591 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_591(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_592 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_592(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createTeam(rsp); }));
        }));
    };
    ObservableTeamsApi.prototype.deleteTeam = function (orgId, teamId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteTeam(orgId, teamId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_593 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_593(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_594 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_594(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteTeam(rsp); }));
        }));
    };
    ObservableTeamsApi.prototype.getTeamById = function (orgId, teamId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getTeamById(orgId, teamId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_595 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_595(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_596 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_596(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getTeamById(rsp); }));
        }));
    };
    ObservableTeamsApi.prototype.getTeamByName = function (orgId, teamName, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getTeamByName(orgId, teamName, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_597 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_597(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_598 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_598(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getTeamByName(rsp); }));
        }));
    };
    ObservableTeamsApi.prototype.listOrganizationTeams = function (orgId, envelope, itemsPerPage, includeCount, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listOrganizationTeams(orgId, envelope, itemsPerPage, includeCount, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_599 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_599(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_600 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_600(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listOrganizationTeams(rsp); }));
        }));
    };
    ObservableTeamsApi.prototype.listProjectTeams = function (groupId, envelope, pretty, includeCount, itemsPerPage, pageNum, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listProjectTeams(groupId, envelope, pretty, includeCount, itemsPerPage, pageNum, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_601 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_601(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_602 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_602(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listProjectTeams(rsp); }));
        }));
    };
    ObservableTeamsApi.prototype.listTeamUsers = function (orgId, teamId, envelope, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listTeamUsers(orgId, teamId, envelope, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_603 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_603(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_604 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_604(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listTeamUsers(rsp); }));
        }));
    };
    ObservableTeamsApi.prototype.removeProjectTeam = function (groupId, teamId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.removeProjectTeam(groupId, teamId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_605 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_605(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_606 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_606(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.removeProjectTeam(rsp); }));
        }));
    };
    ObservableTeamsApi.prototype.removeTeamUser = function (orgId, teamId, userId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.removeTeamUser(orgId, teamId, userId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_607 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_607(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_608 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_608(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.removeTeamUser(rsp); }));
        }));
    };
    ObservableTeamsApi.prototype.renameTeam = function (orgId, teamId, apiTeamView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.renameTeam(orgId, teamId, apiTeamView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_609 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_609(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_610 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_610(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.renameTeam(rsp); }));
        }));
    };
    ObservableTeamsApi.prototype.updateTeamRoles = function (groupId, teamId, apiTeamRoleView, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateTeamRoles(groupId, teamId, apiTeamRoleView, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_611 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_611(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_612 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_612(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateTeamRoles(rsp); }));
        }));
    };
    return ObservableTeamsApi;
}());
exports.ObservableTeamsApi = ObservableTeamsApi;
var TestApi_1 = __nccwpck_require__(32962);
var ObservableTestApi = (function () {
    function ObservableTestApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new TestApi_1.TestApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new TestApi_1.TestApiResponseProcessor();
    }
    ObservableTestApi.prototype.versionedExample = function (envelope, additionalInfo, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.versionedExample(envelope, additionalInfo, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_613 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_613(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_614 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_614(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.versionedExample(rsp); }));
        }));
    };
    return ObservableTestApi;
}());
exports.ObservableTestApi = ObservableTestApi;
var ThirdPartyIntegrationsApi_1 = __nccwpck_require__(85499);
var ObservableThirdPartyIntegrationsApi = (function () {
    function ObservableThirdPartyIntegrationsApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new ThirdPartyIntegrationsApi_1.ThirdPartyIntegrationsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new ThirdPartyIntegrationsApi_1.ThirdPartyIntegrationsApiResponseProcessor();
    }
    ObservableThirdPartyIntegrationsApi.prototype.createThirdPartyIntegration = function (integrationType, groupId, integrationViewForNdsGroup, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createThirdPartyIntegration(integrationType, groupId, integrationViewForNdsGroup, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_615 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_615(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_616 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_616(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createThirdPartyIntegration(rsp); }));
        }));
    };
    ObservableThirdPartyIntegrationsApi.prototype.deleteThirdPartyIntegration = function (integrationType, groupId, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.deleteThirdPartyIntegration(integrationType, groupId, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_617 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_617(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_618 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_618(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.deleteThirdPartyIntegration(rsp); }));
        }));
    };
    ObservableThirdPartyIntegrationsApi.prototype.getThirdPartyIntegration = function (groupId, integrationType, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.getThirdPartyIntegration(groupId, integrationType, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_619 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_619(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_620 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_620(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.getThirdPartyIntegration(rsp); }));
        }));
    };
    ObservableThirdPartyIntegrationsApi.prototype.listThirdPartyIntegrations = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listThirdPartyIntegrations(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_621 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_621(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_622 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_622(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listThirdPartyIntegrations(rsp); }));
        }));
    };
    ObservableThirdPartyIntegrationsApi.prototype.updateThirdPartyIntegration = function (integrationType, groupId, integrationViewForNdsGroup, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.updateThirdPartyIntegration(integrationType, groupId, integrationViewForNdsGroup, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_623 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_623(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_624 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_624(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.updateThirdPartyIntegration(rsp); }));
        }));
    };
    return ObservableThirdPartyIntegrationsApi;
}());
exports.ObservableThirdPartyIntegrationsApi = ObservableThirdPartyIntegrationsApi;
var X509AuthenticationApi_1 = __nccwpck_require__(21845);
var ObservableX509AuthenticationApi = (function () {
    function ObservableX509AuthenticationApi(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new X509AuthenticationApi_1.X509AuthenticationApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new X509AuthenticationApi_1.X509AuthenticationApiResponseProcessor();
    }
    ObservableX509AuthenticationApi.prototype.createDatabaseUserCertificate = function (groupId, username, userCert, envelope, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.createDatabaseUserCertificate(groupId, username, userCert, envelope, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_625 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_625(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_626 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_626(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.createDatabaseUserCertificate(rsp); }));
        }));
    };
    ObservableX509AuthenticationApi.prototype.disableCustomerManagedX509 = function (groupId, envelope, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.disableCustomerManagedX509(groupId, envelope, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_627 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_627(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_628 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_628(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.disableCustomerManagedX509(rsp); }));
        }));
    };
    ObservableX509AuthenticationApi.prototype.listDatabaseUserCertificates = function (groupId, username, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var _this = this;
        var requestContextPromise = this.requestFactory.listDatabaseUserCertificates(groupId, username, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        var middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        var _loop_629 = function (middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return middleware.pre(ctx); }));
        };
        for (var _i = 0, _a = this.configuration.middleware; _i < _a.length; _i++) {
            var middleware = _a[_i];
            _loop_629(middleware);
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)(function (ctx) { return _this.configuration.httpApi.send(ctx); })).
            pipe((0, rxjsStub_2.mergeMap)(function (response) {
            var middlewarePostObservable = (0, rxjsStub_1.of)(response);
            var _loop_630 = function (middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)(function (rsp) { return middleware.post(rsp); }));
            };
            for (var _i = 0, _a = _this.configuration.middleware; _i < _a.length; _i++) {
                var middleware = _a[_i];
                _loop_630(middleware);
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)(function (rsp) { return _this.responseProcessor.listDatabaseUserCertificates(rsp); }));
        }));
    };
    return ObservableX509AuthenticationApi;
}());
exports.ObservableX509AuthenticationApi = ObservableX509AuthenticationApi;
//# sourceMappingURL=ObservableAPI.js.map

/***/ }),

/***/ 9038:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PromiseX509AuthenticationApi = exports.PromiseThirdPartyIntegrationsApi = exports.PromiseTestApi = exports.PromiseTeamsApi = exports.PromiseSharedTierSnapshotsApi = exports.PromiseSharedTierRestoreJobsApi = exports.PromiseServerlessPrivateEndpointsApi = exports.PromiseServerlessInstancesApi = exports.PromiseRootApi = exports.PromiseRollingIndexApi = exports.PromiseProjectsApi = exports.PromiseProjectIPAccessListApi = exports.PromiseProgrammaticAPIKeysApi = exports.PromisePrivateEndpointServicesApi = exports.PromisePerformanceAdvisorApi = exports.PromiseOrganizationsApi = exports.PromiseOnlineArchiveApi = exports.PromiseNetworkPeeringApi = exports.PromiseMultiCloudClustersApi = exports.PromiseMonitoringAndLogsApi = exports.PromiseMongoDBCloudUsersApi = exports.PromiseMaintenanceWindowsApi = exports.PromiseLegacyBackupRestoreJobsApi = exports.PromiseLegacyBackupApi = exports.PromiseLDAPConfigurationApi = exports.PromiseInvoicesApi = exports.PromiseGlobalClustersApi = exports.PromiseFederatedAuthenticationApi = exports.PromiseEventsApi = exports.PromiseEncryptionAtRestUsingCustomerKeyManagementApi = exports.PromiseDatabaseUsersApi = exports.PromiseDataLakePipelinesApi = exports.PromiseDataFederationApi = exports.PromiseCustomDatabaseRolesApi = exports.PromiseClustersApi = exports.PromiseClusterOutageSimulationApi = exports.PromiseCloudProviderAccessApi = exports.PromiseCloudMigrationServiceApi = exports.PromiseCloudBackupsApi = exports.PromiseAuditingApi = exports.PromiseAtlasSearchApi = exports.PromiseAlertsApi = exports.PromiseAlertConfigurationsApi = exports.PromiseAccessTrackingApi = exports.PromiseAWSClustersDNSApi = void 0;
var ObservableAPI_1 = __nccwpck_require__(32372);
var PromiseAWSClustersDNSApi = (function () {
    function PromiseAWSClustersDNSApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_1.ObservableAWSClustersDNSApi(configuration, requestFactory, responseProcessor);
    }
    PromiseAWSClustersDNSApi.prototype.getAWSCustomDNS = function (groupId, envelope, pretty, _options) {
        var result = this.api.getAWSCustomDNS(groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseAWSClustersDNSApi.prototype.toggleAWSCustomDNS = function (groupId, aWSCustomDNSEnabledView, envelope, pretty, _options) {
        var result = this.api.toggleAWSCustomDNS(groupId, aWSCustomDNSEnabledView, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseAWSClustersDNSApi;
}());
exports.PromiseAWSClustersDNSApi = PromiseAWSClustersDNSApi;
var ObservableAPI_2 = __nccwpck_require__(32372);
var PromiseAccessTrackingApi = (function () {
    function PromiseAccessTrackingApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_2.ObservableAccessTrackingApi(configuration, requestFactory, responseProcessor);
    }
    PromiseAccessTrackingApi.prototype.listAccessLogsByClusterName = function (groupId, clusterName, envelope, pretty, authResult, end, ipAddress, nLogs, start, _options) {
        var result = this.api.listAccessLogsByClusterName(groupId, clusterName, envelope, pretty, authResult, end, ipAddress, nLogs, start, _options);
        return result.toPromise();
    };
    PromiseAccessTrackingApi.prototype.listAccessLogsByHostname = function (groupId, hostname, envelope, pretty, authResult, end, ipAddress, nLogs, start, _options) {
        var result = this.api.listAccessLogsByHostname(groupId, hostname, envelope, pretty, authResult, end, ipAddress, nLogs, start, _options);
        return result.toPromise();
    };
    return PromiseAccessTrackingApi;
}());
exports.PromiseAccessTrackingApi = PromiseAccessTrackingApi;
var ObservableAPI_3 = __nccwpck_require__(32372);
var PromiseAlertConfigurationsApi = (function () {
    function PromiseAlertConfigurationsApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_3.ObservableAlertConfigurationsApi(configuration, requestFactory, responseProcessor);
    }
    PromiseAlertConfigurationsApi.prototype.createAlertConfiguration = function (groupId, alertConfigViewForNdsGroup, envelope, pretty, _options) {
        var result = this.api.createAlertConfiguration(groupId, alertConfigViewForNdsGroup, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseAlertConfigurationsApi.prototype.deleteAlertConfiguration = function (groupId, alertConfigId, envelope, pretty, _options) {
        var result = this.api.deleteAlertConfiguration(groupId, alertConfigId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseAlertConfigurationsApi.prototype.getAlertConfiguration = function (groupId, alertConfigId, envelope, pretty, _options) {
        var result = this.api.getAlertConfiguration(groupId, alertConfigId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseAlertConfigurationsApi.prototype.listAlertConfigurationMatchersFieldNames = function (envelope, pretty, _options) {
        var result = this.api.listAlertConfigurationMatchersFieldNames(envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseAlertConfigurationsApi.prototype.listAlertConfigurations = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listAlertConfigurations(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseAlertConfigurationsApi.prototype.listAlertConfigurationsByAlertId = function (groupId, alertId, envelope, pretty, includeCount, itemsPerPage, pageNum, _options) {
        var result = this.api.listAlertConfigurationsByAlertId(groupId, alertId, envelope, pretty, includeCount, itemsPerPage, pageNum, _options);
        return result.toPromise();
    };
    PromiseAlertConfigurationsApi.prototype.toggleAlertConfiguration = function (groupId, alertConfigId, toggleView, envelope, pretty, _options) {
        var result = this.api.toggleAlertConfiguration(groupId, alertConfigId, toggleView, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseAlertConfigurationsApi.prototype.updateAlertConfiguration = function (groupId, alertConfigId, alertConfigViewForNdsGroup, envelope, pretty, _options) {
        var result = this.api.updateAlertConfiguration(groupId, alertConfigId, alertConfigViewForNdsGroup, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseAlertConfigurationsApi;
}());
exports.PromiseAlertConfigurationsApi = PromiseAlertConfigurationsApi;
var ObservableAPI_4 = __nccwpck_require__(32372);
var PromiseAlertsApi = (function () {
    function PromiseAlertsApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_4.ObservableAlertsApi(configuration, requestFactory, responseProcessor);
    }
    PromiseAlertsApi.prototype.acknowledgeAlert = function (groupId, alertId, alertViewForNdsGroup, envelope, pretty, _options) {
        var result = this.api.acknowledgeAlert(groupId, alertId, alertViewForNdsGroup, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseAlertsApi.prototype.getAlert = function (groupId, alertId, envelope, pretty, _options) {
        var result = this.api.getAlert(groupId, alertId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseAlertsApi.prototype.listAlerts = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, status, _options) {
        var result = this.api.listAlerts(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, status, _options);
        return result.toPromise();
    };
    PromiseAlertsApi.prototype.listAlertsByAlertConfigurationId = function (groupId, alertConfigId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listAlertsByAlertConfigurationId(groupId, alertConfigId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    return PromiseAlertsApi;
}());
exports.PromiseAlertsApi = PromiseAlertsApi;
var ObservableAPI_5 = __nccwpck_require__(32372);
var PromiseAtlasSearchApi = (function () {
    function PromiseAtlasSearchApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_5.ObservableAtlasSearchApi(configuration, requestFactory, responseProcessor);
    }
    PromiseAtlasSearchApi.prototype.createAtlasSearchIndex = function (groupId, clusterName, fTSIndex, envelope, pretty, _options) {
        var result = this.api.createAtlasSearchIndex(groupId, clusterName, fTSIndex, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseAtlasSearchApi.prototype.deleteAtlasSearchIndex = function (groupId, clusterName, indexId, envelope, pretty, _options) {
        var result = this.api.deleteAtlasSearchIndex(groupId, clusterName, indexId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseAtlasSearchApi.prototype.getAtlasSearchIndex = function (groupId, clusterName, indexId, envelope, pretty, _options) {
        var result = this.api.getAtlasSearchIndex(groupId, clusterName, indexId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseAtlasSearchApi.prototype.listAtlasSearchIndexes = function (groupId, clusterName, collectionName, databaseName, envelope, pretty, _options) {
        var result = this.api.listAtlasSearchIndexes(groupId, clusterName, collectionName, databaseName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseAtlasSearchApi.prototype.updateAtlasSearchIndex = function (groupId, clusterName, indexId, fTSIndex, envelope, pretty, _options) {
        var result = this.api.updateAtlasSearchIndex(groupId, clusterName, indexId, fTSIndex, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseAtlasSearchApi;
}());
exports.PromiseAtlasSearchApi = PromiseAtlasSearchApi;
var ObservableAPI_6 = __nccwpck_require__(32372);
var PromiseAuditingApi = (function () {
    function PromiseAuditingApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_6.ObservableAuditingApi(configuration, requestFactory, responseProcessor);
    }
    PromiseAuditingApi.prototype.getAuditingConfiguration = function (groupId, envelope, pretty, _options) {
        var result = this.api.getAuditingConfiguration(groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseAuditingApi.prototype.updateAuditingConfiguration = function (groupId, auditLog, envelope, pretty, _options) {
        var result = this.api.updateAuditingConfiguration(groupId, auditLog, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseAuditingApi;
}());
exports.PromiseAuditingApi = PromiseAuditingApi;
var ObservableAPI_7 = __nccwpck_require__(32372);
var PromiseCloudBackupsApi = (function () {
    function PromiseCloudBackupsApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_7.ObservableCloudBackupsApi(configuration, requestFactory, responseProcessor);
    }
    PromiseCloudBackupsApi.prototype.cancelBackupRestoreJob = function (groupId, clusterName, restoreJobId, envelope, pretty, _options) {
        var result = this.api.cancelBackupRestoreJob(groupId, clusterName, restoreJobId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.createBackupExportJob = function (groupId, clusterName, diskBackupExportJobRequest, envelope, _options) {
        var result = this.api.createBackupExportJob(groupId, clusterName, diskBackupExportJobRequest, envelope, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.createBackupRestoreJob = function (groupId, clusterName, diskBackupRestoreJob, envelope, pretty, _options) {
        var result = this.api.createBackupRestoreJob(groupId, clusterName, diskBackupRestoreJob, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.createExportBucket = function (groupId, diskBackupSnapshotAWSExportBucket, envelope, pretty, _options) {
        var result = this.api.createExportBucket(groupId, diskBackupSnapshotAWSExportBucket, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.createServerlessBackupRestoreJob = function (groupId, clusterName, serverlessBackupRestoreJob, envelope, pretty, _options) {
        var result = this.api.createServerlessBackupRestoreJob(groupId, clusterName, serverlessBackupRestoreJob, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.deleteAllBackupSchedules = function (groupId, clusterName, envelope, _options) {
        var result = this.api.deleteAllBackupSchedules(groupId, clusterName, envelope, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.deleteExportBucket = function (groupId, exportBucketId, envelope, _options) {
        var result = this.api.deleteExportBucket(groupId, exportBucketId, envelope, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.deleteReplicaSetBackup = function (groupId, clusterName, snapshotId, envelope, pretty, _options) {
        var result = this.api.deleteReplicaSetBackup(groupId, clusterName, snapshotId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.deleteShardedClusterBackup = function (groupId, clusterName, snapshotId, envelope, pretty, _options) {
        var result = this.api.deleteShardedClusterBackup(groupId, clusterName, snapshotId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.getBackupExportJob = function (groupId, clusterName, exportId, envelope, _options) {
        var result = this.api.getBackupExportJob(groupId, clusterName, exportId, envelope, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.getBackupRestoreJob = function (groupId, clusterName, restoreJobId, envelope, pretty, _options) {
        var result = this.api.getBackupRestoreJob(groupId, clusterName, restoreJobId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.getBackupSchedule = function (groupId, clusterName, envelope, pretty, _options) {
        var result = this.api.getBackupSchedule(groupId, clusterName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.getDataProtectionSettings = function (groupId, envelope, pretty, _options) {
        var result = this.api.getDataProtectionSettings(groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.getExportBucket = function (groupId, exportBucketId, envelope, _options) {
        var result = this.api.getExportBucket(groupId, exportBucketId, envelope, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.getReplicaSetBackup = function (groupId, clusterName, snapshotId, envelope, pretty, _options) {
        var result = this.api.getReplicaSetBackup(groupId, clusterName, snapshotId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.getServerlessBackup = function (groupId, clusterName, snapshotId, envelope, _options) {
        var result = this.api.getServerlessBackup(groupId, clusterName, snapshotId, envelope, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.getServerlessBackupRestoreJob = function (groupId, clusterName, restoreJobId, envelope, pretty, _options) {
        var result = this.api.getServerlessBackupRestoreJob(groupId, clusterName, restoreJobId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.getShardedClusterBackup = function (groupId, clusterName, snapshotId, envelope, pretty, _options) {
        var result = this.api.getShardedClusterBackup(groupId, clusterName, snapshotId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.listBackupExportJobs = function (groupId, clusterName, envelope, pretty, includeCount, itemsPerPage, pageNum, _options) {
        var result = this.api.listBackupExportJobs(groupId, clusterName, envelope, pretty, includeCount, itemsPerPage, pageNum, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.listBackupRestoreJobs = function (groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listBackupRestoreJobs(groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.listExportBuckets = function (groupId, envelope, pretty, _options) {
        var result = this.api.listExportBuckets(groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.listReplicaSetBackups = function (groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listReplicaSetBackups(groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.listServerlessBackupRestoreJobs = function (groupId, clusterName, envelope, pretty, _options) {
        var result = this.api.listServerlessBackupRestoreJobs(groupId, clusterName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.listServerlessBackups = function (groupId, clusterName, envelope, pretty, includeCount, itemsPerPage, pageNum, _options) {
        var result = this.api.listServerlessBackups(groupId, clusterName, envelope, pretty, includeCount, itemsPerPage, pageNum, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.listShardedClusterBackups = function (groupId, clusterName, envelope, pretty, _options) {
        var result = this.api.listShardedClusterBackups(groupId, clusterName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.takeSnapshot = function (groupId, clusterName, diskBackupOnDemandSnapshotRequest, envelope, pretty, _options) {
        var result = this.api.takeSnapshot(groupId, clusterName, diskBackupOnDemandSnapshotRequest, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.updateBackupSchedule = function (groupId, clusterName, diskBackupSnapshotSchedule, envelope, pretty, _options) {
        var result = this.api.updateBackupSchedule(groupId, clusterName, diskBackupSnapshotSchedule, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.updateDataProtectionSettings = function (groupId, dataProtectionSettings, envelope, pretty, _options) {
        var result = this.api.updateDataProtectionSettings(groupId, dataProtectionSettings, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudBackupsApi.prototype.updateSnapshotRetention = function (groupId, clusterName, snapshotId, snapshotRetention, envelope, pretty, _options) {
        var result = this.api.updateSnapshotRetention(groupId, clusterName, snapshotId, snapshotRetention, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseCloudBackupsApi;
}());
exports.PromiseCloudBackupsApi = PromiseCloudBackupsApi;
var ObservableAPI_8 = __nccwpck_require__(32372);
var PromiseCloudMigrationServiceApi = (function () {
    function PromiseCloudMigrationServiceApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_8.ObservableCloudMigrationServiceApi(configuration, requestFactory, responseProcessor);
    }
    PromiseCloudMigrationServiceApi.prototype.createLinkToken = function (orgId, targetOrgRequestView, envelope, pretty, _options) {
        var result = this.api.createLinkToken(orgId, targetOrgRequestView, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudMigrationServiceApi.prototype.createPushMigration = function (groupId, liveMigrationRequestView, envelope, pretty, _options) {
        var result = this.api.createPushMigration(groupId, liveMigrationRequestView, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudMigrationServiceApi.prototype.cutoverMigration = function (groupId, liveMigrationId, envelope, pretty, _options) {
        var result = this.api.cutoverMigration(groupId, liveMigrationId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudMigrationServiceApi.prototype.deleteLinkToken = function (orgId, envelope, _options) {
        var result = this.api.deleteLinkToken(orgId, envelope, _options);
        return result.toPromise();
    };
    PromiseCloudMigrationServiceApi.prototype.getPushMigration = function (groupId, liveMigrationId, envelope, pretty, _options) {
        var result = this.api.getPushMigration(groupId, liveMigrationId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudMigrationServiceApi.prototype.getValidationStatus = function (groupId, validationId, envelope, _options) {
        var result = this.api.getValidationStatus(groupId, validationId, envelope, _options);
        return result.toPromise();
    };
    PromiseCloudMigrationServiceApi.prototype.listSourceProjects = function (orgId, envelope, pretty, _options) {
        var result = this.api.listSourceProjects(orgId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudMigrationServiceApi.prototype.validateMigration = function (groupId, liveMigrationRequestView, envelope, pretty, _options) {
        var result = this.api.validateMigration(groupId, liveMigrationRequestView, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseCloudMigrationServiceApi;
}());
exports.PromiseCloudMigrationServiceApi = PromiseCloudMigrationServiceApi;
var ObservableAPI_9 = __nccwpck_require__(32372);
var PromiseCloudProviderAccessApi = (function () {
    function PromiseCloudProviderAccessApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_9.ObservableCloudProviderAccessApi(configuration, requestFactory, responseProcessor);
    }
    PromiseCloudProviderAccessApi.prototype.authorizeCloudProviderAccessRole = function (groupId, roleId, cloudProviderAccessRole, envelope, pretty, _options) {
        var result = this.api.authorizeCloudProviderAccessRole(groupId, roleId, cloudProviderAccessRole, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudProviderAccessApi.prototype.createCloudProviderAccessRole = function (groupId, cloudProviderAccessRole, envelope, pretty, _options) {
        var result = this.api.createCloudProviderAccessRole(groupId, cloudProviderAccessRole, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudProviderAccessApi.prototype.deauthorizeCloudProviderAccessRole = function (groupId, cloudProvider, roleId, envelope, pretty, _options) {
        var result = this.api.deauthorizeCloudProviderAccessRole(groupId, cloudProvider, roleId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudProviderAccessApi.prototype.getCloudProviderAccessRole = function (groupId, roleId, envelope, pretty, _options) {
        var result = this.api.getCloudProviderAccessRole(groupId, roleId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCloudProviderAccessApi.prototype.listCloudProviderAccessRoles = function (groupId, envelope, pretty, _options) {
        var result = this.api.listCloudProviderAccessRoles(groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseCloudProviderAccessApi;
}());
exports.PromiseCloudProviderAccessApi = PromiseCloudProviderAccessApi;
var ObservableAPI_10 = __nccwpck_require__(32372);
var PromiseClusterOutageSimulationApi = (function () {
    function PromiseClusterOutageSimulationApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_10.ObservableClusterOutageSimulationApi(configuration, requestFactory, responseProcessor);
    }
    PromiseClusterOutageSimulationApi.prototype.endOutageSimulation = function (groupId, clusterName, envelope, pretty, _options) {
        var result = this.api.endOutageSimulation(groupId, clusterName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseClusterOutageSimulationApi.prototype.getOutageSimulation = function (groupId, clusterName, envelope, pretty, _options) {
        var result = this.api.getOutageSimulation(groupId, clusterName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseClusterOutageSimulationApi.prototype.startOutageSimulation = function (groupId, clusterName, clusterOutageSimulation, envelope, pretty, _options) {
        var result = this.api.startOutageSimulation(groupId, clusterName, clusterOutageSimulation, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseClusterOutageSimulationApi;
}());
exports.PromiseClusterOutageSimulationApi = PromiseClusterOutageSimulationApi;
var ObservableAPI_11 = __nccwpck_require__(32372);
var PromiseClustersApi = (function () {
    function PromiseClustersApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_11.ObservableClustersApi(configuration, requestFactory, responseProcessor);
    }
    PromiseClustersApi.prototype.getClusterAdvancedConfiguration = function (groupId, clusterName, envelope, pretty, _options) {
        var result = this.api.getClusterAdvancedConfiguration(groupId, clusterName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseClustersApi.prototype.getClusterStatus = function (groupId, clusterName, envelope, pretty, _options) {
        var result = this.api.getClusterStatus(groupId, clusterName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseClustersApi.prototype.getSampleDatasetLoadStatus = function (groupId, sampleDatasetId, envelope, _options) {
        var result = this.api.getSampleDatasetLoadStatus(groupId, sampleDatasetId, envelope, _options);
        return result.toPromise();
    };
    PromiseClustersApi.prototype.listCloudProviderRegions = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, providers, tier, _options) {
        var result = this.api.listCloudProviderRegions(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, providers, tier, _options);
        return result.toPromise();
    };
    PromiseClustersApi.prototype.listClustersForAllProjects = function (envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listClustersForAllProjects(envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseClustersApi.prototype.loadSampleDataset = function (groupId, name, sampleDatasetStatus, envelope, _options) {
        var result = this.api.loadSampleDataset(groupId, name, sampleDatasetStatus, envelope, _options);
        return result.toPromise();
    };
    PromiseClustersApi.prototype.updateClusterAdvancedConfiguration = function (groupId, clusterName, clusterDescriptionProcessArgs, envelope, pretty, _options) {
        var result = this.api.updateClusterAdvancedConfiguration(groupId, clusterName, clusterDescriptionProcessArgs, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseClustersApi.prototype.upgradeSharedCluster = function (groupId, legacyClusterDescription, envelope, pretty, _options) {
        var result = this.api.upgradeSharedCluster(groupId, legacyClusterDescription, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseClustersApi.prototype.upgradeSharedClusterToServerless = function (groupId, serverlessInstanceDescription, envelope, pretty, _options) {
        var result = this.api.upgradeSharedClusterToServerless(groupId, serverlessInstanceDescription, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseClustersApi;
}());
exports.PromiseClustersApi = PromiseClustersApi;
var ObservableAPI_12 = __nccwpck_require__(32372);
var PromiseCustomDatabaseRolesApi = (function () {
    function PromiseCustomDatabaseRolesApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_12.ObservableCustomDatabaseRolesApi(configuration, requestFactory, responseProcessor);
    }
    PromiseCustomDatabaseRolesApi.prototype.createCustomDatabaseRole = function (groupId, customDBRole, envelope, pretty, _options) {
        var result = this.api.createCustomDatabaseRole(groupId, customDBRole, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCustomDatabaseRolesApi.prototype.deleteCustomDatabaseRole = function (groupId, roleName, envelope, pretty, _options) {
        var result = this.api.deleteCustomDatabaseRole(groupId, roleName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCustomDatabaseRolesApi.prototype.getCustomDatabaseRole = function (groupId, roleName, envelope, pretty, _options) {
        var result = this.api.getCustomDatabaseRole(groupId, roleName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCustomDatabaseRolesApi.prototype.listCustomDatabaseRoles = function (groupId, envelope, pretty, _options) {
        var result = this.api.listCustomDatabaseRoles(groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseCustomDatabaseRolesApi.prototype.updateCustomDatabaseRole = function (groupId, roleName, updateCustomDBRole, envelope, pretty, _options) {
        var result = this.api.updateCustomDatabaseRole(groupId, roleName, updateCustomDBRole, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseCustomDatabaseRolesApi;
}());
exports.PromiseCustomDatabaseRolesApi = PromiseCustomDatabaseRolesApi;
var ObservableAPI_13 = __nccwpck_require__(32372);
var PromiseDataFederationApi = (function () {
    function PromiseDataFederationApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_13.ObservableDataFederationApi(configuration, requestFactory, responseProcessor);
    }
    PromiseDataFederationApi.prototype.createDataFederationPrivateEndpoint = function (groupId, privateNetworkEndpointIdEntry, envelope, pretty, _options) {
        var result = this.api.createDataFederationPrivateEndpoint(groupId, privateNetworkEndpointIdEntry, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseDataFederationApi.prototype.createFederatedDatabase = function (groupId, dataLakeTenant, envelope, pretty, skipRoleValidation, _options) {
        var result = this.api.createFederatedDatabase(groupId, dataLakeTenant, envelope, pretty, skipRoleValidation, _options);
        return result.toPromise();
    };
    PromiseDataFederationApi.prototype.createOneDataFederationQueryLimit = function (groupId, tenantName, limitName, dataFederationTenantQueryLimit, envelope, _options) {
        var result = this.api.createOneDataFederationQueryLimit(groupId, tenantName, limitName, dataFederationTenantQueryLimit, envelope, _options);
        return result.toPromise();
    };
    PromiseDataFederationApi.prototype.deleteDataFederationPrivateEndpoint = function (groupId, endpointId, envelope, pretty, _options) {
        var result = this.api.deleteDataFederationPrivateEndpoint(groupId, endpointId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseDataFederationApi.prototype.deleteFederatedDatabase = function (groupId, tenantName, envelope, pretty, _options) {
        var result = this.api.deleteFederatedDatabase(groupId, tenantName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseDataFederationApi.prototype.deleteOneDataFederationInstanceQueryLimit = function (groupId, tenantName, limitName, envelope, _options) {
        var result = this.api.deleteOneDataFederationInstanceQueryLimit(groupId, tenantName, limitName, envelope, _options);
        return result.toPromise();
    };
    PromiseDataFederationApi.prototype.downloadFederatedDatabaseQueryLogs = function (groupId, tenantName, endDate, startDate, _options) {
        var result = this.api.downloadFederatedDatabaseQueryLogs(groupId, tenantName, endDate, startDate, _options);
        return result.toPromise();
    };
    PromiseDataFederationApi.prototype.getDataFederationPrivateEndpoint = function (groupId, endpointId, envelope, pretty, _options) {
        var result = this.api.getDataFederationPrivateEndpoint(groupId, endpointId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseDataFederationApi.prototype.getFederatedDatabase = function (groupId, tenantName, envelope, _options) {
        var result = this.api.getFederatedDatabase(groupId, tenantName, envelope, _options);
        return result.toPromise();
    };
    PromiseDataFederationApi.prototype.listDataFederationPrivateEndpoints = function (groupId, envelope, pretty, _options) {
        var result = this.api.listDataFederationPrivateEndpoints(groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseDataFederationApi.prototype.listFederatedDatabases = function (groupId, envelope, pretty, type, _options) {
        var result = this.api.listFederatedDatabases(groupId, envelope, pretty, type, _options);
        return result.toPromise();
    };
    PromiseDataFederationApi.prototype.returnFederatedDatabaseQueryLimit = function (groupId, tenantName, limitName, envelope, pretty, _options) {
        var result = this.api.returnFederatedDatabaseQueryLimit(groupId, tenantName, limitName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseDataFederationApi.prototype.returnFederatedDatabaseQueryLimits = function (groupId, tenantName, envelope, pretty, _options) {
        var result = this.api.returnFederatedDatabaseQueryLimits(groupId, tenantName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseDataFederationApi.prototype.updateFederatedDatabase = function (groupId, tenantName, skipRoleValidation, dataLakeTenant, envelope, pretty, _options) {
        var result = this.api.updateFederatedDatabase(groupId, tenantName, skipRoleValidation, dataLakeTenant, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseDataFederationApi;
}());
exports.PromiseDataFederationApi = PromiseDataFederationApi;
var ObservableAPI_14 = __nccwpck_require__(32372);
var PromiseDataLakePipelinesApi = (function () {
    function PromiseDataLakePipelinesApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_14.ObservableDataLakePipelinesApi(configuration, requestFactory, responseProcessor);
    }
    PromiseDataLakePipelinesApi.prototype.createPipeline = function (groupId, ingestionPipeline, envelope, _options) {
        var result = this.api.createPipeline(groupId, ingestionPipeline, envelope, _options);
        return result.toPromise();
    };
    PromiseDataLakePipelinesApi.prototype.deletePipeline = function (groupId, pipelineName, envelope, _options) {
        var result = this.api.deletePipeline(groupId, pipelineName, envelope, _options);
        return result.toPromise();
    };
    PromiseDataLakePipelinesApi.prototype.deletePipelineRunDataset = function (groupId, pipelineName, pipelineRunId, envelope, pretty, _options) {
        var result = this.api.deletePipelineRunDataset(groupId, pipelineName, pipelineRunId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseDataLakePipelinesApi.prototype.getPipeline = function (groupId, pipelineName, envelope, pretty, _options) {
        var result = this.api.getPipeline(groupId, pipelineName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseDataLakePipelinesApi.prototype.getPipelineRun = function (groupId, pipelineName, pipelineRunId, envelope, pretty, _options) {
        var result = this.api.getPipelineRun(groupId, pipelineName, pipelineRunId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseDataLakePipelinesApi.prototype.listPipelineRuns = function (groupId, pipelineName, envelope, includeCount, itemsPerPage, pageNum, pretty, createdBefore, _options) {
        var result = this.api.listPipelineRuns(groupId, pipelineName, envelope, includeCount, itemsPerPage, pageNum, pretty, createdBefore, _options);
        return result.toPromise();
    };
    PromiseDataLakePipelinesApi.prototype.listPipelineSchedules = function (groupId, pipelineName, envelope, pretty, _options) {
        var result = this.api.listPipelineSchedules(groupId, pipelineName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseDataLakePipelinesApi.prototype.listPipelineSnapshots = function (groupId, pipelineName, envelope, includeCount, itemsPerPage, pageNum, pretty, completedAfter, _options) {
        var result = this.api.listPipelineSnapshots(groupId, pipelineName, envelope, includeCount, itemsPerPage, pageNum, pretty, completedAfter, _options);
        return result.toPromise();
    };
    PromiseDataLakePipelinesApi.prototype.listPipelines = function (groupId, envelope, _options) {
        var result = this.api.listPipelines(groupId, envelope, _options);
        return result.toPromise();
    };
    PromiseDataLakePipelinesApi.prototype.pausePipeline = function (groupId, pipelineName, envelope, pretty, _options) {
        var result = this.api.pausePipeline(groupId, pipelineName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseDataLakePipelinesApi.prototype.resumePipeline = function (groupId, pipelineName, envelope, pretty, _options) {
        var result = this.api.resumePipeline(groupId, pipelineName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseDataLakePipelinesApi.prototype.triggerSnapshotIngestion = function (groupId, pipelineName, triggerIngestionRequest, envelope, pretty, _options) {
        var result = this.api.triggerSnapshotIngestion(groupId, pipelineName, triggerIngestionRequest, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseDataLakePipelinesApi.prototype.updatePipeline = function (groupId, pipelineName, ingestionPipeline, envelope, _options) {
        var result = this.api.updatePipeline(groupId, pipelineName, ingestionPipeline, envelope, _options);
        return result.toPromise();
    };
    return PromiseDataLakePipelinesApi;
}());
exports.PromiseDataLakePipelinesApi = PromiseDataLakePipelinesApi;
var ObservableAPI_15 = __nccwpck_require__(32372);
var PromiseDatabaseUsersApi = (function () {
    function PromiseDatabaseUsersApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_15.ObservableDatabaseUsersApi(configuration, requestFactory, responseProcessor);
    }
    PromiseDatabaseUsersApi.prototype.createDatabaseUser = function (groupId, databaseUser, envelope, pretty, _options) {
        var result = this.api.createDatabaseUser(groupId, databaseUser, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseDatabaseUsersApi.prototype.deleteDatabaseUser = function (groupId, databaseName, username, envelope, pretty, _options) {
        var result = this.api.deleteDatabaseUser(groupId, databaseName, username, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseDatabaseUsersApi.prototype.getDatabaseUser = function (groupId, databaseName, username, envelope, pretty, _options) {
        var result = this.api.getDatabaseUser(groupId, databaseName, username, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseDatabaseUsersApi.prototype.listDatabaseUsers = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listDatabaseUsers(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseDatabaseUsersApi.prototype.updateDatabaseUser = function (groupId, databaseName, username, databaseUser, envelope, pretty, _options) {
        var result = this.api.updateDatabaseUser(groupId, databaseName, username, databaseUser, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseDatabaseUsersApi;
}());
exports.PromiseDatabaseUsersApi = PromiseDatabaseUsersApi;
var ObservableAPI_16 = __nccwpck_require__(32372);
var PromiseEncryptionAtRestUsingCustomerKeyManagementApi = (function () {
    function PromiseEncryptionAtRestUsingCustomerKeyManagementApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_16.ObservableEncryptionAtRestUsingCustomerKeyManagementApi(configuration, requestFactory, responseProcessor);
    }
    PromiseEncryptionAtRestUsingCustomerKeyManagementApi.prototype.returnOneConfigurationForEncryptionAtRestUsingCustomerManagedKeysForOneProject = function (groupId, envelope, pretty, _options) {
        var result = this.api.returnOneConfigurationForEncryptionAtRestUsingCustomerManagedKeysForOneProject(groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseEncryptionAtRestUsingCustomerKeyManagementApi.prototype.updateEncryptionAtRest = function (groupId, encryptionAtRest, envelope, pretty, _options) {
        var result = this.api.updateEncryptionAtRest(groupId, encryptionAtRest, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseEncryptionAtRestUsingCustomerKeyManagementApi;
}());
exports.PromiseEncryptionAtRestUsingCustomerKeyManagementApi = PromiseEncryptionAtRestUsingCustomerKeyManagementApi;
var ObservableAPI_17 = __nccwpck_require__(32372);
var PromiseEventsApi = (function () {
    function PromiseEventsApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_17.ObservableEventsApi(configuration, requestFactory, responseProcessor);
    }
    PromiseEventsApi.prototype.getOrganizationEvent = function (orgId, eventId, envelope, pretty, includeRaw, _options) {
        var result = this.api.getOrganizationEvent(orgId, eventId, envelope, pretty, includeRaw, _options);
        return result.toPromise();
    };
    PromiseEventsApi.prototype.getProjectEvent = function (groupId, eventId, envelope, pretty, includeRaw, _options) {
        var result = this.api.getProjectEvent(groupId, eventId, envelope, pretty, includeRaw, _options);
        return result.toPromise();
    };
    PromiseEventsApi.prototype.listOrganizationEvents = function (orgId, envelope, includeCount, itemsPerPage, pageNum, pretty, eventType, includeRaw, maxDate, minDate, _options) {
        var result = this.api.listOrganizationEvents(orgId, envelope, includeCount, itemsPerPage, pageNum, pretty, eventType, includeRaw, maxDate, minDate, _options);
        return result.toPromise();
    };
    PromiseEventsApi.prototype.listProjectEvents = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, clusterNames, eventType, includeRaw, maxDate, minDate, _options) {
        var result = this.api.listProjectEvents(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, clusterNames, eventType, includeRaw, maxDate, minDate, _options);
        return result.toPromise();
    };
    return PromiseEventsApi;
}());
exports.PromiseEventsApi = PromiseEventsApi;
var ObservableAPI_18 = __nccwpck_require__(32372);
var PromiseFederatedAuthenticationApi = (function () {
    function PromiseFederatedAuthenticationApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_18.ObservableFederatedAuthenticationApi(configuration, requestFactory, responseProcessor);
    }
    PromiseFederatedAuthenticationApi.prototype.createRoleMapping = function (federationSettingsId, orgId, roleMappingView, envelope, _options) {
        var result = this.api.createRoleMapping(federationSettingsId, orgId, roleMappingView, envelope, _options);
        return result.toPromise();
    };
    PromiseFederatedAuthenticationApi.prototype.deleteFederationApp = function (federationSettingsId, _options) {
        var result = this.api.deleteFederationApp(federationSettingsId, _options);
        return result.toPromise();
    };
    PromiseFederatedAuthenticationApi.prototype.deleteRoleMapping = function (federationSettingsId, id, orgId, envelope, _options) {
        var result = this.api.deleteRoleMapping(federationSettingsId, id, orgId, envelope, _options);
        return result.toPromise();
    };
    PromiseFederatedAuthenticationApi.prototype.getConnectedOrgConfig = function (federationSettingsId, orgId, envelope, _options) {
        var result = this.api.getConnectedOrgConfig(federationSettingsId, orgId, envelope, _options);
        return result.toPromise();
    };
    PromiseFederatedAuthenticationApi.prototype.getFederationSettings = function (orgId, envelope, pretty, _options) {
        var result = this.api.getFederationSettings(orgId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseFederatedAuthenticationApi.prototype.getIdentityProvider = function (federationSettingsId, identityProviderId, envelope, _options) {
        var result = this.api.getIdentityProvider(federationSettingsId, identityProviderId, envelope, _options);
        return result.toPromise();
    };
    PromiseFederatedAuthenticationApi.prototype.getIdentityProviderMetadata = function (federationSettingsId, identityProviderId, _options) {
        var result = this.api.getIdentityProviderMetadata(federationSettingsId, identityProviderId, _options);
        return result.toPromise();
    };
    PromiseFederatedAuthenticationApi.prototype.getRoleMapping = function (federationSettingsId, id, orgId, envelope, _options) {
        var result = this.api.getRoleMapping(federationSettingsId, id, orgId, envelope, _options);
        return result.toPromise();
    };
    PromiseFederatedAuthenticationApi.prototype.listConnectedOrgConfigs = function (federationSettingsId, envelope, _options) {
        var result = this.api.listConnectedOrgConfigs(federationSettingsId, envelope, _options);
        return result.toPromise();
    };
    PromiseFederatedAuthenticationApi.prototype.listIdentityProviders = function (federationSettingsId, envelope, _options) {
        var result = this.api.listIdentityProviders(federationSettingsId, envelope, _options);
        return result.toPromise();
    };
    PromiseFederatedAuthenticationApi.prototype.listRoleMappings = function (federationSettingsId, orgId, envelope, _options) {
        var result = this.api.listRoleMappings(federationSettingsId, orgId, envelope, _options);
        return result.toPromise();
    };
    PromiseFederatedAuthenticationApi.prototype.removeConnectedOrgConfig = function (federationSettingsId, orgId, envelope, _options) {
        var result = this.api.removeConnectedOrgConfig(federationSettingsId, orgId, envelope, _options);
        return result.toPromise();
    };
    PromiseFederatedAuthenticationApi.prototype.updateConnectedOrgConfig = function (federationSettingsId, orgId, connectedOrgConfigView, envelope, _options) {
        var result = this.api.updateConnectedOrgConfig(federationSettingsId, orgId, connectedOrgConfigView, envelope, _options);
        return result.toPromise();
    };
    PromiseFederatedAuthenticationApi.prototype.updateIdentityProvider = function (federationSettingsId, identityProviderId, identityProviderUpdate, envelope, _options) {
        var result = this.api.updateIdentityProvider(federationSettingsId, identityProviderId, identityProviderUpdate, envelope, _options);
        return result.toPromise();
    };
    PromiseFederatedAuthenticationApi.prototype.updateRoleMapping = function (federationSettingsId, id, orgId, roleMappingView, envelope, _options) {
        var result = this.api.updateRoleMapping(federationSettingsId, id, orgId, roleMappingView, envelope, _options);
        return result.toPromise();
    };
    return PromiseFederatedAuthenticationApi;
}());
exports.PromiseFederatedAuthenticationApi = PromiseFederatedAuthenticationApi;
var ObservableAPI_19 = __nccwpck_require__(32372);
var PromiseGlobalClustersApi = (function () {
    function PromiseGlobalClustersApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_19.ObservableGlobalClustersApi(configuration, requestFactory, responseProcessor);
    }
    PromiseGlobalClustersApi.prototype.createCustomZoneMapping = function (groupId, clusterName, geoSharding, envelope, _options) {
        var result = this.api.createCustomZoneMapping(groupId, clusterName, geoSharding, envelope, _options);
        return result.toPromise();
    };
    PromiseGlobalClustersApi.prototype.createManagedNamespace = function (groupId, clusterName, managedNamespaceView, envelope, _options) {
        var result = this.api.createManagedNamespace(groupId, clusterName, managedNamespaceView, envelope, _options);
        return result.toPromise();
    };
    PromiseGlobalClustersApi.prototype.deleteAllCustomZoneMappings = function (groupId, clusterName, envelope, _options) {
        var result = this.api.deleteAllCustomZoneMappings(groupId, clusterName, envelope, _options);
        return result.toPromise();
    };
    PromiseGlobalClustersApi.prototype.deleteManagedNamespace = function (clusterName, groupId, envelope, pretty, db, collection, _options) {
        var result = this.api.deleteManagedNamespace(clusterName, groupId, envelope, pretty, db, collection, _options);
        return result.toPromise();
    };
    PromiseGlobalClustersApi.prototype.getManagedNamespace = function (groupId, clusterName, envelope, _options) {
        var result = this.api.getManagedNamespace(groupId, clusterName, envelope, _options);
        return result.toPromise();
    };
    return PromiseGlobalClustersApi;
}());
exports.PromiseGlobalClustersApi = PromiseGlobalClustersApi;
var ObservableAPI_20 = __nccwpck_require__(32372);
var PromiseInvoicesApi = (function () {
    function PromiseInvoicesApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_20.ObservableInvoicesApi(configuration, requestFactory, responseProcessor);
    }
    PromiseInvoicesApi.prototype.downloadInvoiceCSV = function (orgId, invoiceId, envelope, pretty, _options) {
        var result = this.api.downloadInvoiceCSV(orgId, invoiceId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseInvoicesApi.prototype.getInvoice = function (orgId, invoiceId, envelope, pretty, _options) {
        var result = this.api.getInvoice(orgId, invoiceId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseInvoicesApi.prototype.listInvoices = function (orgId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listInvoices(orgId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseInvoicesApi.prototype.listPendingInvoices = function (orgId, envelope, pretty, _options) {
        var result = this.api.listPendingInvoices(orgId, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseInvoicesApi;
}());
exports.PromiseInvoicesApi = PromiseInvoicesApi;
var ObservableAPI_21 = __nccwpck_require__(32372);
var PromiseLDAPConfigurationApi = (function () {
    function PromiseLDAPConfigurationApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_21.ObservableLDAPConfigurationApi(configuration, requestFactory, responseProcessor);
    }
    PromiseLDAPConfigurationApi.prototype.deleteLDAPConfiguration = function (groupId, envelope, pretty, _options) {
        var result = this.api.deleteLDAPConfiguration(groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseLDAPConfigurationApi.prototype.getLDAPConfiguration = function (groupId, envelope, pretty, _options) {
        var result = this.api.getLDAPConfiguration(groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseLDAPConfigurationApi.prototype.getLDAPConfigurationStatus = function (groupId, requestId, envelope, pretty, _options) {
        var result = this.api.getLDAPConfigurationStatus(groupId, requestId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseLDAPConfigurationApi.prototype.saveLDAPConfiguration = function (groupId, userSecurity, envelope, pretty, _options) {
        var result = this.api.saveLDAPConfiguration(groupId, userSecurity, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseLDAPConfigurationApi.prototype.verifyLDAPConfiguration = function (groupId, nDSLDAPVerifyConnectivityJobRequestParams, envelope, pretty, _options) {
        var result = this.api.verifyLDAPConfiguration(groupId, nDSLDAPVerifyConnectivityJobRequestParams, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseLDAPConfigurationApi;
}());
exports.PromiseLDAPConfigurationApi = PromiseLDAPConfigurationApi;
var ObservableAPI_22 = __nccwpck_require__(32372);
var PromiseLegacyBackupApi = (function () {
    function PromiseLegacyBackupApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_22.ObservableLegacyBackupApi(configuration, requestFactory, responseProcessor);
    }
    PromiseLegacyBackupApi.prototype.deleteLegacySnapshot = function (groupId, clusterName, snapshotId, envelope, pretty, _options) {
        var result = this.api.deleteLegacySnapshot(groupId, clusterName, snapshotId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseLegacyBackupApi.prototype.getLegacyBackupCheckpoint = function (groupId, checkpointId, clusterName, envelope, pretty, _options) {
        var result = this.api.getLegacyBackupCheckpoint(groupId, checkpointId, clusterName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseLegacyBackupApi.prototype.getLegacyBackupRestoreJob = function (groupId, clusterName, jobId, envelope, pretty, _options) {
        var result = this.api.getLegacyBackupRestoreJob(groupId, clusterName, jobId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseLegacyBackupApi.prototype.getLegacySnapshot = function (groupId, clusterName, snapshotId, envelope, pretty, _options) {
        var result = this.api.getLegacySnapshot(groupId, clusterName, snapshotId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseLegacyBackupApi.prototype.getLegacySnapshotSchedule = function (groupId, clusterName, envelope, pretty, _options) {
        var result = this.api.getLegacySnapshotSchedule(groupId, clusterName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseLegacyBackupApi.prototype.listLegacyBackupCheckpoints = function (groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listLegacyBackupCheckpoints(groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseLegacyBackupApi.prototype.listLegacyBackupRestoreJobs = function (groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, batchId, _options) {
        var result = this.api.listLegacyBackupRestoreJobs(groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, batchId, _options);
        return result.toPromise();
    };
    PromiseLegacyBackupApi.prototype.listLegacySnapshots = function (groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, completed, _options) {
        var result = this.api.listLegacySnapshots(groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, completed, _options);
        return result.toPromise();
    };
    PromiseLegacyBackupApi.prototype.updateLegacySnapshotRetention = function (groupId, clusterName, snapshotId, apiSnapshotView, envelope, pretty, _options) {
        var result = this.api.updateLegacySnapshotRetention(groupId, clusterName, snapshotId, apiSnapshotView, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseLegacyBackupApi.prototype.updateLegacySnapshotSchedule = function (groupId, clusterName, snapshotSchedule, envelope, pretty, _options) {
        var result = this.api.updateLegacySnapshotSchedule(groupId, clusterName, snapshotSchedule, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseLegacyBackupApi;
}());
exports.PromiseLegacyBackupApi = PromiseLegacyBackupApi;
var ObservableAPI_23 = __nccwpck_require__(32372);
var PromiseLegacyBackupRestoreJobsApi = (function () {
    function PromiseLegacyBackupRestoreJobsApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_23.ObservableLegacyBackupRestoreJobsApi(configuration, requestFactory, responseProcessor);
    }
    PromiseLegacyBackupRestoreJobsApi.prototype.createLegacyBackupRestoreJob = function (groupId, clusterName, apiRestoreJobView, envelope, pretty, _options) {
        var result = this.api.createLegacyBackupRestoreJob(groupId, clusterName, apiRestoreJobView, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseLegacyBackupRestoreJobsApi;
}());
exports.PromiseLegacyBackupRestoreJobsApi = PromiseLegacyBackupRestoreJobsApi;
var ObservableAPI_24 = __nccwpck_require__(32372);
var PromiseMaintenanceWindowsApi = (function () {
    function PromiseMaintenanceWindowsApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_24.ObservableMaintenanceWindowsApi(configuration, requestFactory, responseProcessor);
    }
    PromiseMaintenanceWindowsApi.prototype.deferMaintenanceWindow = function (groupId, envelope, _options) {
        var result = this.api.deferMaintenanceWindow(groupId, envelope, _options);
        return result.toPromise();
    };
    PromiseMaintenanceWindowsApi.prototype.getMaintenanceWindow = function (groupId, envelope, pretty, _options) {
        var result = this.api.getMaintenanceWindow(groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseMaintenanceWindowsApi.prototype.resetMaintenanceWindow = function (groupId, envelope, _options) {
        var result = this.api.resetMaintenanceWindow(groupId, envelope, _options);
        return result.toPromise();
    };
    PromiseMaintenanceWindowsApi.prototype.toggleMaintenanceAutoDefer = function (groupId, envelope, _options) {
        var result = this.api.toggleMaintenanceAutoDefer(groupId, envelope, _options);
        return result.toPromise();
    };
    PromiseMaintenanceWindowsApi.prototype.updateMaintenanceWindow = function (groupId, groupMaintenanceWindow, envelope, _options) {
        var result = this.api.updateMaintenanceWindow(groupId, groupMaintenanceWindow, envelope, _options);
        return result.toPromise();
    };
    return PromiseMaintenanceWindowsApi;
}());
exports.PromiseMaintenanceWindowsApi = PromiseMaintenanceWindowsApi;
var ObservableAPI_25 = __nccwpck_require__(32372);
var PromiseMongoDBCloudUsersApi = (function () {
    function PromiseMongoDBCloudUsersApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_25.ObservableMongoDBCloudUsersApi(configuration, requestFactory, responseProcessor);
    }
    PromiseMongoDBCloudUsersApi.prototype.createUser = function (apiAppUserView, envelope, pretty, _options) {
        var result = this.api.createUser(apiAppUserView, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseMongoDBCloudUsersApi.prototype.getUser = function (userId, envelope, pretty, _options) {
        var result = this.api.getUser(userId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseMongoDBCloudUsersApi.prototype.getUserByUsername = function (userName, envelope, pretty, _options) {
        var result = this.api.getUserByUsername(userName, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseMongoDBCloudUsersApi;
}());
exports.PromiseMongoDBCloudUsersApi = PromiseMongoDBCloudUsersApi;
var ObservableAPI_26 = __nccwpck_require__(32372);
var PromiseMonitoringAndLogsApi = (function () {
    function PromiseMonitoringAndLogsApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_26.ObservableMonitoringAndLogsApi(configuration, requestFactory, responseProcessor);
    }
    PromiseMonitoringAndLogsApi.prototype.getAtlasProcess = function (groupId, processId, envelope, pretty, _options) {
        var result = this.api.getAtlasProcess(groupId, processId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseMonitoringAndLogsApi.prototype.getDatabase = function (groupId, databaseName, processId, envelope, pretty, _options) {
        var result = this.api.getDatabase(groupId, databaseName, processId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseMonitoringAndLogsApi.prototype.getDatabaseMeasurements = function (groupId, databaseName, processId, envelope, pretty, m, _options) {
        var result = this.api.getDatabaseMeasurements(groupId, databaseName, processId, envelope, pretty, m, _options);
        return result.toPromise();
    };
    PromiseMonitoringAndLogsApi.prototype.getDiskMeasurements = function (groupId, partitionName, processId, envelope, pretty, m, _options) {
        var result = this.api.getDiskMeasurements(groupId, partitionName, processId, envelope, pretty, m, _options);
        return result.toPromise();
    };
    PromiseMonitoringAndLogsApi.prototype.getHostLogs = function (groupId, hostName, logName, endDate, startDate, _options) {
        var result = this.api.getHostLogs(groupId, hostName, logName, endDate, startDate, _options);
        return result.toPromise();
    };
    PromiseMonitoringAndLogsApi.prototype.getHostMeasurements = function (groupId, processId, envelope, pretty, m, period, _options) {
        var result = this.api.getHostMeasurements(groupId, processId, envelope, pretty, m, period, _options);
        return result.toPromise();
    };
    PromiseMonitoringAndLogsApi.prototype.getIndexMetrics = function (processId, indexName, databaseName, collectionName, groupId, granularity, metrics, period, start, end, envelope, _options) {
        var result = this.api.getIndexMetrics(processId, indexName, databaseName, collectionName, groupId, granularity, metrics, period, start, end, envelope, _options);
        return result.toPromise();
    };
    PromiseMonitoringAndLogsApi.prototype.getMeasurements = function (processId, groupId, granularity, metrics, period, start, end, envelope, _options) {
        var result = this.api.getMeasurements(processId, groupId, granularity, metrics, period, start, end, envelope, _options);
        return result.toPromise();
    };
    PromiseMonitoringAndLogsApi.prototype.listAtlasProcesses = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listAtlasProcesses(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseMonitoringAndLogsApi.prototype.listDatabases = function (groupId, processId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listDatabases(groupId, processId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseMonitoringAndLogsApi.prototype.listDiskMeasurements = function (partitionName, groupId, processId, envelope, _options) {
        var result = this.api.listDiskMeasurements(partitionName, groupId, processId, envelope, _options);
        return result.toPromise();
    };
    PromiseMonitoringAndLogsApi.prototype.listDiskPartitions = function (groupId, processId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listDiskPartitions(groupId, processId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseMonitoringAndLogsApi.prototype.listIndexMetrics = function (processId, databaseName, collectionName, groupId, granularity, metrics, period, start, end, envelope, _options) {
        var result = this.api.listIndexMetrics(processId, databaseName, collectionName, groupId, granularity, metrics, period, start, end, envelope, _options);
        return result.toPromise();
    };
    PromiseMonitoringAndLogsApi.prototype.listMetricTypes = function (processId, groupId, envelope, _options) {
        var result = this.api.listMetricTypes(processId, groupId, envelope, _options);
        return result.toPromise();
    };
    return PromiseMonitoringAndLogsApi;
}());
exports.PromiseMonitoringAndLogsApi = PromiseMonitoringAndLogsApi;
var ObservableAPI_27 = __nccwpck_require__(32372);
var PromiseMultiCloudClustersApi = (function () {
    function PromiseMultiCloudClustersApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_27.ObservableMultiCloudClustersApi(configuration, requestFactory, responseProcessor);
    }
    PromiseMultiCloudClustersApi.prototype.createCluster = function (groupId, clusterDescriptionV15, envelope, pretty, _options) {
        var result = this.api.createCluster(groupId, clusterDescriptionV15, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseMultiCloudClustersApi.prototype.deleteCluster = function (groupId, clusterName, envelope, retainBackups, _options) {
        var result = this.api.deleteCluster(groupId, clusterName, envelope, retainBackups, _options);
        return result.toPromise();
    };
    PromiseMultiCloudClustersApi.prototype.getCluster = function (groupId, clusterName, envelope, pretty, _options) {
        var result = this.api.getCluster(groupId, clusterName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseMultiCloudClustersApi.prototype.listClusters = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listClusters(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseMultiCloudClustersApi.prototype.testFailover = function (groupId, clusterName, envelope, pretty, _options) {
        var result = this.api.testFailover(groupId, clusterName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseMultiCloudClustersApi.prototype.updateCluster = function (groupId, clusterName, clusterDescriptionV15, envelope, pretty, _options) {
        var result = this.api.updateCluster(groupId, clusterName, clusterDescriptionV15, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseMultiCloudClustersApi;
}());
exports.PromiseMultiCloudClustersApi = PromiseMultiCloudClustersApi;
var ObservableAPI_28 = __nccwpck_require__(32372);
var PromiseNetworkPeeringApi = (function () {
    function PromiseNetworkPeeringApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_28.ObservableNetworkPeeringApi(configuration, requestFactory, responseProcessor);
    }
    PromiseNetworkPeeringApi.prototype.createPeeringConnection = function (groupId, apiAtlasContainerPeerViewRequest, envelope, pretty, _options) {
        var result = this.api.createPeeringConnection(groupId, apiAtlasContainerPeerViewRequest, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseNetworkPeeringApi.prototype.createPeeringContainer = function (groupId, cloudProviderContainer, envelope, pretty, _options) {
        var result = this.api.createPeeringContainer(groupId, cloudProviderContainer, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseNetworkPeeringApi.prototype.deletePeeringConnection = function (groupId, peerId, envelope, pretty, _options) {
        var result = this.api.deletePeeringConnection(groupId, peerId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseNetworkPeeringApi.prototype.deletePeeringContainer = function (groupId, containerId, envelope, pretty, _options) {
        var result = this.api.deletePeeringContainer(groupId, containerId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseNetworkPeeringApi.prototype.disablePeering = function (groupId, privateIPModeView, envelope, pretty, _options) {
        var result = this.api.disablePeering(groupId, privateIPModeView, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseNetworkPeeringApi.prototype.getPeeringConnection = function (groupId, peerId, envelope, pretty, _options) {
        var result = this.api.getPeeringConnection(groupId, peerId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseNetworkPeeringApi.prototype.getPeeringContainer = function (groupId, containerId, envelope, pretty, _options) {
        var result = this.api.getPeeringContainer(groupId, containerId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseNetworkPeeringApi.prototype.listPeeringConnections = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, providerName, _options) {
        var result = this.api.listPeeringConnections(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, providerName, _options);
        return result.toPromise();
    };
    PromiseNetworkPeeringApi.prototype.listPeeringContainerByCloudProvider = function (groupId, providerName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listPeeringContainerByCloudProvider(groupId, providerName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseNetworkPeeringApi.prototype.listPeeringContainers = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listPeeringContainers(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseNetworkPeeringApi.prototype.updatePeeringConnection = function (groupId, peerId, apiAtlasContainerPeerViewRequest, envelope, pretty, _options) {
        var result = this.api.updatePeeringConnection(groupId, peerId, apiAtlasContainerPeerViewRequest, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseNetworkPeeringApi.prototype.updatePeeringContainer = function (groupId, containerId, cloudProviderContainer, envelope, pretty, _options) {
        var result = this.api.updatePeeringContainer(groupId, containerId, cloudProviderContainer, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseNetworkPeeringApi.prototype.verifyConnectViaPeeringOnlyModeForOneProject = function (groupId, envelope, pretty, _options) {
        var result = this.api.verifyConnectViaPeeringOnlyModeForOneProject(groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseNetworkPeeringApi;
}());
exports.PromiseNetworkPeeringApi = PromiseNetworkPeeringApi;
var ObservableAPI_29 = __nccwpck_require__(32372);
var PromiseOnlineArchiveApi = (function () {
    function PromiseOnlineArchiveApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_29.ObservableOnlineArchiveApi(configuration, requestFactory, responseProcessor);
    }
    PromiseOnlineArchiveApi.prototype.createOnlineArchive = function (groupId, clusterName, onlineArchive, envelope, pretty, _options) {
        var result = this.api.createOnlineArchive(groupId, clusterName, onlineArchive, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseOnlineArchiveApi.prototype.deleteOnlineArchive = function (groupId, archiveId, clusterName, envelope, pretty, _options) {
        var result = this.api.deleteOnlineArchive(groupId, archiveId, clusterName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseOnlineArchiveApi.prototype.downloadOnlineArchiveQueryLogs = function (groupId, clusterName, envelope, startDate, endDate, archiveOnly, _options) {
        var result = this.api.downloadOnlineArchiveQueryLogs(groupId, clusterName, envelope, startDate, endDate, archiveOnly, _options);
        return result.toPromise();
    };
    PromiseOnlineArchiveApi.prototype.getOnlineArchive = function (groupId, archiveId, clusterName, envelope, pretty, _options) {
        var result = this.api.getOnlineArchive(groupId, archiveId, clusterName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseOnlineArchiveApi.prototype.listOnlineArchives = function (groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listOnlineArchives(groupId, clusterName, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseOnlineArchiveApi.prototype.updateOnlineArchive = function (groupId, archiveId, clusterName, onlineArchive, envelope, pretty, _options) {
        var result = this.api.updateOnlineArchive(groupId, archiveId, clusterName, onlineArchive, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseOnlineArchiveApi;
}());
exports.PromiseOnlineArchiveApi = PromiseOnlineArchiveApi;
var ObservableAPI_30 = __nccwpck_require__(32372);
var PromiseOrganizationsApi = (function () {
    function PromiseOrganizationsApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_30.ObservableOrganizationsApi(configuration, requestFactory, responseProcessor);
    }
    PromiseOrganizationsApi.prototype.createOrganization = function (createOrganizationRequest, envelope, pretty, _options) {
        var result = this.api.createOrganization(createOrganizationRequest, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseOrganizationsApi.prototype.createOrganizationInvitation = function (orgId, apiOrganizationInvitationRequestView, envelope, pretty, _options) {
        var result = this.api.createOrganizationInvitation(orgId, apiOrganizationInvitationRequestView, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseOrganizationsApi.prototype.deleteOrganization = function (orgId, envelope, _options) {
        var result = this.api.deleteOrganization(orgId, envelope, _options);
        return result.toPromise();
    };
    PromiseOrganizationsApi.prototype.deleteOrganizationInvitation = function (orgId, invitationId, envelope, pretty, _options) {
        var result = this.api.deleteOrganizationInvitation(orgId, invitationId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseOrganizationsApi.prototype.getOrganization = function (orgId, envelope, pretty, _options) {
        var result = this.api.getOrganization(orgId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseOrganizationsApi.prototype.getOrganizationInvitation = function (orgId, invitationId, envelope, _options) {
        var result = this.api.getOrganizationInvitation(orgId, invitationId, envelope, _options);
        return result.toPromise();
    };
    PromiseOrganizationsApi.prototype.getOrganizationSettings = function (orgId, envelope, pretty, _options) {
        var result = this.api.getOrganizationSettings(orgId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseOrganizationsApi.prototype.listOrganizationInvitations = function (orgId, envelope, pretty, username, _options) {
        var result = this.api.listOrganizationInvitations(orgId, envelope, pretty, username, _options);
        return result.toPromise();
    };
    PromiseOrganizationsApi.prototype.listOrganizationProjects = function (orgId, envelope, includeCount, itemsPerPage, pageNum, pretty, name, _options) {
        var result = this.api.listOrganizationProjects(orgId, envelope, includeCount, itemsPerPage, pageNum, pretty, name, _options);
        return result.toPromise();
    };
    PromiseOrganizationsApi.prototype.listOrganizationUsers = function (orgId, envelope, pretty, _options) {
        var result = this.api.listOrganizationUsers(orgId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseOrganizationsApi.prototype.listOrganizations = function (envelope, includeCount, itemsPerPage, pageNum, pretty, name, _options) {
        var result = this.api.listOrganizations(envelope, includeCount, itemsPerPage, pageNum, pretty, name, _options);
        return result.toPromise();
    };
    PromiseOrganizationsApi.prototype.renameOrganization = function (orgId, apiOrganizationView, envelope, pretty, _options) {
        var result = this.api.renameOrganization(orgId, apiOrganizationView, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseOrganizationsApi.prototype.updateOrganizationInvitation = function (orgId, apiOrganizationInvitationRequestView, envelope, pretty, _options) {
        var result = this.api.updateOrganizationInvitation(orgId, apiOrganizationInvitationRequestView, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseOrganizationsApi.prototype.updateOrganizationInvitationById = function (orgId, invitationId, apiOrganizationInvitationUpdateRequestView, envelope, pretty, _options) {
        var result = this.api.updateOrganizationInvitationById(orgId, invitationId, apiOrganizationInvitationUpdateRequestView, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseOrganizationsApi.prototype.updateOrganizationSettings = function (orgId, organizationSettings, envelope, pretty, _options) {
        var result = this.api.updateOrganizationSettings(orgId, organizationSettings, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseOrganizationsApi;
}());
exports.PromiseOrganizationsApi = PromiseOrganizationsApi;
var ObservableAPI_31 = __nccwpck_require__(32372);
var PromisePerformanceAdvisorApi = (function () {
    function PromisePerformanceAdvisorApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_31.ObservablePerformanceAdvisorApi(configuration, requestFactory, responseProcessor);
    }
    PromisePerformanceAdvisorApi.prototype.disableSlowOperationThresholding = function (groupId, envelope, pretty, _options) {
        var result = this.api.disableSlowOperationThresholding(groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromisePerformanceAdvisorApi.prototype.enableSlowOperationThresholding = function (groupId, envelope, pretty, _options) {
        var result = this.api.enableSlowOperationThresholding(groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromisePerformanceAdvisorApi.prototype.listSlowQueries = function (groupId, processId, envelope, pretty, duration, namespaces, nLogs, since, _options) {
        var result = this.api.listSlowQueries(groupId, processId, envelope, pretty, duration, namespaces, nLogs, since, _options);
        return result.toPromise();
    };
    PromisePerformanceAdvisorApi.prototype.listSlowQueryNamespaces = function (groupId, processId, envelope, pretty, duration, since, _options) {
        var result = this.api.listSlowQueryNamespaces(groupId, processId, envelope, pretty, duration, since, _options);
        return result.toPromise();
    };
    PromisePerformanceAdvisorApi.prototype.listSuggestedIndexes = function (groupId, processId, envelope, includeCount, itemsPerPage, pageNum, pretty, duration, namespaces, nExamples, nIndexes, since, _options) {
        var result = this.api.listSuggestedIndexes(groupId, processId, envelope, includeCount, itemsPerPage, pageNum, pretty, duration, namespaces, nExamples, nIndexes, since, _options);
        return result.toPromise();
    };
    return PromisePerformanceAdvisorApi;
}());
exports.PromisePerformanceAdvisorApi = PromisePerformanceAdvisorApi;
var ObservableAPI_32 = __nccwpck_require__(32372);
var PromisePrivateEndpointServicesApi = (function () {
    function PromisePrivateEndpointServicesApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_32.ObservablePrivateEndpointServicesApi(configuration, requestFactory, responseProcessor);
    }
    PromisePrivateEndpointServicesApi.prototype.createPrivateEndpoint = function (groupId, cloudProvider, endpointServiceId, createPrivateEndpointRequest, envelope, pretty, _options) {
        var result = this.api.createPrivateEndpoint(groupId, cloudProvider, endpointServiceId, createPrivateEndpointRequest, envelope, pretty, _options);
        return result.toPromise();
    };
    PromisePrivateEndpointServicesApi.prototype.createPrivateEndpointService = function (groupId, createEndpointServiceRequest, envelope, pretty, _options) {
        var result = this.api.createPrivateEndpointService(groupId, createEndpointServiceRequest, envelope, pretty, _options);
        return result.toPromise();
    };
    PromisePrivateEndpointServicesApi.prototype.deletePrivateEndpoint = function (groupId, cloudProvider, endpointId, endpointServiceId, envelope, pretty, _options) {
        var result = this.api.deletePrivateEndpoint(groupId, cloudProvider, endpointId, endpointServiceId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromisePrivateEndpointServicesApi.prototype.deletePrivateEndpointService = function (groupId, cloudProvider, endpointServiceId, envelope, pretty, _options) {
        var result = this.api.deletePrivateEndpointService(groupId, cloudProvider, endpointServiceId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromisePrivateEndpointServicesApi.prototype.getPrivateEndpoint = function (groupId, cloudProvider, endpointId, endpointServiceId, envelope, pretty, _options) {
        var result = this.api.getPrivateEndpoint(groupId, cloudProvider, endpointId, endpointServiceId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromisePrivateEndpointServicesApi.prototype.getPrivateEndpointService = function (groupId, cloudProvider, endpointServiceId, envelope, pretty, _options) {
        var result = this.api.getPrivateEndpointService(groupId, cloudProvider, endpointServiceId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromisePrivateEndpointServicesApi.prototype.getRegionalizedPrivateEndpointSetting = function (groupId, envelope, pretty, _options) {
        var result = this.api.getRegionalizedPrivateEndpointSetting(groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromisePrivateEndpointServicesApi.prototype.listPrivateEndpointServices = function (groupId, cloudProvider, envelope, pretty, _options) {
        var result = this.api.listPrivateEndpointServices(groupId, cloudProvider, envelope, pretty, _options);
        return result.toPromise();
    };
    PromisePrivateEndpointServicesApi.prototype.toggleRegionalizedPrivateEndpointSetting = function (groupId, projectSettingItemView, envelope, pretty, _options) {
        var result = this.api.toggleRegionalizedPrivateEndpointSetting(groupId, projectSettingItemView, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromisePrivateEndpointServicesApi;
}());
exports.PromisePrivateEndpointServicesApi = PromisePrivateEndpointServicesApi;
var ObservableAPI_33 = __nccwpck_require__(32372);
var PromiseProgrammaticAPIKeysApi = (function () {
    function PromiseProgrammaticAPIKeysApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_33.ObservableProgrammaticAPIKeysApi(configuration, requestFactory, responseProcessor);
    }
    PromiseProgrammaticAPIKeysApi.prototype.addProjectApiKey = function (groupId, apiUserId, apiUserRoleAssignment, envelope, pretty, _options) {
        var result = this.api.addProjectApiKey(groupId, apiUserId, apiUserRoleAssignment, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProgrammaticAPIKeysApi.prototype.createApiKey = function (orgId, apiCreateApiKeyView, envelope, pretty, _options) {
        var result = this.api.createApiKey(orgId, apiCreateApiKeyView, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProgrammaticAPIKeysApi.prototype.createApiKeyAccessList = function (orgId, apiUserId, apiUserAccessListView, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.createApiKeyAccessList(orgId, apiUserId, apiUserAccessListView, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseProgrammaticAPIKeysApi.prototype.createProjectApiKey = function (groupId, apiCreateApiKeyView, envelope, pretty, _options) {
        var result = this.api.createProjectApiKey(groupId, apiCreateApiKeyView, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProgrammaticAPIKeysApi.prototype.deleteApiKey = function (orgId, apiUserId, envelope, pretty, _options) {
        var result = this.api.deleteApiKey(orgId, apiUserId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProgrammaticAPIKeysApi.prototype.deleteApiKeyAcessList = function (orgId, apiUserId, ipAddress, envelope, pretty, _options) {
        var result = this.api.deleteApiKeyAcessList(orgId, apiUserId, ipAddress, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProgrammaticAPIKeysApi.prototype.getApiKey = function (orgId, apiUserId, envelope, pretty, _options) {
        var result = this.api.getApiKey(orgId, apiUserId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProgrammaticAPIKeysApi.prototype.getApiKeyAccessList = function (orgId, ipAddress, apiUserId, envelope, pretty, _options) {
        var result = this.api.getApiKeyAccessList(orgId, ipAddress, apiUserId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProgrammaticAPIKeysApi.prototype.listApiKeyAccessListsEntries = function (orgId, apiUserId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listApiKeyAccessListsEntries(orgId, apiUserId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseProgrammaticAPIKeysApi.prototype.listApiKeys = function (orgId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listApiKeys(orgId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseProgrammaticAPIKeysApi.prototype.listProjectApiKeys = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listProjectApiKeys(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseProgrammaticAPIKeysApi.prototype.removeProjectApiKey = function (groupId, apiUserId, envelope, pretty, _options) {
        var result = this.api.removeProjectApiKey(groupId, apiUserId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProgrammaticAPIKeysApi.prototype.updateApiKey = function (orgId, apiUserId, apiApiUserView, envelope, pretty, _options) {
        var result = this.api.updateApiKey(orgId, apiUserId, apiApiUserView, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProgrammaticAPIKeysApi.prototype.updateApiKeyRoles = function (groupId, apiUserId, apiCreateApiKeyView, pageNum, itemsPerPage, includeCount, pretty, envelope, _options) {
        var result = this.api.updateApiKeyRoles(groupId, apiUserId, apiCreateApiKeyView, pageNum, itemsPerPage, includeCount, pretty, envelope, _options);
        return result.toPromise();
    };
    return PromiseProgrammaticAPIKeysApi;
}());
exports.PromiseProgrammaticAPIKeysApi = PromiseProgrammaticAPIKeysApi;
var ObservableAPI_34 = __nccwpck_require__(32372);
var PromiseProjectIPAccessListApi = (function () {
    function PromiseProjectIPAccessListApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_34.ObservableProjectIPAccessListApi(configuration, requestFactory, responseProcessor);
    }
    PromiseProjectIPAccessListApi.prototype.createProjectIpAccessList = function (groupId, networkPermissionEntry, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.createProjectIpAccessList(groupId, networkPermissionEntry, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseProjectIPAccessListApi.prototype.deleteProjectIpAccessList = function (groupId, entryValue, envelope, pretty, _options) {
        var result = this.api.deleteProjectIpAccessList(groupId, entryValue, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProjectIPAccessListApi.prototype.getProjectIpAccessListStatus = function (groupId, entryValue, envelope, pretty, _options) {
        var result = this.api.getProjectIpAccessListStatus(groupId, entryValue, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProjectIPAccessListApi.prototype.getProjectIpList = function (groupId, entryValue, envelope, pretty, _options) {
        var result = this.api.getProjectIpList(groupId, entryValue, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProjectIPAccessListApi.prototype.listProjectIpAccessLists = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listProjectIpAccessLists(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    return PromiseProjectIPAccessListApi;
}());
exports.PromiseProjectIPAccessListApi = PromiseProjectIPAccessListApi;
var ObservableAPI_35 = __nccwpck_require__(32372);
var PromiseProjectsApi = (function () {
    function PromiseProjectsApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_35.ObservableProjectsApi(configuration, requestFactory, responseProcessor);
    }
    PromiseProjectsApi.prototype.createProject = function (group, envelope, pretty, projectOwnerId, _options) {
        var result = this.api.createProject(group, envelope, pretty, projectOwnerId, _options);
        return result.toPromise();
    };
    PromiseProjectsApi.prototype.createProjectInvitation = function (groupId, apiGroupInvitationRequestView, pretty, envelope, _options) {
        var result = this.api.createProjectInvitation(groupId, apiGroupInvitationRequestView, pretty, envelope, _options);
        return result.toPromise();
    };
    PromiseProjectsApi.prototype.deleteProject = function (groupId, envelope, pretty, _options) {
        var result = this.api.deleteProject(groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProjectsApi.prototype.deleteProjectInvitation = function (groupId, invitationId, envelope, _options) {
        var result = this.api.deleteProjectInvitation(groupId, invitationId, envelope, _options);
        return result.toPromise();
    };
    PromiseProjectsApi.prototype.deleteProjectLimit = function (limitName, groupId, envelope, pretty, _options) {
        var result = this.api.deleteProjectLimit(limitName, groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProjectsApi.prototype.getProject = function (groupId, envelope, pretty, _options) {
        var result = this.api.getProject(groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProjectsApi.prototype.getProjectByName = function (groupName, envelope, pretty, _options) {
        var result = this.api.getProjectByName(groupName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProjectsApi.prototype.getProjectInvitation = function (groupId, invitationId, envelope, pretty, _options) {
        var result = this.api.getProjectInvitation(groupId, invitationId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProjectsApi.prototype.getProjectLimit = function (limitName, groupId, envelope, pretty, _options) {
        var result = this.api.getProjectLimit(limitName, groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProjectsApi.prototype.getProjectSettings = function (groupId, envelope, pretty, _options) {
        var result = this.api.getProjectSettings(groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProjectsApi.prototype.listProjectInvitations = function (groupId, envelope, pretty, username, _options) {
        var result = this.api.listProjectInvitations(groupId, envelope, pretty, username, _options);
        return result.toPromise();
    };
    PromiseProjectsApi.prototype.listProjectLimits = function (groupId, envelope, pretty, _options) {
        var result = this.api.listProjectLimits(groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProjectsApi.prototype.listProjectUsers = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, flattenTeams, includeOrgUsers, _options) {
        var result = this.api.listProjectUsers(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, flattenTeams, includeOrgUsers, _options);
        return result.toPromise();
    };
    PromiseProjectsApi.prototype.listProjects = function (envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listProjects(envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseProjectsApi.prototype.removeProjectUser = function (groupId, userId, envelope, pretty, _options) {
        var result = this.api.removeProjectUser(groupId, userId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProjectsApi.prototype.setProjectLimit = function (limitName, groupId, envelope, pretty, apiLimitView, _options) {
        var result = this.api.setProjectLimit(limitName, groupId, envelope, pretty, apiLimitView, _options);
        return result.toPromise();
    };
    PromiseProjectsApi.prototype.updateProject = function (groupId, envelope, pretty, groupName, _options) {
        var result = this.api.updateProject(groupId, envelope, pretty, groupName, _options);
        return result.toPromise();
    };
    PromiseProjectsApi.prototype.updateProjectInvitation = function (groupId, apiGroupInvitationRequestView, envelope, pretty, _options) {
        var result = this.api.updateProjectInvitation(groupId, apiGroupInvitationRequestView, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseProjectsApi.prototype.updateProjectInvitationById = function (groupId, invitationId, apiGroupInvitationUpdateRequestView, envelope, _options) {
        var result = this.api.updateProjectInvitationById(groupId, invitationId, apiGroupInvitationUpdateRequestView, envelope, _options);
        return result.toPromise();
    };
    PromiseProjectsApi.prototype.updateProjectSettings = function (groupId, envelope, pretty, groupSettings, _options) {
        var result = this.api.updateProjectSettings(groupId, envelope, pretty, groupSettings, _options);
        return result.toPromise();
    };
    return PromiseProjectsApi;
}());
exports.PromiseProjectsApi = PromiseProjectsApi;
var ObservableAPI_36 = __nccwpck_require__(32372);
var PromiseRollingIndexApi = (function () {
    function PromiseRollingIndexApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_36.ObservableRollingIndexApi(configuration, requestFactory, responseProcessor);
    }
    PromiseRollingIndexApi.prototype.createRollingIndex = function (groupId, clusterName, apiIndexRequestView, envelope, pretty, _options) {
        var result = this.api.createRollingIndex(groupId, clusterName, apiIndexRequestView, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseRollingIndexApi;
}());
exports.PromiseRollingIndexApi = PromiseRollingIndexApi;
var ObservableAPI_37 = __nccwpck_require__(32372);
var PromiseRootApi = (function () {
    function PromiseRootApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_37.ObservableRootApi(configuration, requestFactory, responseProcessor);
    }
    PromiseRootApi.prototype.getSystemStatus = function (envelope, pretty, _options) {
        var result = this.api.getSystemStatus(envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseRootApi;
}());
exports.PromiseRootApi = PromiseRootApi;
var ObservableAPI_38 = __nccwpck_require__(32372);
var PromiseServerlessInstancesApi = (function () {
    function PromiseServerlessInstancesApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_38.ObservableServerlessInstancesApi(configuration, requestFactory, responseProcessor);
    }
    PromiseServerlessInstancesApi.prototype.createServerlessInstance = function (groupId, serverlessInstanceDescriptionCreate, envelope, pretty, _options) {
        var result = this.api.createServerlessInstance(groupId, serverlessInstanceDescriptionCreate, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseServerlessInstancesApi.prototype.deleteServerlessInstance = function (groupId, name, envelope, pretty, _options) {
        var result = this.api.deleteServerlessInstance(groupId, name, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseServerlessInstancesApi.prototype.getServerlessInstance = function (groupId, name, envelope, pretty, _options) {
        var result = this.api.getServerlessInstance(groupId, name, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseServerlessInstancesApi.prototype.listServerlessInstances = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listServerlessInstances(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseServerlessInstancesApi.prototype.updateServerlessInstance = function (groupId, name, serverlessInstanceDescriptionUpdate, envelope, pretty, _options) {
        var result = this.api.updateServerlessInstance(groupId, name, serverlessInstanceDescriptionUpdate, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseServerlessInstancesApi;
}());
exports.PromiseServerlessInstancesApi = PromiseServerlessInstancesApi;
var ObservableAPI_39 = __nccwpck_require__(32372);
var PromiseServerlessPrivateEndpointsApi = (function () {
    function PromiseServerlessPrivateEndpointsApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_39.ObservableServerlessPrivateEndpointsApi(configuration, requestFactory, responseProcessor);
    }
    PromiseServerlessPrivateEndpointsApi.prototype.createServerlessPrivateEndpoint = function (groupId, instanceName, serverlessTenantEndpointCreate, envelope, _options) {
        var result = this.api.createServerlessPrivateEndpoint(groupId, instanceName, serverlessTenantEndpointCreate, envelope, _options);
        return result.toPromise();
    };
    PromiseServerlessPrivateEndpointsApi.prototype.deleteServerlessPrivateEndpoint = function (groupId, instanceName, endpointId, envelope, _options) {
        var result = this.api.deleteServerlessPrivateEndpoint(groupId, instanceName, endpointId, envelope, _options);
        return result.toPromise();
    };
    PromiseServerlessPrivateEndpointsApi.prototype.getServerlessPrivateEndpoint = function (groupId, instanceName, endpointId, envelope, _options) {
        var result = this.api.getServerlessPrivateEndpoint(groupId, instanceName, endpointId, envelope, _options);
        return result.toPromise();
    };
    PromiseServerlessPrivateEndpointsApi.prototype.listServerlessPrivateEndpoints = function (groupId, instanceName, envelope, _options) {
        var result = this.api.listServerlessPrivateEndpoints(groupId, instanceName, envelope, _options);
        return result.toPromise();
    };
    PromiseServerlessPrivateEndpointsApi.prototype.updateServerlessPrivateEndpoint = function (groupId, instanceName, endpointId, envelope, serverlessTenantEndpointUpdate, _options) {
        var result = this.api.updateServerlessPrivateEndpoint(groupId, instanceName, endpointId, envelope, serverlessTenantEndpointUpdate, _options);
        return result.toPromise();
    };
    return PromiseServerlessPrivateEndpointsApi;
}());
exports.PromiseServerlessPrivateEndpointsApi = PromiseServerlessPrivateEndpointsApi;
var ObservableAPI_40 = __nccwpck_require__(32372);
var PromiseSharedTierRestoreJobsApi = (function () {
    function PromiseSharedTierRestoreJobsApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_40.ObservableSharedTierRestoreJobsApi(configuration, requestFactory, responseProcessor);
    }
    PromiseSharedTierRestoreJobsApi.prototype.createSharedClusterBackupRestoreJob = function (clusterName, groupId, tenantRestore, envelope, pretty, _options) {
        var result = this.api.createSharedClusterBackupRestoreJob(clusterName, groupId, tenantRestore, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseSharedTierRestoreJobsApi.prototype.getSharedClusterBackupRestoreJob = function (clusterName, groupId, restoreId, envelope, pretty, _options) {
        var result = this.api.getSharedClusterBackupRestoreJob(clusterName, groupId, restoreId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseSharedTierRestoreJobsApi.prototype.listSharedClusterBackupRestoreJobs = function (clusterName, groupId, envelope, pretty, _options) {
        var result = this.api.listSharedClusterBackupRestoreJobs(clusterName, groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseSharedTierRestoreJobsApi;
}());
exports.PromiseSharedTierRestoreJobsApi = PromiseSharedTierRestoreJobsApi;
var ObservableAPI_41 = __nccwpck_require__(32372);
var PromiseSharedTierSnapshotsApi = (function () {
    function PromiseSharedTierSnapshotsApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_41.ObservableSharedTierSnapshotsApi(configuration, requestFactory, responseProcessor);
    }
    PromiseSharedTierSnapshotsApi.prototype.downloadSharedClusterBackup = function (clusterName, groupId, tenantRestore, envelope, pretty, _options) {
        var result = this.api.downloadSharedClusterBackup(clusterName, groupId, tenantRestore, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseSharedTierSnapshotsApi.prototype.getSharedClusterBackup = function (groupId, clusterName, snapshotId, envelope, pretty, _options) {
        var result = this.api.getSharedClusterBackup(groupId, clusterName, snapshotId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseSharedTierSnapshotsApi.prototype.listSharedClusterBackups = function (groupId, clusterName, envelope, pretty, _options) {
        var result = this.api.listSharedClusterBackups(groupId, clusterName, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseSharedTierSnapshotsApi;
}());
exports.PromiseSharedTierSnapshotsApi = PromiseSharedTierSnapshotsApi;
var ObservableAPI_42 = __nccwpck_require__(32372);
var PromiseTeamsApi = (function () {
    function PromiseTeamsApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_42.ObservableTeamsApi(configuration, requestFactory, responseProcessor);
    }
    PromiseTeamsApi.prototype.addAllTeamsToProject = function (groupId, apiTeamRoleView, envelope, pretty, _options) {
        var result = this.api.addAllTeamsToProject(groupId, apiTeamRoleView, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseTeamsApi.prototype.addTeamUser = function (orgId, teamId, apiAddUserToTeamView, envelope, pretty, _options) {
        var result = this.api.addTeamUser(orgId, teamId, apiAddUserToTeamView, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseTeamsApi.prototype.createTeam = function (orgId, apiTeamView, envelope, pretty, _options) {
        var result = this.api.createTeam(orgId, apiTeamView, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseTeamsApi.prototype.deleteTeam = function (orgId, teamId, envelope, pretty, _options) {
        var result = this.api.deleteTeam(orgId, teamId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseTeamsApi.prototype.getTeamById = function (orgId, teamId, envelope, pretty, _options) {
        var result = this.api.getTeamById(orgId, teamId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseTeamsApi.prototype.getTeamByName = function (orgId, teamName, envelope, pretty, _options) {
        var result = this.api.getTeamByName(orgId, teamName, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseTeamsApi.prototype.listOrganizationTeams = function (orgId, envelope, itemsPerPage, includeCount, pageNum, pretty, _options) {
        var result = this.api.listOrganizationTeams(orgId, envelope, itemsPerPage, includeCount, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseTeamsApi.prototype.listProjectTeams = function (groupId, envelope, pretty, includeCount, itemsPerPage, pageNum, _options) {
        var result = this.api.listProjectTeams(groupId, envelope, pretty, includeCount, itemsPerPage, pageNum, _options);
        return result.toPromise();
    };
    PromiseTeamsApi.prototype.listTeamUsers = function (orgId, teamId, envelope, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listTeamUsers(orgId, teamId, envelope, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseTeamsApi.prototype.removeProjectTeam = function (groupId, teamId, envelope, _options) {
        var result = this.api.removeProjectTeam(groupId, teamId, envelope, _options);
        return result.toPromise();
    };
    PromiseTeamsApi.prototype.removeTeamUser = function (orgId, teamId, userId, envelope, pretty, _options) {
        var result = this.api.removeTeamUser(orgId, teamId, userId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseTeamsApi.prototype.renameTeam = function (orgId, teamId, apiTeamView, envelope, pretty, _options) {
        var result = this.api.renameTeam(orgId, teamId, apiTeamView, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseTeamsApi.prototype.updateTeamRoles = function (groupId, teamId, apiTeamRoleView, envelope, pretty, _options) {
        var result = this.api.updateTeamRoles(groupId, teamId, apiTeamRoleView, envelope, pretty, _options);
        return result.toPromise();
    };
    return PromiseTeamsApi;
}());
exports.PromiseTeamsApi = PromiseTeamsApi;
var ObservableAPI_43 = __nccwpck_require__(32372);
var PromiseTestApi = (function () {
    function PromiseTestApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_43.ObservableTestApi(configuration, requestFactory, responseProcessor);
    }
    PromiseTestApi.prototype.versionedExample = function (envelope, additionalInfo, _options) {
        var result = this.api.versionedExample(envelope, additionalInfo, _options);
        return result.toPromise();
    };
    return PromiseTestApi;
}());
exports.PromiseTestApi = PromiseTestApi;
var ObservableAPI_44 = __nccwpck_require__(32372);
var PromiseThirdPartyIntegrationsApi = (function () {
    function PromiseThirdPartyIntegrationsApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_44.ObservableThirdPartyIntegrationsApi(configuration, requestFactory, responseProcessor);
    }
    PromiseThirdPartyIntegrationsApi.prototype.createThirdPartyIntegration = function (integrationType, groupId, integrationViewForNdsGroup, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.createThirdPartyIntegration(integrationType, groupId, integrationViewForNdsGroup, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseThirdPartyIntegrationsApi.prototype.deleteThirdPartyIntegration = function (integrationType, groupId, envelope, pretty, _options) {
        var result = this.api.deleteThirdPartyIntegration(integrationType, groupId, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseThirdPartyIntegrationsApi.prototype.getThirdPartyIntegration = function (groupId, integrationType, envelope, pretty, _options) {
        var result = this.api.getThirdPartyIntegration(groupId, integrationType, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseThirdPartyIntegrationsApi.prototype.listThirdPartyIntegrations = function (groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listThirdPartyIntegrations(groupId, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    PromiseThirdPartyIntegrationsApi.prototype.updateThirdPartyIntegration = function (integrationType, groupId, integrationViewForNdsGroup, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.updateThirdPartyIntegration(integrationType, groupId, integrationViewForNdsGroup, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    return PromiseThirdPartyIntegrationsApi;
}());
exports.PromiseThirdPartyIntegrationsApi = PromiseThirdPartyIntegrationsApi;
var ObservableAPI_45 = __nccwpck_require__(32372);
var PromiseX509AuthenticationApi = (function () {
    function PromiseX509AuthenticationApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_45.ObservableX509AuthenticationApi(configuration, requestFactory, responseProcessor);
    }
    PromiseX509AuthenticationApi.prototype.createDatabaseUserCertificate = function (groupId, username, userCert, envelope, pretty, _options) {
        var result = this.api.createDatabaseUserCertificate(groupId, username, userCert, envelope, pretty, _options);
        return result.toPromise();
    };
    PromiseX509AuthenticationApi.prototype.disableCustomerManagedX509 = function (groupId, envelope, _options) {
        var result = this.api.disableCustomerManagedX509(groupId, envelope, _options);
        return result.toPromise();
    };
    PromiseX509AuthenticationApi.prototype.listDatabaseUserCertificates = function (groupId, username, envelope, includeCount, itemsPerPage, pageNum, pretty, _options) {
        var result = this.api.listDatabaseUserCertificates(groupId, username, envelope, includeCount, itemsPerPage, pageNum, pretty, _options);
        return result.toPromise();
    };
    return PromiseX509AuthenticationApi;
}());
exports.PromiseX509AuthenticationApi = PromiseX509AuthenticationApi;
//# sourceMappingURL=PromiseAPI.js.map

/***/ }),

/***/ 73113:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.canConsumeForm = exports.isCodeInRange = void 0;
function isCodeInRange(codeRange, code) {
    if (codeRange === "0") {
        return true;
    }
    if (codeRange == code.toString()) {
        return true;
    }
    else {
        var codeString = code.toString();
        if (codeString.length != codeRange.length) {
            return false;
        }
        for (var i = 0; i < codeString.length; i++) {
            if (codeRange.charAt(i) != "X" && codeRange.charAt(i) != codeString.charAt(i)) {
                return false;
            }
        }
        return true;
    }
}
exports.isCodeInRange = isCodeInRange;
function canConsumeForm(contentTypes) {
    return contentTypes.indexOf('multipart/form-data') !== -1;
}
exports.canConsumeForm = canConsumeForm;
//# sourceMappingURL=util.js.map

/***/ }),

/***/ 94653:
/***/ ((module) => {

module.exports = eval("require")("./wait");


/***/ }),

/***/ 42357:
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ 76417:
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ 28614:
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ 35747:
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ 98605:
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ 57211:
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ 11631:
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ 12087:
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ 85622:
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ 4016:
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ 31669:
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nccwpck_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nccwpck_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	if (typeof __nccwpck_require__ !== 'undefined') __nccwpck_require__.ab = __dirname + "/";
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
const core = __nccwpck_require__(42186);
const wait = __nccwpck_require__(94653);
const atlas = __nccwpck_require__(30627)


// most @actions toolkit packages have async methods
async function run() {
  
  try {
    const org = core.getInput('organizationId');
    const project = core.getInput('projectId');
    
    core.info(`Creating cluster for org: ${org} and project: ${project}`);
    const apiUrl = new atlas.ServerConfiguration<{  }>(process.env.MDB_BASE_URL || "https://cloud.mongodb.com", {  }) 
    const apiKey = process.env.MDB_API_KEY
    const apiSecret = process.env.MDB_API_SECRET
    const client = new atlas.DigestFetch(apiKey, apiSecret, { algorithm: "MD5" })

    
    const configurationParameters = {
      httpApi: new atlas.DigestFetchHttpLibrary(client), // Can also be ignored - default is usually fine
      baseServer: apiUrl,
      
      // authMethods: authConfig, // No auth is default
      promiseMiddleware: [new Test()],
  }
  
  // Convert to actual configuration
  const config = atlas.createConfiguration(configurationParameters);
  
  // Use configuration with your_api
  const api = new atlas.ProjectsApi(config);


    core.debug((new Date()).toTimeString()); // debug is only output if you set the secret `ACTIONS_RUNNER_DEBUG` to true
    await wait(parseInt(ms));
    core.info((new Date()).toTimeString());

    core.setOutput('time', new Date().toTimeString());
  } catch (error) {
    core.setFailed(error.message);
  }
}

run();

})();

module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=index.js.map